# PyLapi SDK generated by gen_pylapi_sdk.py
#
# SDK Class: GhSDK
# 32 Resource Classes (number of methods):
#      AdvisoryResource (2)
#      AppManifestResource (1)
#      AppResource (14)
#      ApplicationResource (5)
#      CodesOfConductResource (2)
#      EmojiResource (1)
#      EnterpriseResource (2)
#      EventResource (1)
#      FeedResource (1)
#      GistResource (19)
#      GitignoreResource (2)
#      InstallationResource (2)
#      IssueResource (1)
#      LicenseResource (2)
#      MarkdownResource (2)
#      MarketplaceListingResource (6)
#      MetaResource (1)
#      NetworkResource (1)
#      NotificationResource (7)
#      OctocatResource (1)
#      OrgResource (198)
#      OrganizationResource (1)
#      ProjectResource (19)
#      RateLimitResource (1)
#      RepoResource (417)
#      RepositoryResource (11)
#      Resource (1)
#      SearchResource (7)
#      TeamResource (34)
#      UserResource (127)
#      VersionResource (1)
#      ZenResource (1)
# Total: 891 methods

from pylapi import PyLapi

class GhSDK(PyLapi):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.api_url = "https://api.github.com"
        self.api_auth_type = "Bearer"

        # Custom __init__ statements

    # Custom GhSDK methods


@GhSDK.resource_class("advisory", "")
class AdvisoryResource(GhSDK):
# To instantiate: GhSDK.resource("advisory")
# Number of methods: 2
#     securityAdvisoriesGetGlobalAdvisory
#     securityAdvisoriesListGlobalAdvisories

    @GhSDK.resource_method("advisories/{ghsa_id}", http_method="GET")
    def securityAdvisoriesGetGlobalAdvisory(self): pass
    # To call: GhSDK.resource("advisory").securityAdvisoriesGetGlobalAdvisory(...)
    # GET https://api.github.com/advisories/{ghsa_id}
    # Summary: Get a global security advisory
    # Description: Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.


    @GhSDK.resource_method("advisories", http_method="GET")
    def securityAdvisoriesListGlobalAdvisories(self): pass
    # To call: GhSDK.resource("advisory").securityAdvisoriesListGlobalAdvisories(...)
    # GET https://api.github.com/advisories
    # Summary: List global security advisories
    # Description: Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.
    #
    #   By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see "[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
    #
    # Parameters:
    #     affects:
    #       description: 'If specified, only return advisories that affect any of `package`
    #         or `package@version`. A maximum of 1000 packages can be specified.
    #
    #         If the query parameter causes the URL to exceed the maximum URL length supported
    #         by your client, you must specify fewer packages.
    #
    #
    #         Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`'
    #       in: query
    #       required: false
    #     cve_id:
    #       description: If specified, only advisories with this CVE (Common Vulnerabilities
    #         and Exposures) identifier will be returned.
    #       in: query
    #       required: false
    #     cwes:
    #       description: 'If specified, only advisories with these Common Weakness Enumerations
    #         (CWEs) will be returned.
    #
    #
    #         Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`'
    #       in: query
    #       required: false
    #     ecosystem:
    #       description: If specified, only advisories for these ecosystems will be returned.
    #       in: query
    #       required: false
    #     ghsa_id:
    #       description: If specified, only advisories with this GHSA (GitHub Security Advisory)
    #         identifier will be returned.
    #       in: query
    #       required: false
    #     is_withdrawn:
    #       description: Whether to only return advisories that have been withdrawn.
    #       in: query
    #       required: false
    #     modified:
    #       description: 'If specified, only show advisories that were updated or published
    #         on a date or date range.
    #
    #
    #         For more information on the syntax of the date range, see "[Understanding the
    #         search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."'
    #       in: query
    #       required: false
    #     per_page:
    #       description: The number of results per page (max 100).
    #       in: query
    #       required: false
    #     published:
    #       description: 'If specified, only return advisories that were published on a date
    #         or date range.
    #
    #
    #         For more information on the syntax of the date range, see "[Understanding the
    #         search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."'
    #       in: query
    #       required: false
    #     severity:
    #       description: If specified, only advisories with these severities will be returned.
    #       in: query
    #       required: false
    #     sort:
    #       description: The property to sort the results by.
    #       in: query
    #       required: false
    #     type:
    #       description: If specified, only advisories of this type will be returned. By default,
    #         a request with no other parameters defined will only return reviewed advisories
    #         that are not malware.
    #       in: query
    #       required: false
    #     updated:
    #       description: 'If specified, only return advisories that were updated on a date
    #         or date range.
    #
    #
    #         For more information on the syntax of the date range, see "[Understanding the
    #         search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."'
    #       in: query
    #       required: false
    #


@GhSDK.resource_class("app_manifest", "")
class AppManifestResource(GhSDK):
# To instantiate: GhSDK.resource("app_manifest")
# Number of methods: 1
#     appsCreateFromManifest

    @GhSDK.resource_method("app-manifests/{code}/conversions", http_method="POST")
    def appsCreateFromManifest(self): pass
    # To call: GhSDK.resource("app_manifest").appsCreateFromManifest(...)
    # POST https://api.github.com/app-manifests/{code}/conversions
    # Summary: Create a GitHub App from a manifest
    # Description: Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
    #
    # Parameters:
    #     code:
    #       description: ''
    #       in: path
    #       required: true
    #


@GhSDK.resource_class("app", "")
class AppResource(GhSDK):
# To instantiate: GhSDK.resource("app")
# Number of methods: 14
#     appsCreateInstallationAccessToken
#     appsDeleteInstallation
#     appsGetAuthenticated
#     appsGetBySlug
#     appsGetInstallation
#     appsGetWebhookConfigForApp
#     appsGetWebhookDelivery
#     appsListInstallationRequestsForAuthenticatedApp
#     appsListInstallations
#     appsListWebhookDeliveries
#     appsRedeliverWebhookDelivery
#     appsSuspendInstallation
#     appsUnsuspendInstallation
#     appsUpdateWebhookConfigForApp

    @GhSDK.resource_method("app/installations/{installation_id}/access_tokens", http_method="POST")
    def appsCreateInstallationAccessToken(self): pass
    # To call: GhSDK.resource("app").appsCreateInstallationAccessToken(...)
    # POST https://api.github.com/app/installations/{installation_id}/access_tokens
    # Summary: Create an installation access token for an app
    # Description: Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app/installations/{installation_id}", http_method="DELETE")
    def appsDeleteInstallation(self): pass
    # To call: GhSDK.resource("app").appsDeleteInstallation(...)
    # DELETE https://api.github.com/app/installations/{installation_id}
    # Summary: Delete an installation for the authenticated app
    # Description: Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app", http_method="GET")
    def appsGetAuthenticated(self): pass
    # To call: GhSDK.resource("app").appsGetAuthenticated(...)
    # GET https://api.github.com/app
    # Summary: Get the authenticated app
    # Description: Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("apps/{app_slug}", http_method="GET")
    def appsGetBySlug(self): pass
    # To call: GhSDK.resource("app").appsGetBySlug(...)
    # GET https://api.github.com/apps/{app_slug}
    # Summary: Get an app
    # Description: **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
    #
    #   If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.


    @GhSDK.resource_method("app/installations/{installation_id}", http_method="GET")
    def appsGetInstallation(self): pass
    # To call: GhSDK.resource("app").appsGetInstallation(...)
    # GET https://api.github.com/app/installations/{installation_id}
    # Summary: Get an installation for the authenticated app
    # Description: Enables an authenticated GitHub App to find an installation's information using the installation id.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app/hook/config", http_method="GET")
    def appsGetWebhookConfigForApp(self): pass
    # To call: GhSDK.resource("app").appsGetWebhookConfigForApp(...)
    # GET https://api.github.com/app/hook/config
    # Summary: Get a webhook configuration for an app
    # Description: Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app/hook/deliveries/{delivery_id}", http_method="GET")
    def appsGetWebhookDelivery(self): pass
    # To call: GhSDK.resource("app").appsGetWebhookDelivery(...)
    # GET https://api.github.com/app/hook/deliveries/{delivery_id}
    # Summary: Get a delivery for an app webhook
    # Description: Returns a delivery for the webhook configured for a GitHub App.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app/installation-requests", http_method="GET")
    def appsListInstallationRequestsForAuthenticatedApp(self): pass
    # To call: GhSDK.resource("app").appsListInstallationRequestsForAuthenticatedApp(...)
    # GET https://api.github.com/app/installation-requests
    # Summary: List installation requests for the authenticated app
    # Description: Lists all the pending installation requests for the authenticated GitHub App.


    @GhSDK.resource_method("app/installations", http_method="GET")
    def appsListInstallations(self): pass
    # To call: GhSDK.resource("app").appsListInstallations(...)
    # GET https://api.github.com/app/installations
    # Summary: List installations for the authenticated app
    # Description: You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    #
    #   The permissions the installation has are included under the `permissions` key.
    #
    # Parameters:
    #     outdated:
    #       description: ''
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("app/hook/deliveries", http_method="GET")
    def appsListWebhookDeliveries(self): pass
    # To call: GhSDK.resource("app").appsListWebhookDeliveries(...)
    # GET https://api.github.com/app/hook/deliveries
    # Summary: List deliveries for an app webhook
    # Description: Returns a list of webhook deliveries for the webhook configured for a GitHub App.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    #
    # Parameters:
    #     redelivery:
    #       description: ''
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("app/hook/deliveries/{delivery_id}/attempts", http_method="POST")
    def appsRedeliverWebhookDelivery(self): pass
    # To call: GhSDK.resource("app").appsRedeliverWebhookDelivery(...)
    # POST https://api.github.com/app/hook/deliveries/{delivery_id}/attempts
    # Summary: Redeliver a delivery for an app webhook
    # Description: Redeliver a delivery for the webhook configured for a GitHub App.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app/installations/{installation_id}/suspended", http_method="PUT")
    def appsSuspendInstallation(self): pass
    # To call: GhSDK.resource("app").appsSuspendInstallation(...)
    # PUT https://api.github.com/app/installations/{installation_id}/suspended
    # Summary: Suspend an app installation
    # Description: Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app/installations/{installation_id}/suspended", http_method="DELETE")
    def appsUnsuspendInstallation(self): pass
    # To call: GhSDK.resource("app").appsUnsuspendInstallation(...)
    # DELETE https://api.github.com/app/installations/{installation_id}/suspended
    # Summary: Unsuspend an app installation
    # Description: Removes a GitHub App installation suspension.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("app/hook/config", http_method="PATCH")
    def appsUpdateWebhookConfigForApp(self): pass
    # To call: GhSDK.resource("app").appsUpdateWebhookConfigForApp(...)
    # PATCH https://api.github.com/app/hook/config
    # Summary: Update a webhook configuration for an app
    # Description: Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


@GhSDK.resource_class("application", "")
class ApplicationResource(GhSDK):
# To instantiate: GhSDK.resource("application")
# Number of methods: 5
#     appsCheckToken
#     appsDeleteAuthorization
#     appsDeleteToken
#     appsResetToken
#     appsScopeToken

    @GhSDK.resource_method("applications/{client_id}/token", http_method="POST")
    def appsCheckToken(self): pass
    # To call: GhSDK.resource("application").appsCheckToken(...)
    # POST https://api.github.com/applications/{client_id}/token
    # Summary: Check a token
    # Description: OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.


    @GhSDK.resource_method("applications/{client_id}/grant", http_method="DELETE")
    def appsDeleteAuthorization(self): pass
    # To call: GhSDK.resource("application").appsDeleteAuthorization(...)
    # DELETE https://api.github.com/applications/{client_id}/grant
    # Summary: Delete an app authorization
    # Description: OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
    #   Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).


    @GhSDK.resource_method("applications/{client_id}/token", http_method="DELETE")
    def appsDeleteToken(self): pass
    # To call: GhSDK.resource("application").appsDeleteToken(...)
    # DELETE https://api.github.com/applications/{client_id}/token
    # Summary: Delete an app token
    # Description: OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password.


    @GhSDK.resource_method("applications/{client_id}/token", http_method="PATCH")
    def appsResetToken(self): pass
    # To call: GhSDK.resource("application").appsResetToken(...)
    # PATCH https://api.github.com/applications/{client_id}/token
    # Summary: Reset a token
    # Description: OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.


    @GhSDK.resource_method("applications/{client_id}/token/scoped", http_method="POST")
    def appsScopeToken(self): pass
    # To call: GhSDK.resource("application").appsScopeToken(...)
    # POST https://api.github.com/applications/{client_id}/token/scoped
    # Summary: Create a scoped access token
    # Description: Use a non-scoped user access token to create a repository scoped and/or permission scoped user access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.


@GhSDK.resource_class("codes_of_conduct", "")
class CodesOfConductResource(GhSDK):
# To instantiate: GhSDK.resource("codes_of_conduct")
# Number of methods: 2
#     codesOfConductGetAllCodesOfConduct
#     codesOfConductGetConductCode

    @GhSDK.resource_method("codes_of_conduct", http_method="GET")
    def codesOfConductGetAllCodesOfConduct(self): pass
    # To call: GhSDK.resource("codes_of_conduct").codesOfConductGetAllCodesOfConduct(...)
    # GET https://api.github.com/codes_of_conduct
    # Summary: Get all codes of conduct
    # Description: Returns array of all GitHub's codes of conduct.


    @GhSDK.resource_method("codes_of_conduct/{key}", http_method="GET")
    def codesOfConductGetConductCode(self): pass
    # To call: GhSDK.resource("codes_of_conduct").codesOfConductGetConductCode(...)
    # GET https://api.github.com/codes_of_conduct/{key}
    # Summary: Get a code of conduct
    # Description: Returns information about the specified GitHub code of conduct.
    #
    # Parameters:
    #     key:
    #       description: ''
    #       in: path
    #       required: true
    #


@GhSDK.resource_class("emoji", "")
class EmojiResource(GhSDK):
# To instantiate: GhSDK.resource("emoji")
# Number of methods: 1
#     emojisGet

    @GhSDK.resource_method("emojis", http_method="GET")
    def emojisGet(self): pass
    # To call: GhSDK.resource("emoji").emojisGet(...)
    # GET https://api.github.com/emojis
    # Summary: Get emojis
    # Description: Lists all the emojis available to use on GitHub.


@GhSDK.resource_class("enterprise", "")
class EnterpriseResource(GhSDK):
# To instantiate: GhSDK.resource("enterprise")
# Number of methods: 2
#     dependabotListAlertsForEnterprise
#     secretScanningListAlertsForEnterprise

    @GhSDK.resource_method("enterprises/{enterprise}/dependabot/alerts", http_method="GET")
    def dependabotListAlertsForEnterprise(self): pass
    # To call: GhSDK.resource("enterprise").dependabotListAlertsForEnterprise(...)
    # GET https://api.github.com/enterprises/{enterprise}/dependabot/alerts
    # Summary: List Dependabot alerts for an enterprise
    # Description: Lists Dependabot alerts for repositories that are owned by the specified enterprise.
    #   To use this endpoint, you must be a member of the enterprise, and you must use an
    #   access token with the `repo` scope or `security_events` scope.
    #   Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


    @GhSDK.resource_method("enterprises/{enterprise}/secret-scanning/alerts", http_method="GET")
    def secretScanningListAlertsForEnterprise(self): pass
    # To call: GhSDK.resource("enterprise").secretScanningListAlertsForEnterprise(...)
    # GET https://api.github.com/enterprises/{enterprise}/secret-scanning/alerts
    # Summary: List secret scanning alerts for an enterprise
    # Description: Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
    #   To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).


@GhSDK.resource_class("event", "")
class EventResource(GhSDK):
# To instantiate: GhSDK.resource("event")
# Number of methods: 1
#     activityListPublicEvents

    @GhSDK.resource_method("events", http_method="GET")
    def activityListPublicEvents(self): pass
    # To call: GhSDK.resource("event").activityListPublicEvents(...)
    # GET https://api.github.com/events
    # Summary: List public events
    # Description: We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.


@GhSDK.resource_class("feed", "")
class FeedResource(GhSDK):
# To instantiate: GhSDK.resource("feed")
# Number of methods: 1
#     activityGetFeeds

    @GhSDK.resource_method("feeds", http_method="GET")
    def activityGetFeeds(self): pass
    # To call: GhSDK.resource("feed").activityGetFeeds(...)
    # GET https://api.github.com/feeds
    # Summary: Get feeds
    # Description: GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
    #
    #   *   **Timeline**: The GitHub global public timeline
    #   *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
    #   *   **Current user public**: The public timeline for the authenticated user
    #   *   **Current user**: The private timeline for the authenticated user
    #   *   **Current user actor**: The private timeline for activity created by the authenticated user
    #   *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
    #   *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
    #
    #   **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.


@GhSDK.resource_class("gist", "")
class GistResource(GhSDK):
# To instantiate: GhSDK.resource("gist")
# Number of methods: 19
#     gistsCheckIsStarred
#     gistsCreate
#     gistsCreateComment
#     gistsDelete
#     gistsDeleteComment
#     gistsFork
#     gistsGet
#     gistsGetComment
#     gistsGetRevision
#     gistsList
#     gistsListComments
#     gistsListCommits
#     gistsListForks
#     gistsListPublic
#     gistsListStarred
#     gistsStar
#     gistsUnstar
#     gistsUpdate
#     gistsUpdateComment

    @GhSDK.resource_method("gists/{gist_id}/star", http_method="GET")
    def gistsCheckIsStarred(self): pass
    # To call: GhSDK.resource("gist").gistsCheckIsStarred(...)
    # GET https://api.github.com/gists/{gist_id}/star
    # Summary: Check if a gist is starred


    @GhSDK.resource_method("gists", http_method="POST")
    def gistsCreate(self): pass
    # To call: GhSDK.resource("gist").gistsCreate(...)
    # POST https://api.github.com/gists
    # Summary: Create a gist
    # Description: Allows you to add a new gist with one or more files.
    #
    #   **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.


    @GhSDK.resource_method("gists/{gist_id}/comments", http_method="POST")
    def gistsCreateComment(self): pass
    # To call: GhSDK.resource("gist").gistsCreateComment(...)
    # POST https://api.github.com/gists/{gist_id}/comments
    # Summary: Create a gist comment


    @GhSDK.resource_method("gists/{gist_id}", http_method="DELETE")
    def gistsDelete(self): pass
    # To call: GhSDK.resource("gist").gistsDelete(...)
    # DELETE https://api.github.com/gists/{gist_id}
    # Summary: Delete a gist


    @GhSDK.resource_method("gists/{gist_id}/comments/{comment_id}", http_method="DELETE")
    def gistsDeleteComment(self): pass
    # To call: GhSDK.resource("gist").gistsDeleteComment(...)
    # DELETE https://api.github.com/gists/{gist_id}/comments/{comment_id}
    # Summary: Delete a gist comment


    @GhSDK.resource_method("gists/{gist_id}/forks", http_method="POST")
    def gistsFork(self): pass
    # To call: GhSDK.resource("gist").gistsFork(...)
    # POST https://api.github.com/gists/{gist_id}/forks
    # Summary: Fork a gist


    @GhSDK.resource_method("gists/{gist_id}", http_method="GET")
    def gistsGet(self): pass
    # To call: GhSDK.resource("gist").gistsGet(...)
    # GET https://api.github.com/gists/{gist_id}
    # Summary: Get a gist


    @GhSDK.resource_method("gists/{gist_id}/comments/{comment_id}", http_method="GET")
    def gistsGetComment(self): pass
    # To call: GhSDK.resource("gist").gistsGetComment(...)
    # GET https://api.github.com/gists/{gist_id}/comments/{comment_id}
    # Summary: Get a gist comment


    @GhSDK.resource_method("gists/{gist_id}/{sha}", http_method="GET")
    def gistsGetRevision(self): pass
    # To call: GhSDK.resource("gist").gistsGetRevision(...)
    # GET https://api.github.com/gists/{gist_id}/{sha}
    # Summary: Get a gist revision
    #
    # Parameters:
    #     sha:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("gists", http_method="GET")
    def gistsList(self): pass
    # To call: GhSDK.resource("gist").gistsList(...)
    # GET https://api.github.com/gists
    # Summary: List gists for the authenticated user
    # Description: Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:


    @GhSDK.resource_method("gists/{gist_id}/comments", http_method="GET")
    def gistsListComments(self): pass
    # To call: GhSDK.resource("gist").gistsListComments(...)
    # GET https://api.github.com/gists/{gist_id}/comments
    # Summary: List gist comments


    @GhSDK.resource_method("gists/{gist_id}/commits", http_method="GET")
    def gistsListCommits(self): pass
    # To call: GhSDK.resource("gist").gistsListCommits(...)
    # GET https://api.github.com/gists/{gist_id}/commits
    # Summary: List gist commits


    @GhSDK.resource_method("gists/{gist_id}/forks", http_method="GET")
    def gistsListForks(self): pass
    # To call: GhSDK.resource("gist").gistsListForks(...)
    # GET https://api.github.com/gists/{gist_id}/forks
    # Summary: List gist forks


    @GhSDK.resource_method("gists/public", http_method="GET")
    def gistsListPublic(self): pass
    # To call: GhSDK.resource("gist").gistsListPublic(...)
    # GET https://api.github.com/gists/public
    # Summary: List public gists
    # Description: List public gists sorted by most recently updated to least recently updated.
    #
    #   Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.


    @GhSDK.resource_method("gists/starred", http_method="GET")
    def gistsListStarred(self): pass
    # To call: GhSDK.resource("gist").gistsListStarred(...)
    # GET https://api.github.com/gists/starred
    # Summary: List starred gists
    # Description: List the authenticated user's starred gists:


    @GhSDK.resource_method("gists/{gist_id}/star", http_method="PUT")
    def gistsStar(self): pass
    # To call: GhSDK.resource("gist").gistsStar(...)
    # PUT https://api.github.com/gists/{gist_id}/star
    # Summary: Star a gist
    # Description: Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."


    @GhSDK.resource_method("gists/{gist_id}/star", http_method="DELETE")
    def gistsUnstar(self): pass
    # To call: GhSDK.resource("gist").gistsUnstar(...)
    # DELETE https://api.github.com/gists/{gist_id}/star
    # Summary: Unstar a gist


    @GhSDK.resource_method("gists/{gist_id}", http_method="PATCH")
    def gistsUpdate(self): pass
    # To call: GhSDK.resource("gist").gistsUpdate(...)
    # PATCH https://api.github.com/gists/{gist_id}
    # Summary: Update a gist
    # Description: Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.


    @GhSDK.resource_method("gists/{gist_id}/comments/{comment_id}", http_method="PATCH")
    def gistsUpdateComment(self): pass
    # To call: GhSDK.resource("gist").gistsUpdateComment(...)
    # PATCH https://api.github.com/gists/{gist_id}/comments/{comment_id}
    # Summary: Update a gist comment


@GhSDK.resource_class("gitignore", "")
class GitignoreResource(GhSDK):
# To instantiate: GhSDK.resource("gitignore")
# Number of methods: 2
#     gitignoreGetAllTemplates
#     gitignoreGetTemplate

    @GhSDK.resource_method("gitignore/templates", http_method="GET")
    def gitignoreGetAllTemplates(self): pass
    # To call: GhSDK.resource("gitignore").gitignoreGetAllTemplates(...)
    # GET https://api.github.com/gitignore/templates
    # Summary: Get all gitignore templates
    # Description: List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).


    @GhSDK.resource_method("gitignore/templates/{name}", http_method="GET")
    def gitignoreGetTemplate(self): pass
    # To call: GhSDK.resource("gitignore").gitignoreGetTemplate(...)
    # GET https://api.github.com/gitignore/templates/{name}
    # Summary: Get a gitignore template
    # Description: The API also allows fetching the source of a single template.
    #   Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
    #
    # Parameters:
    #     name:
    #       description: ''
    #       in: path
    #       required: true
    #


@GhSDK.resource_class("installation", "")
class InstallationResource(GhSDK):
# To instantiate: GhSDK.resource("installation")
# Number of methods: 2
#     appsListReposAccessibleToInstallation
#     appsRevokeInstallationAccessToken

    @GhSDK.resource_method("installation/repositories", http_method="GET")
    def appsListReposAccessibleToInstallation(self): pass
    # To call: GhSDK.resource("installation").appsListReposAccessibleToInstallation(...)
    # GET https://api.github.com/installation/repositories
    # Summary: List repositories accessible to the app installation
    # Description: List repositories that an app installation can access.
    #
    #   You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.


    @GhSDK.resource_method("installation/token", http_method="DELETE")
    def appsRevokeInstallationAccessToken(self): pass
    # To call: GhSDK.resource("installation").appsRevokeInstallationAccessToken(...)
    # DELETE https://api.github.com/installation/token
    # Summary: Revoke an installation access token
    # Description: Revokes the installation token you're using to authenticate as an installation and access this endpoint.
    #
    #   Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
    #
    #   You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.


@GhSDK.resource_class("issue", "")
class IssueResource(GhSDK):
# To instantiate: GhSDK.resource("issue")
# Number of methods: 1
#     issuesList

    @GhSDK.resource_method("issues", http_method="GET")
    def issuesList(self): pass
    # To call: GhSDK.resource("issue").issuesList(...)
    # GET https://api.github.com/issues
    # Summary: List issues assigned to the authenticated user
    # Description: List issues assigned to the authenticated user across all visible repositories including owned repositories, member
    #   repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
    #   necessarily assigned to you.
    #
    #
    #   **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    #   reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    #   the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    #   request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    #
    # Parameters:
    #     collab:
    #       description: ''
    #       in: query
    #       required: false
    #     filter:
    #       description: Indicates which sorts of issues to return. `assigned` means issues
    #         assigned to you. `created` means issues created by you. `mentioned` means issues
    #         mentioning you. `subscribed` means issues you're subscribed to updates for.
    #         `all` or `repos` means all issues you can see, regardless of participation or
    #         creation.
    #       in: query
    #       required: false
    #     orgs:
    #       description: ''
    #       in: query
    #       required: false
    #     owned:
    #       description: ''
    #       in: query
    #       required: false
    #     pulls:
    #       description: ''
    #       in: query
    #       required: false
    #     sort:
    #       description: What to sort results by.
    #       in: query
    #       required: false
    #     state:
    #       description: Indicates the state of the issues to return.
    #       in: query
    #       required: false
    #


@GhSDK.resource_class("license", "")
class LicenseResource(GhSDK):
# To instantiate: GhSDK.resource("license")
# Number of methods: 2
#     licensesGet
#     licensesGetAllCommonlyUsed

    @GhSDK.resource_method("licenses/{license}", http_method="GET")
    def licensesGet(self): pass
    # To call: GhSDK.resource("license").licensesGet(...)
    # GET https://api.github.com/licenses/{license}
    # Summary: Get a license
    # Description: Gets information about a specific license. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
    #
    # Parameters:
    #     license:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("licenses", http_method="GET")
    def licensesGetAllCommonlyUsed(self): pass
    # To call: GhSDK.resource("license").licensesGetAllCommonlyUsed(...)
    # GET https://api.github.com/licenses
    # Summary: Get all commonly used licenses
    # Description: Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
    #
    # Parameters:
    #     featured:
    #       description: ''
    #       in: query
    #       required: false
    #


@GhSDK.resource_class("markdown", "")
class MarkdownResource(GhSDK):
# To instantiate: GhSDK.resource("markdown")
# Number of methods: 2
#     markdownRender
#     markdownRenderRaw

    @GhSDK.resource_method("markdown", http_method="POST")
    def markdownRender(self): pass
    # To call: GhSDK.resource("markdown").markdownRender(...)
    # POST https://api.github.com/markdown
    # Summary: Render a Markdown document


    @GhSDK.resource_method("markdown/raw", http_method="POST")
    def markdownRenderRaw(self): pass
    # To call: GhSDK.resource("markdown").markdownRenderRaw(...)
    # POST https://api.github.com/markdown/raw
    # Summary: Render a Markdown document in raw mode
    # Description: You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.


@GhSDK.resource_class("marketplace_listing", "")
class MarketplaceListingResource(GhSDK):
# To instantiate: GhSDK.resource("marketplace_listing")
# Number of methods: 6
#     appsGetSubscriptionPlanForAccount
#     appsGetSubscriptionPlanForAccountStubbed
#     appsListAccountsForPlan
#     appsListAccountsForPlanStubbed
#     appsListPlans
#     appsListPlansStubbed

    @GhSDK.resource_method("marketplace_listing/accounts/{account_id}", http_method="GET")
    def appsGetSubscriptionPlanForAccount(self): pass
    # To call: GhSDK.resource("marketplace_listing").appsGetSubscriptionPlanForAccount(...)
    # GET https://api.github.com/marketplace_listing/accounts/{account_id}
    # Summary: Get a subscription plan for an account
    # Description: Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    #
    #   GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.


    @GhSDK.resource_method("marketplace_listing/stubbed/accounts/{account_id}", http_method="GET")
    def appsGetSubscriptionPlanForAccountStubbed(self): pass
    # To call: GhSDK.resource("marketplace_listing").appsGetSubscriptionPlanForAccountStubbed(...)
    # GET https://api.github.com/marketplace_listing/stubbed/accounts/{account_id}
    # Summary: Get a subscription plan for an account (stubbed)
    # Description: Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    #
    #   GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.


    @GhSDK.resource_method("marketplace_listing/plans/{plan_id}/accounts", http_method="GET")
    def appsListAccountsForPlan(self): pass
    # To call: GhSDK.resource("marketplace_listing").appsListAccountsForPlan(...)
    # GET https://api.github.com/marketplace_listing/plans/{plan_id}/accounts
    # Summary: List accounts for a plan
    # Description: Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    #
    #   GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    #
    # Parameters:
    #     direction:
    #       description: To return the oldest accounts first, set to `asc`. Ignored without
    #         the `sort` parameter.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("marketplace_listing/stubbed/plans/{plan_id}/accounts", http_method="GET")
    def appsListAccountsForPlanStubbed(self): pass
    # To call: GhSDK.resource("marketplace_listing").appsListAccountsForPlanStubbed(...)
    # GET https://api.github.com/marketplace_listing/stubbed/plans/{plan_id}/accounts
    # Summary: List accounts for a plan (stubbed)
    # Description: Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
    #
    #   GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
    #
    # Parameters:
    #     direction:
    #       description: To return the oldest accounts first, set to `asc`. Ignored without
    #         the `sort` parameter.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("marketplace_listing/plans", http_method="GET")
    def appsListPlans(self): pass
    # To call: GhSDK.resource("marketplace_listing").appsListPlans(...)
    # GET https://api.github.com/marketplace_listing/plans
    # Summary: List plans
    # Description: Lists all plans that are part of your GitHub Marketplace listing.
    #
    #   GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.


    @GhSDK.resource_method("marketplace_listing/stubbed/plans", http_method="GET")
    def appsListPlansStubbed(self): pass
    # To call: GhSDK.resource("marketplace_listing").appsListPlansStubbed(...)
    # GET https://api.github.com/marketplace_listing/stubbed/plans
    # Summary: List plans (stubbed)
    # Description: Lists all plans that are part of your GitHub Marketplace listing.
    #
    #   GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.


@GhSDK.resource_class("meta", "")
class MetaResource(GhSDK):
# To instantiate: GhSDK.resource("meta")
# Number of methods: 1
#     metaGet

    @GhSDK.resource_method("meta", http_method="GET")
    def metaGet(self): pass
    # To call: GhSDK.resource("meta").metaGet(...)
    # GET https://api.github.com/meta
    # Summary: Get GitHub meta information
    # Description: Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
    #
    #   The API's response also includes a list of GitHub's domain names.
    #
    #   The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
    #
    #   **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.


@GhSDK.resource_class("network", "")
class NetworkResource(GhSDK):
# To instantiate: GhSDK.resource("network")
# Number of methods: 1
#     activityListPublicEventsForRepoNetwork

    @GhSDK.resource_method("networks/{owner}/{repo}/events", http_method="GET")
    def activityListPublicEventsForRepoNetwork(self): pass
    # To call: GhSDK.resource("network").activityListPublicEventsForRepoNetwork(...)
    # GET https://api.github.com/networks/{owner}/{repo}/events
    # Summary: List public events for a network of repositories


@GhSDK.resource_class("notification", "")
class NotificationResource(GhSDK):
# To instantiate: GhSDK.resource("notification")
# Number of methods: 7
#     activityDeleteThreadSubscription
#     activityGetThread
#     activityGetThreadSubscriptionForAuthenticatedUser
#     activityListNotificationsForAuthenticatedUser
#     activityMarkNotificationsAsRead
#     activityMarkThreadAsRead
#     activitySetThreadSubscription

    @GhSDK.resource_method("notifications/threads/{thread_id}/subscription", http_method="DELETE")
    def activityDeleteThreadSubscription(self): pass
    # To call: GhSDK.resource("notification").activityDeleteThreadSubscription(...)
    # DELETE https://api.github.com/notifications/threads/{thread_id}/subscription
    # Summary: Delete a thread subscription
    # Description: Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore` to `true`.


    @GhSDK.resource_method("notifications/threads/{thread_id}", http_method="GET")
    def activityGetThread(self): pass
    # To call: GhSDK.resource("notification").activityGetThread(...)
    # GET https://api.github.com/notifications/threads/{thread_id}
    # Summary: Get a thread
    # Description: Gets information about a notification thread.


    @GhSDK.resource_method("notifications/threads/{thread_id}/subscription", http_method="GET")
    def activityGetThreadSubscriptionForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("notification").activityGetThreadSubscriptionForAuthenticatedUser(...)
    # GET https://api.github.com/notifications/threads/{thread_id}/subscription
    # Summary: Get a thread subscription for the authenticated user
    # Description: This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
    #
    #   Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.


    @GhSDK.resource_method("notifications", http_method="GET")
    def activityListNotificationsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("notification").activityListNotificationsForAuthenticatedUser(...)
    # GET https://api.github.com/notifications
    # Summary: List notifications for the authenticated user
    # Description: List all notifications for the current user, sorted by most recently updated.
    #
    # Parameters:
    #     per_page:
    #       description: The number of results per page (max 50).
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("notifications", http_method="PUT")
    def activityMarkNotificationsAsRead(self): pass
    # To call: GhSDK.resource("notification").activityMarkNotificationsAsRead(...)
    # PUT https://api.github.com/notifications
    # Summary: Mark notifications as read
    # Description: Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.


    @GhSDK.resource_method("notifications/threads/{thread_id}", http_method="PATCH")
    def activityMarkThreadAsRead(self): pass
    # To call: GhSDK.resource("notification").activityMarkThreadAsRead(...)
    # PATCH https://api.github.com/notifications/threads/{thread_id}
    # Summary: Mark a thread as read
    # Description: Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.


    @GhSDK.resource_method("notifications/threads/{thread_id}/subscription", http_method="PUT")
    def activitySetThreadSubscription(self): pass
    # To call: GhSDK.resource("notification").activitySetThreadSubscription(...)
    # PUT https://api.github.com/notifications/threads/{thread_id}/subscription
    # Summary: Set a thread subscription
    # Description: If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
    #
    #   You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
    #
    #   Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.


@GhSDK.resource_class("octocat", "")
class OctocatResource(GhSDK):
# To instantiate: GhSDK.resource("octocat")
# Number of methods: 1
#     metaGetOctocat

    @GhSDK.resource_method("octocat", http_method="GET")
    def metaGetOctocat(self): pass
    # To call: GhSDK.resource("octocat").metaGetOctocat(...)
    # GET https://api.github.com/octocat
    # Summary: Get Octocat
    # Description: Get the octocat as ASCII art
    #
    # Parameters:
    #     s:
    #       description: The words to show in Octocat's speech bubble
    #       in: query
    #       required: false
    #


@GhSDK.resource_class("org", "")
class OrgResource(GhSDK):
# To instantiate: GhSDK.resource("org")
# Number of methods: 198
#     actionsAddCustomLabelsToSelfHostedRunnerForOrg
#     actionsAddSelectedRepoToOrgSecret
#     actionsAddSelectedRepoToOrgVariable
#     actionsCreateOrUpdateOrgSecret
#     actionsCreateOrgVariable
#     actionsCreateRegistrationTokenForOrg
#     actionsCreateRemoveTokenForOrg
#     actionsDeleteOrgSecret
#     actionsDeleteOrgVariable
#     actionsDeleteSelfHostedRunnerFromOrg
#     actionsDisableSelectedRepositoryGithubActionsOrganization
#     actionsEnableSelectedRepositoryGithubActionsOrganization
#     actionsGenerateRunnerJitconfigForOrg
#     actionsGetActionsCacheUsageByRepoForOrg
#     actionsGetActionsCacheUsageForOrg
#     actionsGetAllowedActionsOrganization
#     actionsGetGithubActionsDefaultWorkflowPermissionsOrganization
#     actionsGetGithubActionsPermissionsOrganization
#     actionsGetOrgPublicKey
#     actionsGetOrgSecret
#     actionsGetOrgVariable
#     actionsGetSelfHostedRunnerForOrg
#     actionsListLabelsForSelfHostedRunnerForOrg
#     actionsListOrgSecrets
#     actionsListOrgVariables
#     actionsListRunnerApplicationsForOrg
#     actionsListSelectedReposForOrgSecret
#     actionsListSelectedReposForOrgVariable
#     actionsListSelectedRepositoriesEnabledGithubActionsOrganization
#     actionsListSelfHostedRunnersForOrg
#     actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg
#     actionsRemoveCustomLabelFromSelfHostedRunnerForOrg
#     actionsRemoveSelectedRepoFromOrgSecret
#     actionsRemoveSelectedRepoFromOrgVariable
#     actionsSetAllowedActionsOrganization
#     actionsSetCustomLabelsForSelfHostedRunnerForOrg
#     actionsSetGithubActionsDefaultWorkflowPermissionsOrganization
#     actionsSetGithubActionsPermissionsOrganization
#     actionsSetSelectedReposForOrgSecret
#     actionsSetSelectedReposForOrgVariable
#     actionsSetSelectedRepositoriesEnabledGithubActionsOrganization
#     actionsUpdateOrgVariable
#     activityListPublicOrgEvents
#     appsGetOrgInstallation
#     billingGetGithubActionsBillingOrg
#     billingGetGithubPackagesBillingOrg
#     billingGetSharedStorageBillingOrg
#     codeScanningListAlertsForOrg
#     codespacesAddSelectedRepoToOrgSecret
#     codespacesCreateOrUpdateOrgSecret
#     codespacesDeleteCodespacesAccessUsers
#     codespacesDeleteFromOrganization
#     codespacesDeleteOrgSecret
#     codespacesGetCodespacesForUserInOrg
#     codespacesGetOrgPublicKey
#     codespacesGetOrgSecret
#     codespacesListInOrganization
#     codespacesListOrgSecrets
#     codespacesListSelectedReposForOrgSecret
#     codespacesRemoveSelectedRepoFromOrgSecret
#     codespacesSetCodespacesAccess
#     codespacesSetCodespacesAccessUsers
#     codespacesSetSelectedReposForOrgSecret
#     codespacesStopInOrganization
#     copilotAddCopilotForBusinessSeatsForTeams
#     copilotAddCopilotForBusinessSeatsForUsers
#     copilotCancelCopilotSeatAssignmentForTeams
#     copilotCancelCopilotSeatAssignmentForUsers
#     copilotGetCopilotOrganizationDetails
#     copilotGetCopilotSeatAssignmentDetailsForUser
#     copilotListCopilotSeats
#     dependabotAddSelectedRepoToOrgSecret
#     dependabotCreateOrUpdateOrgSecret
#     dependabotDeleteOrgSecret
#     dependabotGetOrgPublicKey
#     dependabotGetOrgSecret
#     dependabotListAlertsForOrg
#     dependabotListOrgSecrets
#     dependabotListSelectedReposForOrgSecret
#     dependabotRemoveSelectedRepoFromOrgSecret
#     dependabotSetSelectedReposForOrgSecret
#     interactionsGetRestrictionsForOrg
#     interactionsRemoveRestrictionsForOrg
#     interactionsSetRestrictionsForOrg
#     issuesListForOrg
#     migrationsDeleteArchiveForOrg
#     migrationsDownloadArchiveForOrg
#     migrationsGetStatusForOrg
#     migrationsListForOrg
#     migrationsListReposForOrg
#     migrationsStartForOrg
#     migrationsUnlockRepoForOrg
#     oidcGetOidcCustomSubTemplateForOrg
#     oidcUpdateOidcCustomSubTemplateForOrg
#     orgsAddSecurityManagerTeam
#     orgsBlockUser
#     orgsCancelInvitation
#     orgsCheckBlockedUser
#     orgsCheckMembershipForUser
#     orgsCheckPublicMembershipForUser
#     orgsConvertMemberToOutsideCollaborator
#     orgsCreateInvitation
#     orgsCreateWebhook
#     orgsDelete
#     orgsDeleteWebhook
#     orgsEnableOrDisableSecurityProductOnAllOrgRepos
#     orgsGet
#     orgsGetMembershipForUser
#     orgsGetWebhook
#     orgsGetWebhookConfigForOrg
#     orgsGetWebhookDelivery
#     orgsListAppInstallations
#     orgsListBlockedUsers
#     orgsListFailedInvitations
#     orgsListInvitationTeams
#     orgsListMembers
#     orgsListOutsideCollaborators
#     orgsListPatGrantRepositories
#     orgsListPatGrantRequestRepositories
#     orgsListPatGrantRequests
#     orgsListPatGrants
#     orgsListPendingInvitations
#     orgsListPublicMembers
#     orgsListSecurityManagerTeams
#     orgsListWebhookDeliveries
#     orgsListWebhooks
#     orgsPingWebhook
#     orgsRedeliverWebhookDelivery
#     orgsRemoveMember
#     orgsRemoveMembershipForUser
#     orgsRemoveOutsideCollaborator
#     orgsRemovePublicMembershipForAuthenticatedUser
#     orgsRemoveSecurityManagerTeam
#     orgsReviewPatGrantRequest
#     orgsReviewPatGrantRequestsInBulk
#     orgsSetMembershipForUser
#     orgsSetPublicMembershipForAuthenticatedUser
#     orgsUnblockUser
#     orgsUpdate
#     orgsUpdatePatAccess
#     orgsUpdatePatAccesses
#     orgsUpdateWebhook
#     orgsUpdateWebhookConfigForOrg
#     packagesDeletePackageForOrg
#     packagesDeletePackageVersionForOrg
#     packagesGetAllPackageVersionsForPackageOwnedByOrg
#     packagesGetPackageForOrganization
#     packagesGetPackageVersionForOrganization
#     packagesListDockerMigrationConflictingPackagesForOrganization
#     packagesListPackagesForOrganization
#     packagesRestorePackageForOrg
#     packagesRestorePackageVersionForOrg
#     projectsCreateForOrg
#     projectsListForOrg
#     reactionsCreateForTeamDiscussionCommentInOrg
#     reactionsCreateForTeamDiscussionInOrg
#     reactionsDeleteForTeamDiscussion
#     reactionsDeleteForTeamDiscussionComment
#     reactionsListForTeamDiscussionCommentInOrg
#     reactionsListForTeamDiscussionInOrg
#     reposCreateInOrg
#     reposCreateOrgRuleset
#     reposDeleteOrgRuleset
#     reposGetOrgRuleset
#     reposGetOrgRulesets
#     reposListForOrg
#     reposUpdateOrgRuleset
#     secretScanningListAlertsForOrg
#     securityAdvisoriesListOrgRepositoryAdvisories
#     teamsAddOrUpdateMembershipForUserInOrg
#     teamsAddOrUpdateProjectPermissionsInOrg
#     teamsAddOrUpdateRepoPermissionsInOrg
#     teamsCheckPermissionsForProjectInOrg
#     teamsCheckPermissionsForRepoInOrg
#     teamsCreate
#     teamsCreateDiscussionCommentInOrg
#     teamsCreateDiscussionInOrg
#     teamsDeleteDiscussionCommentInOrg
#     teamsDeleteDiscussionInOrg
#     teamsDeleteInOrg
#     teamsGetByName
#     teamsGetDiscussionCommentInOrg
#     teamsGetDiscussionInOrg
#     teamsGetMembershipForUserInOrg
#     teamsList
#     teamsListChildInOrg
#     teamsListDiscussionCommentsInOrg
#     teamsListDiscussionsInOrg
#     teamsListMembersInOrg
#     teamsListPendingInvitationsInOrg
#     teamsListProjectsInOrg
#     teamsListReposInOrg
#     teamsRemoveMembershipForUserInOrg
#     teamsRemoveProjectInOrg
#     teamsRemoveRepoInOrg
#     teamsUpdateDiscussionCommentInOrg
#     teamsUpdateDiscussionInOrg
#     teamsUpdateInOrg

    @GhSDK.resource_method("orgs/{org}/actions/runners/{runner_id}/labels", http_method="POST")
    def actionsAddCustomLabelsToSelfHostedRunnerForOrg(self): pass
    # To call: GhSDK.resource("org").actionsAddCustomLabelsToSelfHostedRunnerForOrg(...)
    # POST https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels
    # Summary: Add custom labels to a self-hosted runner for an organization
    # Description: Add custom labels to a self-hosted runner configured in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", http_method="PUT")
    def actionsAddSelectedRepoToOrgSecret(self): pass
    # To call: GhSDK.resource("org").actionsAddSelectedRepoToOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Add selected repository to an organization secret
    # Description: Adds a repository to an organization secret when the `visibility` for
    #   repository access is set to `selected`. The visibility is set when you [Create or
    #   update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/actions/variables/{name}/repositories/{repository_id}", http_method="PUT")
    def actionsAddSelectedRepoToOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsAddSelectedRepoToOrgVariable(...)
    # PUT https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}
    # Summary: Add selected repository to an organization variable
    # Description: Adds a repository to an organization variable that is available to selected repositories.
    #   Organization variables that are available to selected repositories have their `visibility` field set to `selected`.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/actions/secrets/{secret_name}", http_method="PUT")
    def actionsCreateOrUpdateOrgSecret(self): pass
    # To call: GhSDK.resource("org").actionsCreateOrUpdateOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/actions/secrets/{secret_name}
    # Summary: Create or update an organization secret
    # Description: Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("orgs/{org}/actions/variables", http_method="POST")
    def actionsCreateOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsCreateOrgVariable(...)
    # POST https://api.github.com/orgs/{org}/actions/variables
    # Summary: Create an organization variable
    # Description: Creates an organization variable that you can reference in a GitHub Actions workflow.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("orgs/{org}/actions/runners/registration-token", http_method="POST")
    def actionsCreateRegistrationTokenForOrg(self): pass
    # To call: GhSDK.resource("org").actionsCreateRegistrationTokenForOrg(...)
    # POST https://api.github.com/orgs/{org}/actions/runners/registration-token
    # Summary: Create a registration token for an organization
    # Description: Returns a token that you can pass to the `config` script. The token expires after one hour.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.
    #
    #   Example using registration token:
    #
    #   Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
    #
    #   ```
    #   ./config.sh --url https://github.com/octo-org --token TOKEN
    #   ```


    @GhSDK.resource_method("orgs/{org}/actions/runners/remove-token", http_method="POST")
    def actionsCreateRemoveTokenForOrg(self): pass
    # To call: GhSDK.resource("org").actionsCreateRemoveTokenForOrg(...)
    # POST https://api.github.com/orgs/{org}/actions/runners/remove-token
    # Summary: Create a remove token for an organization
    # Description: Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.
    #
    #   Example using remove token:
    #
    #   To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
    #   endpoint.
    #
    #   ```
    #   ./config.sh remove --token TOKEN
    #   ```


    @GhSDK.resource_method("orgs/{org}/actions/secrets/{secret_name}", http_method="DELETE")
    def actionsDeleteOrgSecret(self): pass
    # To call: GhSDK.resource("org").actionsDeleteOrgSecret(...)
    # DELETE https://api.github.com/orgs/{org}/actions/secrets/{secret_name}
    # Summary: Delete an organization secret
    # Description: Deletes a secret in an organization using the secret name.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("orgs/{org}/actions/variables/{name}", http_method="DELETE")
    def actionsDeleteOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsDeleteOrgVariable(...)
    # DELETE https://api.github.com/orgs/{org}/actions/variables/{name}
    # Summary: Delete an organization variable
    # Description: Deletes an organization variable using the variable name.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("orgs/{org}/actions/runners/{runner_id}", http_method="DELETE")
    def actionsDeleteSelfHostedRunnerFromOrg(self): pass
    # To call: GhSDK.resource("org").actionsDeleteSelfHostedRunnerFromOrg(...)
    # DELETE https://api.github.com/orgs/{org}/actions/runners/{runner_id}
    # Summary: Delete a self-hosted runner from an organization
    # Description: Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/permissions/repositories/{repository_id}", http_method="DELETE")
    def actionsDisableSelectedRepositoryGithubActionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsDisableSelectedRepositoryGithubActionsOrganization(...)
    # DELETE https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}
    # Summary: Disable a selected repository for GitHub Actions in an organization
    # Description: Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/permissions/repositories/{repository_id}", http_method="PUT")
    def actionsEnableSelectedRepositoryGithubActionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsEnableSelectedRepositoryGithubActionsOrganization(...)
    # PUT https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}
    # Summary: Enable a selected repository for GitHub Actions in an organization
    # Description: Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/runners/generate-jitconfig", http_method="POST")
    def actionsGenerateRunnerJitconfigForOrg(self): pass
    # To call: GhSDK.resource("org").actionsGenerateRunnerJitconfigForOrg(...)
    # POST https://api.github.com/orgs/{org}/actions/runners/generate-jitconfig
    # Summary: Create configuration for a just-in-time runner for an organization
    # Description: Generates a configuration that can be passed to the runner application at startup.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/cache/usage-by-repository", http_method="GET")
    def actionsGetActionsCacheUsageByRepoForOrg(self): pass
    # To call: GhSDK.resource("org").actionsGetActionsCacheUsageByRepoForOrg(...)
    # GET https://api.github.com/orgs/{org}/actions/cache/usage-by-repository
    # Summary: List repositories with GitHub Actions cache usage for an organization
    # Description: Lists repositories and their GitHub Actions cache usage for an organization.
    #   The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    #   You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/actions/cache/usage", http_method="GET")
    def actionsGetActionsCacheUsageForOrg(self): pass
    # To call: GhSDK.resource("org").actionsGetActionsCacheUsageForOrg(...)
    # GET https://api.github.com/orgs/{org}/actions/cache/usage
    # Summary: Get GitHub Actions cache usage for an organization
    # Description: Gets the total GitHub Actions cache usage for an organization.
    #   The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    #   You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/actions/permissions/selected-actions", http_method="GET")
    def actionsGetAllowedActionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsGetAllowedActionsOrganization(...)
    # GET https://api.github.com/orgs/{org}/actions/permissions/selected-actions
    # Summary: Get allowed actions and reusable workflows for an organization
    # Description: Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/permissions/workflow", http_method="GET")
    def actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(...)
    # GET https://api.github.com/orgs/{org}/actions/permissions/workflow
    # Summary: Get default workflow permissions for an organization
    # Description: Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
    #   as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
    #   "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/permissions", http_method="GET")
    def actionsGetGithubActionsPermissionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsGetGithubActionsPermissionsOrganization(...)
    # GET https://api.github.com/orgs/{org}/actions/permissions
    # Summary: Get GitHub Actions permissions for an organization
    # Description: Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/secrets/public-key", http_method="GET")
    def actionsGetOrgPublicKey(self): pass
    # To call: GhSDK.resource("org").actionsGetOrgPublicKey(...)
    # GET https://api.github.com/orgs/{org}/actions/secrets/public-key
    # Summary: Get an organization public key
    # Description: Gets your public key, which you need to encrypt secrets. You need to
    #   encrypt a secret before you can create or update secrets.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("orgs/{org}/actions/secrets/{secret_name}", http_method="GET")
    def actionsGetOrgSecret(self): pass
    # To call: GhSDK.resource("org").actionsGetOrgSecret(...)
    # GET https://api.github.com/orgs/{org}/actions/secrets/{secret_name}
    # Summary: Get an organization secret
    # Description: Gets a single organization secret without revealing its encrypted value.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("orgs/{org}/actions/variables/{name}", http_method="GET")
    def actionsGetOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsGetOrgVariable(...)
    # GET https://api.github.com/orgs/{org}/actions/variables/{name}
    # Summary: Get an organization variable
    # Description: Gets a specific variable in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("orgs/{org}/actions/runners/{runner_id}", http_method="GET")
    def actionsGetSelfHostedRunnerForOrg(self): pass
    # To call: GhSDK.resource("org").actionsGetSelfHostedRunnerForOrg(...)
    # GET https://api.github.com/orgs/{org}/actions/runners/{runner_id}
    # Summary: Get a self-hosted runner for an organization
    # Description: Gets a specific self-hosted runner configured in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/runners/{runner_id}/labels", http_method="GET")
    def actionsListLabelsForSelfHostedRunnerForOrg(self): pass
    # To call: GhSDK.resource("org").actionsListLabelsForSelfHostedRunnerForOrg(...)
    # GET https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels
    # Summary: List labels for a self-hosted runner for an organization
    # Description: Lists all labels for a self-hosted runner configured in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/secrets", http_method="GET")
    def actionsListOrgSecrets(self): pass
    # To call: GhSDK.resource("org").actionsListOrgSecrets(...)
    # GET https://api.github.com/orgs/{org}/actions/secrets
    # Summary: List organization secrets
    # Description: Lists all secrets available in an organization without revealing their
    #   encrypted values.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("orgs/{org}/actions/variables", http_method="GET")
    def actionsListOrgVariables(self): pass
    # To call: GhSDK.resource("org").actionsListOrgVariables(...)
    # GET https://api.github.com/orgs/{org}/actions/variables
    # Summary: List organization variables
    # Description: Lists all organization variables.
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint. Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("orgs/{org}/actions/runners/downloads", http_method="GET")
    def actionsListRunnerApplicationsForOrg(self): pass
    # To call: GhSDK.resource("org").actionsListRunnerApplicationsForOrg(...)
    # GET https://api.github.com/orgs/{org}/actions/runners/downloads
    # Summary: List runner applications for an organization
    # Description: Lists binaries for the runner application that you can download and run.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/secrets/{secret_name}/repositories", http_method="GET")
    def actionsListSelectedReposForOrgSecret(self): pass
    # To call: GhSDK.resource("org").actionsListSelectedReposForOrgSecret(...)
    # GET https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories
    # Summary: List selected repositories for an organization secret
    # Description: Lists all repositories that have been selected when the `visibility`
    #   for repository access to a secret is set to `selected`.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("orgs/{org}/actions/variables/{name}/repositories", http_method="GET")
    def actionsListSelectedReposForOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsListSelectedReposForOrgVariable(...)
    # GET https://api.github.com/orgs/{org}/actions/variables/{name}/repositories
    # Summary: List selected repositories for an organization variable
    # Description: Lists all repositories that can access an organization variable
    #   that is available to selected repositories.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("orgs/{org}/actions/permissions/repositories", http_method="GET")
    def actionsListSelectedRepositoriesEnabledGithubActionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsListSelectedRepositoriesEnabledGithubActionsOrganization(...)
    # GET https://api.github.com/orgs/{org}/actions/permissions/repositories
    # Summary: List selected repositories enabled for GitHub Actions in an organization
    # Description: Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/runners", http_method="GET")
    def actionsListSelfHostedRunnersForOrg(self): pass
    # To call: GhSDK.resource("org").actionsListSelfHostedRunnersForOrg(...)
    # GET https://api.github.com/orgs/{org}/actions/runners
    # Summary: List self-hosted runners for an organization
    # Description: Lists all self-hosted runners configured in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/runners/{runner_id}/labels", http_method="DELETE")
    def actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(self): pass
    # To call: GhSDK.resource("org").actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(...)
    # DELETE https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels
    # Summary: Remove all custom labels from a self-hosted runner for an organization
    # Description: Remove all custom labels from a self-hosted runner configured in an
    #   organization. Returns the remaining read-only labels from the runner.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/runners/{runner_id}/labels/{name}", http_method="DELETE")
    def actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(self): pass
    # To call: GhSDK.resource("org").actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(...)
    # DELETE https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels/{name}
    # Summary: Remove a custom label from a self-hosted runner for an organization
    # Description: Remove a custom label from a self-hosted runner configured
    #   in an organization. Returns the remaining labels from the runner.
    #
    #   This endpoint returns a `404 Not Found` status if the custom label is not
    #   present on the runner.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", http_method="DELETE")
    def actionsRemoveSelectedRepoFromOrgSecret(self): pass
    # To call: GhSDK.resource("org").actionsRemoveSelectedRepoFromOrgSecret(...)
    # DELETE https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Remove selected repository from an organization secret
    # Description: Removes a repository from an organization secret when the `visibility`
    #   for repository access is set to `selected`. The visibility is set when you [Create
    #   or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/actions/variables/{name}/repositories/{repository_id}", http_method="DELETE")
    def actionsRemoveSelectedRepoFromOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsRemoveSelectedRepoFromOrgVariable(...)
    # DELETE https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}
    # Summary: Remove selected repository from an organization variable
    # Description: Removes a repository from an organization variable that is
    #   available to selected repositories. Organization variables that are available to
    #   selected repositories have their `visibility` field set to `selected`.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/actions/permissions/selected-actions", http_method="PUT")
    def actionsSetAllowedActionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsSetAllowedActionsOrganization(...)
    # PUT https://api.github.com/orgs/{org}/actions/permissions/selected-actions
    # Summary: Set allowed actions and reusable workflows for an organization
    # Description: Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/runners/{runner_id}/labels", http_method="PUT")
    def actionsSetCustomLabelsForSelfHostedRunnerForOrg(self): pass
    # To call: GhSDK.resource("org").actionsSetCustomLabelsForSelfHostedRunnerForOrg(...)
    # PUT https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels
    # Summary: Set custom labels for a self-hosted runner for an organization
    # Description: Remove all previous custom labels and set the new custom labels for a specific
    #   self-hosted runner configured in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("orgs/{org}/actions/permissions/workflow", http_method="PUT")
    def actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(...)
    # PUT https://api.github.com/orgs/{org}/actions/permissions/workflow
    # Summary: Set default workflow permissions for an organization
    # Description: Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
    #   can submit approving pull request reviews. For more information, see
    #   "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/permissions", http_method="PUT")
    def actionsSetGithubActionsPermissionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsSetGithubActionsPermissionsOrganization(...)
    # PUT https://api.github.com/orgs/{org}/actions/permissions
    # Summary: Set GitHub Actions permissions for an organization
    # Description: Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/secrets/{secret_name}/repositories", http_method="PUT")
    def actionsSetSelectedReposForOrgSecret(self): pass
    # To call: GhSDK.resource("org").actionsSetSelectedReposForOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories
    # Summary: Set selected repositories for an organization secret
    # Description: Replaces all repositories for an organization secret when the `visibility`
    #   for repository access is set to `selected`. The visibility is set when you [Create
    #   or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("orgs/{org}/actions/variables/{name}/repositories", http_method="PUT")
    def actionsSetSelectedReposForOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsSetSelectedReposForOrgVariable(...)
    # PUT https://api.github.com/orgs/{org}/actions/variables/{name}/repositories
    # Summary: Set selected repositories for an organization variable
    # Description: Replaces all repositories for an organization variable that is available
    #   to selected repositories. Organization variables that are available to selected
    #   repositories have their `visibility` field set to `selected`.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:write` organization permission to use this
    #   endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("orgs/{org}/actions/permissions/repositories", http_method="PUT")
    def actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(self): pass
    # To call: GhSDK.resource("org").actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(...)
    # PUT https://api.github.com/orgs/{org}/actions/permissions/repositories
    # Summary: Set selected repositories enabled for GitHub Actions in an organization
    # Description: Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.


    @GhSDK.resource_method("orgs/{org}/actions/variables/{name}", http_method="PATCH")
    def actionsUpdateOrgVariable(self): pass
    # To call: GhSDK.resource("org").actionsUpdateOrgVariable(...)
    # PATCH https://api.github.com/orgs/{org}/actions/variables/{name}
    # Summary: Update an organization variable
    # Description: Updates an organization variable that you can reference in a GitHub Actions workflow.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("orgs/{org}/events", http_method="GET")
    def activityListPublicOrgEvents(self): pass
    # To call: GhSDK.resource("org").activityListPublicOrgEvents(...)
    # GET https://api.github.com/orgs/{org}/events
    # Summary: List public organization events


    @GhSDK.resource_method("orgs/{org}/installation", http_method="GET")
    def appsGetOrgInstallation(self): pass
    # To call: GhSDK.resource("org").appsGetOrgInstallation(...)
    # GET https://api.github.com/orgs/{org}/installation
    # Summary: Get an organization installation for the authenticated app
    # Description: Enables an authenticated GitHub App to find the organization's installation information.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("orgs/{org}/settings/billing/actions", http_method="GET")
    def billingGetGithubActionsBillingOrg(self): pass
    # To call: GhSDK.resource("org").billingGetGithubActionsBillingOrg(...)
    # GET https://api.github.com/orgs/{org}/settings/billing/actions
    # Summary: Get GitHub Actions billing for an organization
    # Description: Gets the summary of the free and paid GitHub Actions minutes used.
    #
    #   Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    #
    #   Access tokens must have the `repo` or `admin:org` scope.


    @GhSDK.resource_method("orgs/{org}/settings/billing/packages", http_method="GET")
    def billingGetGithubPackagesBillingOrg(self): pass
    # To call: GhSDK.resource("org").billingGetGithubPackagesBillingOrg(...)
    # GET https://api.github.com/orgs/{org}/settings/billing/packages
    # Summary: Get GitHub Packages billing for an organization
    # Description: Gets the free and paid storage used for GitHub Packages in gigabytes.
    #
    #   Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    #
    #   Access tokens must have the `repo` or `admin:org` scope.


    @GhSDK.resource_method("orgs/{org}/settings/billing/shared-storage", http_method="GET")
    def billingGetSharedStorageBillingOrg(self): pass
    # To call: GhSDK.resource("org").billingGetSharedStorageBillingOrg(...)
    # GET https://api.github.com/orgs/{org}/settings/billing/shared-storage
    # Summary: Get shared storage billing for an organization
    # Description: Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    #
    #   Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    #
    #   Access tokens must have the `repo` or `admin:org` scope.


    @GhSDK.resource_method("orgs/{org}/code-scanning/alerts", http_method="GET")
    def codeScanningListAlertsForOrg(self): pass
    # To call: GhSDK.resource("org").codeScanningListAlertsForOrg(...)
    # GET https://api.github.com/orgs/{org}/code-scanning/alerts
    # Summary: List code scanning alerts for an organization
    # Description: Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    #
    #   To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
    #
    #   For public repositories, you may instead use the `public_repo` scope.
    #
    #   GitHub Apps must have the `security_events` read permission to use this endpoint.
    #
    # Parameters:
    #     severity:
    #       description: If specified, only code scanning alerts with this severity will be
    #         returned.
    #       in: query
    #       required: false
    #     sort:
    #       description: The property by which to sort the results.
    #       in: query
    #       required: false
    #     state:
    #       description: If specified, only code scanning alerts with this state will be returned.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}", http_method="PUT")
    def codespacesAddSelectedRepoToOrgSecret(self): pass
    # To call: GhSDK.resource("org").codespacesAddSelectedRepoToOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Add selected repository to an organization secret
    # Description: Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/{secret_name}", http_method="PUT")
    def codespacesCreateOrUpdateOrgSecret(self): pass
    # To call: GhSDK.resource("org").codespacesCreateOrUpdateOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}
    # Summary: Create or update an organization secret
    # Description: Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access
    #   token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/access/selected_users", http_method="DELETE")
    def codespacesDeleteCodespacesAccessUsers(self): pass
    # To call: GhSDK.resource("org").codespacesDeleteCodespacesAccessUsers(...)
    # DELETE https://api.github.com/orgs/{org}/codespaces/access/selected_users
    # Summary: Remove users from Codespaces access for an organization
    # Description: Codespaces for the specified users will no longer be billed to the organization.
    #
    #   To use this endpoint, the access settings for the organization must be set to `selected_members`.
    #   For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/members/{username}/codespaces/{codespace_name}", http_method="DELETE")
    def codespacesDeleteFromOrganization(self): pass
    # To call: GhSDK.resource("org").codespacesDeleteFromOrganization(...)
    # DELETE https://api.github.com/orgs/{org}/members/{username}/codespaces/{codespace_name}
    # Summary: Delete a codespace from the organization
    # Description: Deletes a user's codespace.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/{secret_name}", http_method="DELETE")
    def codespacesDeleteOrgSecret(self): pass
    # To call: GhSDK.resource("org").codespacesDeleteOrgSecret(...)
    # DELETE https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}
    # Summary: Delete an organization secret
    # Description: Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/members/{username}/codespaces", http_method="GET")
    def codespacesGetCodespacesForUserInOrg(self): pass
    # To call: GhSDK.resource("org").codespacesGetCodespacesForUserInOrg(...)
    # GET https://api.github.com/orgs/{org}/members/{username}/codespaces
    # Summary: List codespaces for a user in organization
    # Description: Lists the codespaces that a member of an organization has for repositories in that organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/public-key", http_method="GET")
    def codespacesGetOrgPublicKey(self): pass
    # To call: GhSDK.resource("org").codespacesGetOrgPublicKey(...)
    # GET https://api.github.com/orgs/{org}/codespaces/secrets/public-key
    # Summary: Get an organization public key
    # Description: Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/{secret_name}", http_method="GET")
    def codespacesGetOrgSecret(self): pass
    # To call: GhSDK.resource("org").codespacesGetOrgSecret(...)
    # GET https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}
    # Summary: Get an organization secret
    # Description: Gets an organization secret without revealing its encrypted value.
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces", http_method="GET")
    def codespacesListInOrganization(self): pass
    # To call: GhSDK.resource("org").codespacesListInOrganization(...)
    # GET https://api.github.com/orgs/{org}/codespaces
    # Summary: List codespaces for the organization
    # Description: Lists the codespaces associated to a specified organization.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets", http_method="GET")
    def codespacesListOrgSecrets(self): pass
    # To call: GhSDK.resource("org").codespacesListOrgSecrets(...)
    # GET https://api.github.com/orgs/{org}/codespaces/secrets
    # Summary: List organization secrets
    # Description: Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/{secret_name}/repositories", http_method="GET")
    def codespacesListSelectedReposForOrgSecret(self): pass
    # To call: GhSDK.resource("org").codespacesListSelectedReposForOrgSecret(...)
    # GET https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories
    # Summary: List selected repositories for an organization secret
    # Description: Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}", http_method="DELETE")
    def codespacesRemoveSelectedRepoFromOrgSecret(self): pass
    # To call: GhSDK.resource("org").codespacesRemoveSelectedRepoFromOrgSecret(...)
    # DELETE https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Remove selected repository from an organization secret
    # Description: Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/codespaces/access", http_method="PUT")
    def codespacesSetCodespacesAccess(self): pass
    # To call: GhSDK.resource("org").codespacesSetCodespacesAccess(...)
    # PUT https://api.github.com/orgs/{org}/codespaces/access
    # Summary: Manage access control for organization codespaces
    # Description: Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility.
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/access/selected_users", http_method="POST")
    def codespacesSetCodespacesAccessUsers(self): pass
    # To call: GhSDK.resource("org").codespacesSetCodespacesAccessUsers(...)
    # POST https://api.github.com/orgs/{org}/codespaces/access/selected_users
    # Summary: Add users to Codespaces access for an organization
    # Description: Codespaces for the specified users will be billed to the organization.
    #
    #   To use this endpoint, the access settings for the organization must be set to `selected_members`.
    #   For information on how to change this setting, see "[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/codespaces/secrets/{secret_name}/repositories", http_method="PUT")
    def codespacesSetSelectedReposForOrgSecret(self): pass
    # To call: GhSDK.resource("org").codespacesSetSelectedReposForOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/codespaces/secrets/{secret_name}/repositories
    # Summary: Set selected repositories for an organization secret
    # Description: Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/members/{username}/codespaces/{codespace_name}/stop", http_method="POST")
    def codespacesStopInOrganization(self): pass
    # To call: GhSDK.resource("org").codespacesStopInOrganization(...)
    # POST https://api.github.com/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop
    # Summary: Stop a codespace for an organization user
    # Description: Stops a user's codespace.
    #
    #   You must authenticate using an access token with the `admin:org` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/copilot/billing/selected_teams", http_method="POST")
    def copilotAddCopilotForBusinessSeatsForTeams(self): pass
    # To call: GhSDK.resource("org").copilotAddCopilotForBusinessSeatsForTeams(...)
    # POST https://api.github.com/orgs/{org}/copilot/billing/selected_teams
    # Summary: Add teams to the Copilot for Business subscription for an organization
    # Description: **Note**: This endpoint is in beta and is subject to change.
    #
    #    Purchases a GitHub Copilot for Business seat for all users within each specified team.
    #    The organization will be billed accordingly. For more information about Copilot for Business pricing, see "[About billing for GitHub Copilot for Business](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#pricing-for-github-copilot-for-business)".
    #
    #    Only organization owners and members with admin permissions can configure GitHub Copilot in their organization. You must
    #    authenticate using an access token with the `manage_billing:copilot` scope to use this endpoint.
    #
    #    In order for an admin to use this endpoint, the organization must have a Copilot for Business subscription and a configured suggestion matching policy.
    #    For more information about setting up a Copilot for Business subscription, see "[Setting up a Copilot for Business subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise#setting-up-a-copilot-for-business-subscription-for-your-organization)".
    #    For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".


    @GhSDK.resource_method("orgs/{org}/copilot/billing/selected_users", http_method="POST")
    def copilotAddCopilotForBusinessSeatsForUsers(self): pass
    # To call: GhSDK.resource("org").copilotAddCopilotForBusinessSeatsForUsers(...)
    # POST https://api.github.com/orgs/{org}/copilot/billing/selected_users
    # Summary: Add users to the Copilot for Business subscription for an organization
    # Description: **Note**: This endpoint is in beta and is subject to change.
    #
    #   Purchases a GitHub Copilot for Business seat for each user specified.
    #   The organization will be billed accordingly. For more information about Copilot for Business pricing, see "[About billing for GitHub Copilot for Business](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#pricing-for-github-copilot-for-business)".
    #
    #   Only organization owners and members with admin permissions can configure GitHub Copilot in their organization. You must
    #   authenticate using an access token with the `manage_billing:copilot` scope to use this endpoint.
    #
    #   In order for an admin to use this endpoint, the organization must have a Copilot for Business subscription and a configured suggestion matching policy.
    #   For more information about setting up a Copilot for Business subscription, see "[Setting up a Copilot for Business subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise#setting-up-a-copilot-for-business-subscription-for-your-organization)".
    #   For more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".


    @GhSDK.resource_method("orgs/{org}/copilot/billing/selected_teams", http_method="DELETE")
    def copilotCancelCopilotSeatAssignmentForTeams(self): pass
    # To call: GhSDK.resource("org").copilotCancelCopilotSeatAssignmentForTeams(...)
    # DELETE https://api.github.com/orgs/{org}/copilot/billing/selected_teams
    # Summary: Remove teams from the Copilot for Business subscription for an organization
    # Description: **Note**: This endpoint is in beta and is subject to change.
    #
    #   Cancels the Copilot for Business seat assignment for all members of each team specified.
    #   This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    #
    #   For more information about Copilot for Business pricing, see "[About billing for GitHub Copilot for Business](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#pricing-for-github-copilot-for-business)".
    #
    #   For more information about disabling access to Copilot for Business, see "[Disabling access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization#disabling-access-to-github-copilot-for-specific-users-in-your-organization)".
    #
    #   Only organization owners and members with admin permissions can configure GitHub Copilot in their organization. You must
    #   authenticate using an access token with the `manage_billing:copilot` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/copilot/billing/selected_users", http_method="DELETE")
    def copilotCancelCopilotSeatAssignmentForUsers(self): pass
    # To call: GhSDK.resource("org").copilotCancelCopilotSeatAssignmentForUsers(...)
    # DELETE https://api.github.com/orgs/{org}/copilot/billing/selected_users
    # Summary: Remove users from the Copilot for Business subscription for an organization
    # Description: **Note**: This endpoint is in beta and is subject to change.
    #
    #   Cancels the Copilot for Business seat assignment for each user specified.
    #   This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.
    #
    #   For more information about Copilot for Business pricing, see "[About billing for GitHub Copilot for Business](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#pricing-for-github-copilot-for-business)"
    #
    #   For more information about disabling access to Copilot for Business, see "[Disabling access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization#disabling-access-to-github-copilot-for-specific-users-in-your-organization)".
    #
    #   Only organization owners and members with admin permissions can configure GitHub Copilot in their organization. You must
    #   authenticate using an access token with the `manage_billing:copilot` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/copilot/billing", http_method="GET")
    def copilotGetCopilotOrganizationDetails(self): pass
    # To call: GhSDK.resource("org").copilotGetCopilotOrganizationDetails(...)
    # GET https://api.github.com/orgs/{org}/copilot/billing
    # Summary: Get Copilot for Business seat information and settings for an organization
    # Description: **Note**: This endpoint is in beta and is subject to change.
    #
    #   Gets information about an organization's Copilot for Business subscription, including seat breakdown
    #   and code matching policies. To configure these settings, go to your organization's settings on GitHub.com.
    #   For more information, see "[Configuring GitHub Copilot settings in your organization](https://docs.github.com/copilot/configuring-github-copilot/configuring-github-copilot-settings-in-your-organization)".
    #
    #   Only organization owners and members with admin permissions can configure and view details about the organization's Copilot for Business subscription. You must
    #   authenticate using an access token with the `manage_billing:copilot` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/members/{username}/copilot", http_method="GET")
    def copilotGetCopilotSeatAssignmentDetailsForUser(self): pass
    # To call: GhSDK.resource("org").copilotGetCopilotSeatAssignmentDetailsForUser(...)
    # GET https://api.github.com/orgs/{org}/members/{username}/copilot
    # Summary: Get Copilot for Business seat assignment details for a user
    # Description: **Note**: This endpoint is in beta and is subject to change.
    #
    #   Gets the GitHub Copilot for Business seat assignment details for a member of an organization who currently has access to GitHub Copilot.
    #
    #   Organization owners and members with admin permissions can view GitHub Copilot seat assignment details for members in their organization. You must authenticate using an access token with the `manage_billing:copilot` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/copilot/billing/seats", http_method="GET")
    def copilotListCopilotSeats(self): pass
    # To call: GhSDK.resource("org").copilotListCopilotSeats(...)
    # GET https://api.github.com/orgs/{org}/copilot/billing/seats
    # Summary: List all Copilot for Business seat assignments for an organization
    # Description: **Note**: This endpoint is in beta and is subject to change.
    #
    #   Lists all Copilot for Business seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).
    #
    #   Only organization owners and members with admin permissions can configure and view details about the organization's Copilot for Business subscription. You must
    #   authenticate using an access token with the `manage_billing:copilot` scope to use this endpoint.
    #
    # Parameters:
    #     per_page:
    #       description: The number of results per page (max 100).
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", http_method="PUT")
    def dependabotAddSelectedRepoToOrgSecret(self): pass
    # To call: GhSDK.resource("org").dependabotAddSelectedRepoToOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Add selected repository to an organization secret
    # Description: Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/{secret_name}", http_method="PUT")
    def dependabotCreateOrUpdateOrgSecret(self): pass
    # To call: GhSDK.resource("org").dependabotCreateOrUpdateOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}
    # Summary: Create or update an organization secret
    # Description: Creates or updates an organization secret with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access
    #   token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
    #   permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/{secret_name}", http_method="DELETE")
    def dependabotDeleteOrgSecret(self): pass
    # To call: GhSDK.resource("org").dependabotDeleteOrgSecret(...)
    # DELETE https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}
    # Summary: Delete an organization secret
    # Description: Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/public-key", http_method="GET")
    def dependabotGetOrgPublicKey(self): pass
    # To call: GhSDK.resource("org").dependabotGetOrgPublicKey(...)
    # GET https://api.github.com/orgs/{org}/dependabot/secrets/public-key
    # Summary: Get an organization public key
    # Description: Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/{secret_name}", http_method="GET")
    def dependabotGetOrgSecret(self): pass
    # To call: GhSDK.resource("org").dependabotGetOrgSecret(...)
    # GET https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}
    # Summary: Get an organization secret
    # Description: Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/dependabot/alerts", http_method="GET")
    def dependabotListAlertsForOrg(self): pass
    # To call: GhSDK.resource("org").dependabotListAlertsForOrg(...)
    # GET https://api.github.com/orgs/{org}/dependabot/alerts
    # Summary: List Dependabot alerts for an organization
    # Description: Lists Dependabot alerts for an organization.
    #
    #   To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
    #
    #   For public repositories, you may instead use the `public_repo` scope.
    #
    #   GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets", http_method="GET")
    def dependabotListOrgSecrets(self): pass
    # To call: GhSDK.resource("org").dependabotListOrgSecrets(...)
    # GET https://api.github.com/orgs/{org}/dependabot/secrets
    # Summary: List organization secrets
    # Description: Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/{secret_name}/repositories", http_method="GET")
    def dependabotListSelectedReposForOrgSecret(self): pass
    # To call: GhSDK.resource("org").dependabotListSelectedReposForOrgSecret(...)
    # GET https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories
    # Summary: List selected repositories for an organization secret
    # Description: Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", http_method="DELETE")
    def dependabotRemoveSelectedRepoFromOrgSecret(self): pass
    # To call: GhSDK.resource("org").dependabotRemoveSelectedRepoFromOrgSecret(...)
    # DELETE https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Remove selected repository from an organization secret
    # Description: Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/dependabot/secrets/{secret_name}/repositories", http_method="PUT")
    def dependabotSetSelectedReposForOrgSecret(self): pass
    # To call: GhSDK.resource("org").dependabotSetSelectedReposForOrgSecret(...)
    # PUT https://api.github.com/orgs/{org}/dependabot/secrets/{secret_name}/repositories
    # Summary: Set selected repositories for an organization secret
    # Description: Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/interaction-limits", http_method="GET")
    def interactionsGetRestrictionsForOrg(self): pass
    # To call: GhSDK.resource("org").interactionsGetRestrictionsForOrg(...)
    # GET https://api.github.com/orgs/{org}/interaction-limits
    # Summary: Get interaction restrictions for an organization
    # Description: Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.


    @GhSDK.resource_method("orgs/{org}/interaction-limits", http_method="DELETE")
    def interactionsRemoveRestrictionsForOrg(self): pass
    # To call: GhSDK.resource("org").interactionsRemoveRestrictionsForOrg(...)
    # DELETE https://api.github.com/orgs/{org}/interaction-limits
    # Summary: Remove interaction restrictions for an organization
    # Description: Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.


    @GhSDK.resource_method("orgs/{org}/interaction-limits", http_method="PUT")
    def interactionsSetRestrictionsForOrg(self): pass
    # To call: GhSDK.resource("org").interactionsSetRestrictionsForOrg(...)
    # PUT https://api.github.com/orgs/{org}/interaction-limits
    # Summary: Set interaction restrictions for an organization
    # Description: Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.


    @GhSDK.resource_method("orgs/{org}/issues", http_method="GET")
    def issuesListForOrg(self): pass
    # To call: GhSDK.resource("org").issuesListForOrg(...)
    # GET https://api.github.com/orgs/{org}/issues
    # Summary: List organization issues assigned to the authenticated user
    # Description: List issues in an organization assigned to the authenticated user.
    #
    #   **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    #   reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    #   the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    #   request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    #
    # Parameters:
    #     filter:
    #       description: Indicates which sorts of issues to return. `assigned` means issues
    #         assigned to you. `created` means issues created by you. `mentioned` means issues
    #         mentioning you. `subscribed` means issues you're subscribed to updates for.
    #         `all` or `repos` means all issues you can see, regardless of participation or
    #         creation.
    #       in: query
    #       required: false
    #     sort:
    #       description: What to sort results by.
    #       in: query
    #       required: false
    #     state:
    #       description: Indicates the state of the issues to return.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/migrations/{migration_id}/archive", http_method="DELETE")
    def migrationsDeleteArchiveForOrg(self): pass
    # To call: GhSDK.resource("org").migrationsDeleteArchiveForOrg(...)
    # DELETE https://api.github.com/orgs/{org}/migrations/{migration_id}/archive
    # Summary: Delete an organization migration archive
    # Description: Deletes a previous migration archive. Migration archives are automatically deleted after seven days.


    @GhSDK.resource_method("orgs/{org}/migrations/{migration_id}/archive", http_method="GET")
    def migrationsDownloadArchiveForOrg(self): pass
    # To call: GhSDK.resource("org").migrationsDownloadArchiveForOrg(...)
    # GET https://api.github.com/orgs/{org}/migrations/{migration_id}/archive
    # Summary: Download an organization migration archive
    # Description: Fetches the URL to a migration archive.


    @GhSDK.resource_method("orgs/{org}/migrations/{migration_id}", http_method="GET")
    def migrationsGetStatusForOrg(self): pass
    # To call: GhSDK.resource("org").migrationsGetStatusForOrg(...)
    # GET https://api.github.com/orgs/{org}/migrations/{migration_id}
    # Summary: Get an organization migration status
    # Description: Fetches the status of a migration.
    #
    #   The `state` of a migration can be one of the following values:
    #
    #   *   `pending`, which means the migration hasn't started yet.
    #   *   `exporting`, which means the migration is in progress.
    #   *   `exported`, which means the migration finished successfully.
    #   *   `failed`, which means the migration failed.
    #
    # Parameters:
    #     exclude:
    #       description: Exclude attributes from the API response to improve performance
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/migrations", http_method="GET")
    def migrationsListForOrg(self): pass
    # To call: GhSDK.resource("org").migrationsListForOrg(...)
    # GET https://api.github.com/orgs/{org}/migrations
    # Summary: List organization migrations
    # Description: Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
    #
    #   A list of `repositories` is only returned for export migrations.
    #
    # Parameters:
    #     exclude:
    #       description: Exclude attributes from the API response to improve performance
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/migrations/{migration_id}/repositories", http_method="GET")
    def migrationsListReposForOrg(self): pass
    # To call: GhSDK.resource("org").migrationsListReposForOrg(...)
    # GET https://api.github.com/orgs/{org}/migrations/{migration_id}/repositories
    # Summary: List repositories in an organization migration
    # Description: List all the repositories for this organization migration.


    @GhSDK.resource_method("orgs/{org}/migrations", http_method="POST")
    def migrationsStartForOrg(self): pass
    # To call: GhSDK.resource("org").migrationsStartForOrg(...)
    # POST https://api.github.com/orgs/{org}/migrations
    # Summary: Start an organization migration
    # Description: Initiates the generation of a migration archive.


    @GhSDK.resource_method("orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock", http_method="DELETE")
    def migrationsUnlockRepoForOrg(self): pass
    # To call: GhSDK.resource("org").migrationsUnlockRepoForOrg(...)
    # DELETE https://api.github.com/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock
    # Summary: Unlock an organization repository
    # Description: Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.


    @GhSDK.resource_method("orgs/{org}/actions/oidc/customization/sub", http_method="GET")
    def oidcGetOidcCustomSubTemplateForOrg(self): pass
    # To call: GhSDK.resource("org").oidcGetOidcCustomSubTemplateForOrg(...)
    # GET https://api.github.com/orgs/{org}/actions/oidc/customization/sub
    # Summary: Get the customization template for an OIDC subject claim for an organization
    # Description: Gets the customization template for an OpenID Connect (OIDC) subject claim.
    #   You must authenticate using an access token with the `read:org` scope to use this endpoint.
    #   GitHub Apps must have the `organization_administration:write` permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/actions/oidc/customization/sub", http_method="PUT")
    def oidcUpdateOidcCustomSubTemplateForOrg(self): pass
    # To call: GhSDK.resource("org").oidcUpdateOidcCustomSubTemplateForOrg(...)
    # PUT https://api.github.com/orgs/{org}/actions/oidc/customization/sub
    # Summary: Set the customization template for an OIDC subject claim for an organization
    # Description: Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
    #   You must authenticate using an access token with the `write:org` scope to use this endpoint.
    #   GitHub Apps must have the `admin:org` permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/security-managers/teams/{team_slug}", http_method="PUT")
    def orgsAddSecurityManagerTeam(self): pass
    # To call: GhSDK.resource("org").orgsAddSecurityManagerTeam(...)
    # PUT https://api.github.com/orgs/{org}/security-managers/teams/{team_slug}
    # Summary: Add a security manager team
    # Description: Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
    #
    #   To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `write:org` scope.
    #
    #   GitHub Apps must have the `administration` organization read-write permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/blocks/{username}", http_method="PUT")
    def orgsBlockUser(self): pass
    # To call: GhSDK.resource("org").orgsBlockUser(...)
    # PUT https://api.github.com/orgs/{org}/blocks/{username}
    # Summary: Block a user from an organization
    # Description: Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.


    @GhSDK.resource_method("orgs/{org}/invitations/{invitation_id}", http_method="DELETE")
    def orgsCancelInvitation(self): pass
    # To call: GhSDK.resource("org").orgsCancelInvitation(...)
    # DELETE https://api.github.com/orgs/{org}/invitations/{invitation_id}
    # Summary: Cancel an organization invitation
    # Description: Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).


    @GhSDK.resource_method("orgs/{org}/blocks/{username}", http_method="GET")
    def orgsCheckBlockedUser(self): pass
    # To call: GhSDK.resource("org").orgsCheckBlockedUser(...)
    # GET https://api.github.com/orgs/{org}/blocks/{username}
    # Summary: Check if a user is blocked by an organization
    # Description: Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.


    @GhSDK.resource_method("orgs/{org}/members/{username}", http_method="GET")
    def orgsCheckMembershipForUser(self): pass
    # To call: GhSDK.resource("org").orgsCheckMembershipForUser(...)
    # GET https://api.github.com/orgs/{org}/members/{username}
    # Summary: Check organization membership for a user
    # Description: Check if a user is, publicly or privately, a member of the organization.


    @GhSDK.resource_method("orgs/{org}/public_members/{username}", http_method="GET")
    def orgsCheckPublicMembershipForUser(self): pass
    # To call: GhSDK.resource("org").orgsCheckPublicMembershipForUser(...)
    # GET https://api.github.com/orgs/{org}/public_members/{username}
    # Summary: Check public organization membership for a user
    # Description: Check if the provided user is a public member of the organization.


    @GhSDK.resource_method("orgs/{org}/outside_collaborators/{username}", http_method="PUT")
    def orgsConvertMemberToOutsideCollaborator(self): pass
    # To call: GhSDK.resource("org").orgsConvertMemberToOutsideCollaborator(...)
    # PUT https://api.github.com/orgs/{org}/outside_collaborators/{username}
    # Summary: Convert an organization member to outside collaborator
    # Description: When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."


    @GhSDK.resource_method("orgs/{org}/invitations", http_method="POST")
    def orgsCreateInvitation(self): pass
    # To call: GhSDK.resource("org").orgsCreateInvitation(...)
    # POST https://api.github.com/orgs/{org}/invitations
    # Summary: Create an organization invitation
    # Description: Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("orgs/{org}/hooks", http_method="POST")
    def orgsCreateWebhook(self): pass
    # To call: GhSDK.resource("org").orgsCreateWebhook(...)
    # POST https://api.github.com/orgs/{org}/hooks
    # Summary: Create an organization webhook
    # Description: Here's how you can create a hook that posts payloads in JSON format:


    @GhSDK.resource_method("orgs/{org}", http_method="DELETE")
    def orgsDelete(self): pass
    # To call: GhSDK.resource("org").orgsDelete(...)
    # DELETE https://api.github.com/orgs/{org}
    # Summary: Delete an organization
    # Description: Deletes an organization and all its repositories.
    #
    #   The organization login will be unavailable for 90 days after deletion.
    #
    #   Please review the Terms of Service regarding account deletion before using this endpoint:
    #
    #   https://docs.github.com/site-policy/github-terms/github-terms-of-service


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}", http_method="DELETE")
    def orgsDeleteWebhook(self): pass
    # To call: GhSDK.resource("org").orgsDeleteWebhook(...)
    # DELETE https://api.github.com/orgs/{org}/hooks/{hook_id}
    # Summary: Delete an organization webhook


    @GhSDK.resource_method("orgs/{org}/{security_product}/{enablement}", http_method="POST")
    def orgsEnableOrDisableSecurityProductOnAllOrgRepos(self): pass
    # To call: GhSDK.resource("org").orgsEnableOrDisableSecurityProductOnAllOrgRepos(...)
    # POST https://api.github.com/orgs/{org}/{security_product}/{enablement}
    # Summary: Enable or disable a security feature for an organization
    # Description: Enables or disables the specified security feature for all eligible repositories in an organization.
    #
    #   To use this endpoint, you must be an organization owner or be member of a team with the security manager role.
    #   A token with the 'write:org' scope is also required.
    #
    #   GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
    #
    #   For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


    @GhSDK.resource_method("orgs/{org}", http_method="GET")
    def orgsGet(self): pass
    # To call: GhSDK.resource("org").orgsGet(...)
    # GET https://api.github.com/orgs/{org}
    # Summary: Get an organization
    # Description: To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
    #
    #   GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."


    @GhSDK.resource_method("orgs/{org}/memberships/{username}", http_method="GET")
    def orgsGetMembershipForUser(self): pass
    # To call: GhSDK.resource("org").orgsGetMembershipForUser(...)
    # GET https://api.github.com/orgs/{org}/memberships/{username}
    # Summary: Get organization membership for a user
    # Description: In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}", http_method="GET")
    def orgsGetWebhook(self): pass
    # To call: GhSDK.resource("org").orgsGetWebhook(...)
    # GET https://api.github.com/orgs/{org}/hooks/{hook_id}
    # Summary: Get an organization webhook
    # Description: Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization)."


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}/config", http_method="GET")
    def orgsGetWebhookConfigForOrg(self): pass
    # To call: GhSDK.resource("org").orgsGetWebhookConfigForOrg(...)
    # GET https://api.github.com/orgs/{org}/hooks/{hook_id}/config
    # Summary: Get a webhook configuration for an organization
    # Description: Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
    #
    #   Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}", http_method="GET")
    def orgsGetWebhookDelivery(self): pass
    # To call: GhSDK.resource("org").orgsGetWebhookDelivery(...)
    # GET https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}
    # Summary: Get a webhook delivery for an organization webhook
    # Description: Returns a delivery for a webhook configured in an organization.


    @GhSDK.resource_method("orgs/{org}/installations", http_method="GET")
    def orgsListAppInstallations(self): pass
    # To call: GhSDK.resource("org").orgsListAppInstallations(...)
    # GET https://api.github.com/orgs/{org}/installations
    # Summary: List app installations for an organization
    # Description: Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/blocks", http_method="GET")
    def orgsListBlockedUsers(self): pass
    # To call: GhSDK.resource("org").orgsListBlockedUsers(...)
    # GET https://api.github.com/orgs/{org}/blocks
    # Summary: List users blocked by an organization
    # Description: List the users blocked by an organization.


    @GhSDK.resource_method("orgs/{org}/failed_invitations", http_method="GET")
    def orgsListFailedInvitations(self): pass
    # To call: GhSDK.resource("org").orgsListFailedInvitations(...)
    # GET https://api.github.com/orgs/{org}/failed_invitations
    # Summary: List failed organization invitations
    # Description: The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.


    @GhSDK.resource_method("orgs/{org}/invitations/{invitation_id}/teams", http_method="GET")
    def orgsListInvitationTeams(self): pass
    # To call: GhSDK.resource("org").orgsListInvitationTeams(...)
    # GET https://api.github.com/orgs/{org}/invitations/{invitation_id}/teams
    # Summary: List organization invitation teams
    # Description: List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.


    @GhSDK.resource_method("orgs/{org}/members", http_method="GET")
    def orgsListMembers(self): pass
    # To call: GhSDK.resource("org").orgsListMembers(...)
    # GET https://api.github.com/orgs/{org}/members
    # Summary: List organization members
    # Description: List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
    #
    # Parameters:
    #     filter:
    #       description: Filter members returned in the list. `2fa_disabled` means that only
    #         members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication)
    #         enabled will be returned. This options is only available for organization owners.
    #       in: query
    #       required: false
    #     role:
    #       description: Filter members returned by their role.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/outside_collaborators", http_method="GET")
    def orgsListOutsideCollaborators(self): pass
    # To call: GhSDK.resource("org").orgsListOutsideCollaborators(...)
    # GET https://api.github.com/orgs/{org}/outside_collaborators
    # Summary: List outside collaborators for an organization
    # Description: List all users who are outside collaborators of an organization.
    #
    # Parameters:
    #     filter:
    #       description: Filter the list of outside collaborators. `2fa_disabled` means that
    #         only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication)
    #         enabled will be returned.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/personal-access-tokens/{pat_id}/repositories", http_method="GET")
    def orgsListPatGrantRepositories(self): pass
    # To call: GhSDK.resource("org").orgsListPatGrantRepositories(...)
    # GET https://api.github.com/orgs/{org}/personal-access-tokens/{pat_id}/repositories
    # Summary: List repositories a fine-grained personal access token has access to
    # Description: Lists the repositories a fine-grained personal access token has access to. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_tokens: read` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
    #
    # Parameters:
    #     pat_id:
    #       description: Unique identifier of the fine-grained personal access token.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories", http_method="GET")
    def orgsListPatGrantRequestRepositories(self): pass
    # To call: GhSDK.resource("org").orgsListPatGrantRequestRepositories(...)
    # GET https://api.github.com/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories
    # Summary: List repositories requested to be accessed by a fine-grained personal access token
    # Description: Lists the repositories a fine-grained personal access token request is requesting access to. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_token_requests: read` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
    #
    # Parameters:
    #     pat_request_id:
    #       description: Unique identifier of the request for access via fine-grained personal
    #         access token.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/personal-access-token-requests", http_method="GET")
    def orgsListPatGrantRequests(self): pass
    # To call: GhSDK.resource("org").orgsListPatGrantRequests(...)
    # GET https://api.github.com/orgs/{org}/personal-access-token-requests
    # Summary: List requests to access organization resources with fine-grained personal access tokens
    # Description: Lists requests from organization members to access organization resources with a fine-grained personal access token. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_token_requests: read` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.


    @GhSDK.resource_method("orgs/{org}/personal-access-tokens", http_method="GET")
    def orgsListPatGrants(self): pass
    # To call: GhSDK.resource("org").orgsListPatGrants(...)
    # GET https://api.github.com/orgs/{org}/personal-access-tokens
    # Summary: List fine-grained personal access tokens with access to organization resources
    # Description: Lists approved fine-grained personal access tokens owned by organization members that can access organization resources. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_tokens: read` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.


    @GhSDK.resource_method("orgs/{org}/invitations", http_method="GET")
    def orgsListPendingInvitations(self): pass
    # To call: GhSDK.resource("org").orgsListPendingInvitations(...)
    # GET https://api.github.com/orgs/{org}/invitations
    # Summary: List pending organization invitations
    # Description: The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    #
    # Parameters:
    #     invitation_source:
    #       description: Filter invitations by their invitation source.
    #       in: query
    #       required: false
    #     role:
    #       description: Filter invitations by their member role.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/public_members", http_method="GET")
    def orgsListPublicMembers(self): pass
    # To call: GhSDK.resource("org").orgsListPublicMembers(...)
    # GET https://api.github.com/orgs/{org}/public_members
    # Summary: List public organization members
    # Description: Members of an organization can choose to have their membership publicized or not.


    @GhSDK.resource_method("orgs/{org}/security-managers", http_method="GET")
    def orgsListSecurityManagerTeams(self): pass
    # To call: GhSDK.resource("org").orgsListSecurityManagerTeams(...)
    # GET https://api.github.com/orgs/{org}/security-managers
    # Summary: List security manager teams
    # Description: Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    #
    #   To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.
    #
    #   GitHub Apps must have the `administration` organization read permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}/deliveries", http_method="GET")
    def orgsListWebhookDeliveries(self): pass
    # To call: GhSDK.resource("org").orgsListWebhookDeliveries(...)
    # GET https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries
    # Summary: List deliveries for an organization webhook
    # Description: Returns a list of webhook deliveries for a webhook configured in an organization.
    #
    # Parameters:
    #     redelivery:
    #       description: ''
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/hooks", http_method="GET")
    def orgsListWebhooks(self): pass
    # To call: GhSDK.resource("org").orgsListWebhooks(...)
    # GET https://api.github.com/orgs/{org}/hooks
    # Summary: List organization webhooks


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}/pings", http_method="POST")
    def orgsPingWebhook(self): pass
    # To call: GhSDK.resource("org").orgsPingWebhook(...)
    # POST https://api.github.com/orgs/{org}/hooks/{hook_id}/pings
    # Summary: Ping an organization webhook
    # Description: This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", http_method="POST")
    def orgsRedeliverWebhookDelivery(self): pass
    # To call: GhSDK.resource("org").orgsRedeliverWebhookDelivery(...)
    # POST https://api.github.com/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
    # Summary: Redeliver a delivery for an organization webhook
    # Description: Redeliver a delivery for a webhook configured in an organization.


    @GhSDK.resource_method("orgs/{org}/members/{username}", http_method="DELETE")
    def orgsRemoveMember(self): pass
    # To call: GhSDK.resource("org").orgsRemoveMember(...)
    # DELETE https://api.github.com/orgs/{org}/members/{username}
    # Summary: Remove an organization member
    # Description: Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.


    @GhSDK.resource_method("orgs/{org}/memberships/{username}", http_method="DELETE")
    def orgsRemoveMembershipForUser(self): pass
    # To call: GhSDK.resource("org").orgsRemoveMembershipForUser(...)
    # DELETE https://api.github.com/orgs/{org}/memberships/{username}
    # Summary: Remove organization membership for a user
    # Description: In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
    #
    #   If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.


    @GhSDK.resource_method("orgs/{org}/outside_collaborators/{username}", http_method="DELETE")
    def orgsRemoveOutsideCollaborator(self): pass
    # To call: GhSDK.resource("org").orgsRemoveOutsideCollaborator(...)
    # DELETE https://api.github.com/orgs/{org}/outside_collaborators/{username}
    # Summary: Remove outside collaborator from an organization
    # Description: Removing a user from this list will remove them from all the organization's repositories.


    @GhSDK.resource_method("orgs/{org}/public_members/{username}", http_method="DELETE")
    def orgsRemovePublicMembershipForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("org").orgsRemovePublicMembershipForAuthenticatedUser(...)
    # DELETE https://api.github.com/orgs/{org}/public_members/{username}
    # Summary: Remove public organization membership for the authenticated user
    # Description: Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.


    @GhSDK.resource_method("orgs/{org}/security-managers/teams/{team_slug}", http_method="DELETE")
    def orgsRemoveSecurityManagerTeam(self): pass
    # To call: GhSDK.resource("org").orgsRemoveSecurityManagerTeam(...)
    # DELETE https://api.github.com/orgs/{org}/security-managers/teams/{team_slug}
    # Summary: Remove a security manager team
    # Description: Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
    #
    #   To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `admin:org` scope.
    #
    #   GitHub Apps must have the `administration` organization read-write permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/personal-access-token-requests/{pat_request_id}", http_method="POST")
    def orgsReviewPatGrantRequest(self): pass
    # To call: GhSDK.resource("org").orgsReviewPatGrantRequest(...)
    # POST https://api.github.com/orgs/{org}/personal-access-token-requests/{pat_request_id}
    # Summary: Review a request to access organization resources with a fine-grained personal access token
    # Description: Approves or denies a pending request to access organization resources via a fine-grained personal access token. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_token_requests: write` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
    #
    # Parameters:
    #     pat_request_id:
    #       description: Unique identifier of the request for access via fine-grained personal
    #         access token.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/personal-access-token-requests", http_method="POST")
    def orgsReviewPatGrantRequestsInBulk(self): pass
    # To call: GhSDK.resource("org").orgsReviewPatGrantRequestsInBulk(...)
    # POST https://api.github.com/orgs/{org}/personal-access-token-requests
    # Summary: Review requests to access organization resources with fine-grained personal access tokens
    # Description: Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_token_requests: write` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.


    @GhSDK.resource_method("orgs/{org}/memberships/{username}", http_method="PUT")
    def orgsSetMembershipForUser(self): pass
    # To call: GhSDK.resource("org").orgsSetMembershipForUser(...)
    # PUT https://api.github.com/orgs/{org}/memberships/{username}
    # Summary: Set organization membership for a user
    # Description: Only authenticated organization owners can add a member to the organization or update the member's role.
    #
    #   *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
    #
    #   *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
    #
    #   **Rate limits**
    #
    #   To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.


    @GhSDK.resource_method("orgs/{org}/public_members/{username}", http_method="PUT")
    def orgsSetPublicMembershipForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("org").orgsSetPublicMembershipForAuthenticatedUser(...)
    # PUT https://api.github.com/orgs/{org}/public_members/{username}
    # Summary: Set public organization membership for the authenticated user
    # Description: The user can publicize their own membership. (A user cannot publicize the membership for another user.)
    #
    #   Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."


    @GhSDK.resource_method("orgs/{org}/blocks/{username}", http_method="DELETE")
    def orgsUnblockUser(self): pass
    # To call: GhSDK.resource("org").orgsUnblockUser(...)
    # DELETE https://api.github.com/orgs/{org}/blocks/{username}
    # Summary: Unblock a user from an organization
    # Description: Unblocks the given user on behalf of the specified organization.


    @GhSDK.resource_method("orgs/{org}", http_method="PATCH")
    def orgsUpdate(self): pass
    # To call: GhSDK.resource("org").orgsUpdate(...)
    # PATCH https://api.github.com/orgs/{org}
    # Summary: Update an organization
    # Description: **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
    #
    #   Enables an authenticated organization owner with the `admin:org` scope or the `repo` scope to update the organization's profile and member privileges.


    @GhSDK.resource_method("orgs/{org}/personal-access-tokens/{pat_id}", http_method="POST")
    def orgsUpdatePatAccess(self): pass
    # To call: GhSDK.resource("org").orgsUpdatePatAccess(...)
    # POST https://api.github.com/orgs/{org}/personal-access-tokens/{pat_id}
    # Summary: Update the access a fine-grained personal access token has to organization resources
    # Description: Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_tokens: write` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.


    @GhSDK.resource_method("orgs/{org}/personal-access-tokens", http_method="POST")
    def orgsUpdatePatAccesses(self): pass
    # To call: GhSDK.resource("org").orgsUpdatePatAccesses(...)
    # POST https://api.github.com/orgs/{org}/personal-access-tokens
    # Summary: Update the access to organization resources via fine-grained personal access tokens
    # Description: Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access. Only GitHub Apps can call this API,
    #   using the `organization_personal_access_tokens: write` permission.
    #
    #   **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}", http_method="PATCH")
    def orgsUpdateWebhook(self): pass
    # To call: GhSDK.resource("org").orgsUpdateWebhook(...)
    # PATCH https://api.github.com/orgs/{org}/hooks/{hook_id}
    # Summary: Update an organization webhook
    # Description: Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)."


    @GhSDK.resource_method("orgs/{org}/hooks/{hook_id}/config", http_method="PATCH")
    def orgsUpdateWebhookConfigForOrg(self): pass
    # To call: GhSDK.resource("org").orgsUpdateWebhookConfigForOrg(...)
    # PATCH https://api.github.com/orgs/{org}/hooks/{hook_id}/config
    # Summary: Update a webhook configuration for an organization
    # Description: Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook)."
    #
    #   Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.


    @GhSDK.resource_method("orgs/{org}/packages/{package_type}/{package_name}", http_method="DELETE")
    def packagesDeletePackageForOrg(self): pass
    # To call: GhSDK.resource("org").packagesDeletePackageForOrg(...)
    # DELETE https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}
    # Summary: Delete a package for an organization
    # Description: Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    #
    #   To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


    @GhSDK.resource_method("orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", http_method="DELETE")
    def packagesDeletePackageVersionForOrg(self): pass
    # To call: GhSDK.resource("org").packagesDeletePackageVersionForOrg(...)
    # DELETE https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
    # Summary: Delete package version for an organization
    # Description: Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    #
    #   To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


    @GhSDK.resource_method("orgs/{org}/packages/{package_type}/{package_name}/versions", http_method="GET")
    def packagesGetAllPackageVersionsForPackageOwnedByOrg(self): pass
    # To call: GhSDK.resource("org").packagesGetAllPackageVersionsForPackageOwnedByOrg(...)
    # GET https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions
    # Summary: List package versions for a package owned by an organization
    # Description: Lists package versions for a package owned by an organization.
    #
    #   If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #
    # Parameters:
    #     state:
    #       description: The state of the package, either active or deleted.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/packages/{package_type}/{package_name}", http_method="GET")
    def packagesGetPackageForOrganization(self): pass
    # To call: GhSDK.resource("org").packagesGetPackageForOrganization(...)
    # GET https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}
    # Summary: Get a package for an organization
    # Description: Gets a specific package in an organization.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", http_method="GET")
    def packagesGetPackageVersionForOrganization(self): pass
    # To call: GhSDK.resource("org").packagesGetPackageVersionForOrganization(...)
    # GET https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
    # Summary: Get a package version for an organization
    # Description: Gets a specific package version in an organization.
    #
    #   You must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("orgs/{org}/docker/conflicts", http_method="GET")
    def packagesListDockerMigrationConflictingPackagesForOrganization(self): pass
    # To call: GhSDK.resource("org").packagesListDockerMigrationConflictingPackagesForOrganization(...)
    # GET https://api.github.com/orgs/{org}/docker/conflicts
    # Summary: Get list of conflicting packages during Docker migration for organization
    # Description: Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope.


    @GhSDK.resource_method("orgs/{org}/packages", http_method="GET")
    def packagesListPackagesForOrganization(self): pass
    # To call: GhSDK.resource("org").packagesListPackagesForOrganization(...)
    # GET https://api.github.com/orgs/{org}/packages
    # Summary: List packages for an organization
    # Description: Lists packages in an organization readable by the user.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #
    # Parameters:
    #     package_type:
    #       description: The type of supported package. Packages in GitHub's Gradle registry
    #         have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`)
    #         have the type `container`. You can use the type `docker` to find images that
    #         were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these
    #         have now been migrated to the Container registry.
    #       in: query
    #       required: true
    #     page:
    #       description: Page number of the results to fetch.
    #       in: query
    #       required: false
    #     per_page:
    #       description: The number of results per page (max 100).
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/packages/{package_type}/{package_name}/restore", http_method="POST")
    def packagesRestorePackageForOrg(self): pass
    # To call: GhSDK.resource("org").packagesRestorePackageForOrg(...)
    # POST https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/restore
    # Summary: Restore a package for an organization
    # Description: Restores an entire package in an organization.
    #
    #   You can restore a deleted package under the following conditions:
    #     - The package was deleted within the last 30 days.
    #     - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    #
    #   To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    #
    # Parameters:
    #     token:
    #       description: package token
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", http_method="POST")
    def packagesRestorePackageVersionForOrg(self): pass
    # To call: GhSDK.resource("org").packagesRestorePackageVersionForOrg(...)
    # POST https://api.github.com/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
    # Summary: Restore package version for an organization
    # Description: Restores a specific package version in an organization.
    #
    #   You can restore a deleted package under the following conditions:
    #     - The package was deleted within the last 30 days.
    #     - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    #
    #   To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


    @GhSDK.resource_method("orgs/{org}/projects", http_method="POST")
    def projectsCreateForOrg(self): pass
    # To call: GhSDK.resource("org").projectsCreateForOrg(...)
    # POST https://api.github.com/orgs/{org}/projects
    # Summary: Create an organization project
    # Description: Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.


    @GhSDK.resource_method("orgs/{org}/projects", http_method="GET")
    def projectsListForOrg(self): pass
    # To call: GhSDK.resource("org").projectsListForOrg(...)
    # GET https://api.github.com/orgs/{org}/projects
    # Summary: List organization projects
    # Description: Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    #
    # Parameters:
    #     state:
    #       description: Indicates the state of the projects to return.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", http_method="POST")
    def reactionsCreateForTeamDiscussionCommentInOrg(self): pass
    # To call: GhSDK.resource("org").reactionsCreateForTeamDiscussionCommentInOrg(...)
    # POST https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
    # Summary: Create reaction for a team discussion comment
    # Description: Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", http_method="POST")
    def reactionsCreateForTeamDiscussionInOrg(self): pass
    # To call: GhSDK.resource("org").reactionsCreateForTeamDiscussionInOrg(...)
    # POST https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
    # Summary: Create reaction for a team discussion
    # Description: Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}", http_method="DELETE")
    def reactionsDeleteForTeamDiscussion(self): pass
    # To call: GhSDK.resource("org").reactionsDeleteForTeamDiscussion(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
    # Summary: Delete team discussion reaction
    # Description: **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
    #
    #   Delete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}", http_method="DELETE")
    def reactionsDeleteForTeamDiscussionComment(self): pass
    # To call: GhSDK.resource("org").reactionsDeleteForTeamDiscussionComment(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
    # Summary: Delete team discussion comment reaction
    # Description: **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
    #
    #   Delete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", http_method="GET")
    def reactionsListForTeamDiscussionCommentInOrg(self): pass
    # To call: GhSDK.resource("org").reactionsListForTeamDiscussionCommentInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
    # Summary: List reactions for a team discussion comment
    # Description: List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to a team discussion comment.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", http_method="GET")
    def reactionsListForTeamDiscussionInOrg(self): pass
    # To call: GhSDK.resource("org").reactionsListForTeamDiscussionInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
    # Summary: List reactions for a team discussion
    # Description: List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to a team discussion.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/repos", http_method="POST")
    def reposCreateInOrg(self): pass
    # To call: GhSDK.resource("org").reposCreateInOrg(...)
    # POST https://api.github.com/orgs/{org}/repos
    # Summary: Create an organization repository
    # Description: Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
    #
    #   **OAuth scope requirements**
    #
    #   When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
    #
    #   *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
    #   *   `repo` scope to create a private repository


    @GhSDK.resource_method("orgs/{org}/rulesets", http_method="POST")
    def reposCreateOrgRuleset(self): pass
    # To call: GhSDK.resource("org").reposCreateOrgRuleset(...)
    # POST https://api.github.com/orgs/{org}/rulesets
    # Summary: Create an organization repository ruleset
    # Description: Create a repository ruleset for an organization.


    @GhSDK.resource_method("orgs/{org}/rulesets/{ruleset_id}", http_method="DELETE")
    def reposDeleteOrgRuleset(self): pass
    # To call: GhSDK.resource("org").reposDeleteOrgRuleset(...)
    # DELETE https://api.github.com/orgs/{org}/rulesets/{ruleset_id}
    # Summary: Delete an organization repository ruleset
    # Description: Delete a ruleset for an organization.
    #
    # Parameters:
    #     ruleset_id:
    #       description: The ID of the ruleset.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/rulesets/{ruleset_id}", http_method="GET")
    def reposGetOrgRuleset(self): pass
    # To call: GhSDK.resource("org").reposGetOrgRuleset(...)
    # GET https://api.github.com/orgs/{org}/rulesets/{ruleset_id}
    # Summary: Get an organization repository ruleset
    # Description: Get a repository ruleset for an organization.
    #
    # Parameters:
    #     ruleset_id:
    #       description: The ID of the ruleset.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/rulesets", http_method="GET")
    def reposGetOrgRulesets(self): pass
    # To call: GhSDK.resource("org").reposGetOrgRulesets(...)
    # GET https://api.github.com/orgs/{org}/rulesets
    # Summary: Get all organization repository rulesets
    # Description: Get all the repository rulesets for an organization.


    @GhSDK.resource_method("orgs/{org}/repos", http_method="GET")
    def reposListForOrg(self): pass
    # To call: GhSDK.resource("org").reposListForOrg(...)
    # GET https://api.github.com/orgs/{org}/repos
    # Summary: List organization repositories
    # Description: Lists repositories for the specified organization.
    #
    #   **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    #
    # Parameters:
    #     direction:
    #       description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise
    #         `desc`.'
    #       in: query
    #       required: false
    #     sort:
    #       description: The property to sort the results by.
    #       in: query
    #       required: false
    #     type:
    #       description: Specifies the types of repositories you want returned.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/rulesets/{ruleset_id}", http_method="PUT")
    def reposUpdateOrgRuleset(self): pass
    # To call: GhSDK.resource("org").reposUpdateOrgRuleset(...)
    # PUT https://api.github.com/orgs/{org}/rulesets/{ruleset_id}
    # Summary: Update an organization repository ruleset
    # Description: Update a ruleset for an organization.
    #
    # Parameters:
    #     ruleset_id:
    #       description: The ID of the ruleset.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("orgs/{org}/secret-scanning/alerts", http_method="GET")
    def secretScanningListAlertsForOrg(self): pass
    # To call: GhSDK.resource("org").secretScanningListAlertsForOrg(...)
    # GET https://api.github.com/orgs/{org}/secret-scanning/alerts
    # Summary: List secret scanning alerts for an organization
    # Description: Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
    #   To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
    #   For public repositories, you may instead use the `public_repo` scope.
    #
    #   GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.


    @GhSDK.resource_method("orgs/{org}/security-advisories", http_method="GET")
    def securityAdvisoriesListOrgRepositoryAdvisories(self): pass
    # To call: GhSDK.resource("org").securityAdvisoriesListOrgRepositoryAdvisories(...)
    # GET https://api.github.com/orgs/{org}/security-advisories
    # Summary: List repository security advisories for an organization
    # Description: Lists repository security advisories for an organization.
    #
    #   To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `repository_advisories:write` permission.
    #
    # Parameters:
    #     per_page:
    #       description: The number of advisories to return per page.
    #       in: query
    #       required: false
    #     sort:
    #       description: The property to sort the results by.
    #       in: query
    #       required: false
    #     state:
    #       description: Filter by the state of the repository advisories. Only advisories
    #         of this state will be returned.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/memberships/{username}", http_method="PUT")
    def teamsAddOrUpdateMembershipForUserInOrg(self): pass
    # To call: GhSDK.resource("org").teamsAddOrUpdateMembershipForUserInOrg(...)
    # PUT https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}
    # Summary: Add or update team membership for a user
    # Description: Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
    #
    #   Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    #
    #   An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
    #
    #   If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/projects/{project_id}", http_method="PUT")
    def teamsAddOrUpdateProjectPermissionsInOrg(self): pass
    # To call: GhSDK.resource("org").teamsAddOrUpdateProjectPermissionsInOrg(...)
    # PUT https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}
    # Summary: Add or update team project permissions
    # Description: Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", http_method="PUT")
    def teamsAddOrUpdateRepoPermissionsInOrg(self): pass
    # To call: GhSDK.resource("org").teamsAddOrUpdateRepoPermissionsInOrg(...)
    # PUT https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
    # Summary: Add or update team repository permissions
    # Description: To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
    #
    #   For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/projects/{project_id}", http_method="GET")
    def teamsCheckPermissionsForProjectInOrg(self): pass
    # To call: GhSDK.resource("org").teamsCheckPermissionsForProjectInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}
    # Summary: Check team permissions for a project
    # Description: Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", http_method="GET")
    def teamsCheckPermissionsForRepoInOrg(self): pass
    # To call: GhSDK.resource("org").teamsCheckPermissionsForRepoInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
    # Summary: Check team permissions for a repository
    # Description: Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
    #
    #   You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
    #
    #   If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.


    @GhSDK.resource_method("orgs/{org}/teams", http_method="POST")
    def teamsCreate(self): pass
    # To call: GhSDK.resource("org").teamsCreate(...)
    # POST https://api.github.com/orgs/{org}/teams
    # Summary: Create a team
    # Description: To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
    #
    #   When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", http_method="POST")
    def teamsCreateDiscussionCommentInOrg(self): pass
    # To call: GhSDK.resource("org").teamsCreateDiscussionCommentInOrg(...)
    # POST https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
    # Summary: Create a discussion comment
    # Description: Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions", http_method="POST")
    def teamsCreateDiscussionInOrg(self): pass
    # To call: GhSDK.resource("org").teamsCreateDiscussionInOrg(...)
    # POST https://api.github.com/orgs/{org}/teams/{team_slug}/discussions
    # Summary: Create a discussion
    # Description: Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", http_method="DELETE")
    def teamsDeleteDiscussionCommentInOrg(self): pass
    # To call: GhSDK.resource("org").teamsDeleteDiscussionCommentInOrg(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
    # Summary: Delete a discussion comment
    # Description: Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", http_method="DELETE")
    def teamsDeleteDiscussionInOrg(self): pass
    # To call: GhSDK.resource("org").teamsDeleteDiscussionInOrg(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
    # Summary: Delete a discussion
    # Description: Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}", http_method="DELETE")
    def teamsDeleteInOrg(self): pass
    # To call: GhSDK.resource("org").teamsDeleteInOrg(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}
    # Summary: Delete a team
    # Description: To delete a team, the authenticated user must be an organization owner or team maintainer.
    #
    #   If you are an organization owner, deleting a parent team will delete all of its child teams as well.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}", http_method="GET")
    def teamsGetByName(self): pass
    # To call: GhSDK.resource("org").teamsGetByName(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}
    # Summary: Get a team by name
    # Description: Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", http_method="GET")
    def teamsGetDiscussionCommentInOrg(self): pass
    # To call: GhSDK.resource("org").teamsGetDiscussionCommentInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
    # Summary: Get a discussion comment
    # Description: Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", http_method="GET")
    def teamsGetDiscussionInOrg(self): pass
    # To call: GhSDK.resource("org").teamsGetDiscussionInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
    # Summary: Get a discussion
    # Description: Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/memberships/{username}", http_method="GET")
    def teamsGetMembershipForUserInOrg(self): pass
    # To call: GhSDK.resource("org").teamsGetMembershipForUserInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}
    # Summary: Get team membership for a user
    # Description: Team members will include the members of child teams.
    #
    #   To get a user's membership with a team, the team must be visible to the authenticated user.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
    #
    #   **Note:**
    #   The response contains the `state` of the membership and the member's `role`.
    #
    #   The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).


    @GhSDK.resource_method("orgs/{org}/teams", http_method="GET")
    def teamsList(self): pass
    # To call: GhSDK.resource("org").teamsList(...)
    # GET https://api.github.com/orgs/{org}/teams
    # Summary: List teams
    # Description: Lists all teams in an organization that are visible to the authenticated user.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/teams", http_method="GET")
    def teamsListChildInOrg(self): pass
    # To call: GhSDK.resource("org").teamsListChildInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/teams
    # Summary: List child teams
    # Description: Lists the child teams of the team specified by `{team_slug}`.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", http_method="GET")
    def teamsListDiscussionCommentsInOrg(self): pass
    # To call: GhSDK.resource("org").teamsListDiscussionCommentsInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
    # Summary: List discussion comments
    # Description: List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions", http_method="GET")
    def teamsListDiscussionsInOrg(self): pass
    # To call: GhSDK.resource("org").teamsListDiscussionsInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/discussions
    # Summary: List discussions
    # Description: List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
    #
    # Parameters:
    #     pinned:
    #       description: Pinned discussions only filter
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/members", http_method="GET")
    def teamsListMembersInOrg(self): pass
    # To call: GhSDK.resource("org").teamsListMembersInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/members
    # Summary: List team members
    # Description: Team members will include the members of child teams.
    #
    #   To list members in a team, the team must be visible to the authenticated user.
    #
    # Parameters:
    #     role:
    #       description: Filters members returned by their role in the team.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/invitations", http_method="GET")
    def teamsListPendingInvitationsInOrg(self): pass
    # To call: GhSDK.resource("org").teamsListPendingInvitationsInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/invitations
    # Summary: List pending team invitations
    # Description: The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/projects", http_method="GET")
    def teamsListProjectsInOrg(self): pass
    # To call: GhSDK.resource("org").teamsListProjectsInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/projects
    # Summary: List team projects
    # Description: Lists the organization projects for a team.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/repos", http_method="GET")
    def teamsListReposInOrg(self): pass
    # To call: GhSDK.resource("org").teamsListReposInOrg(...)
    # GET https://api.github.com/orgs/{org}/teams/{team_slug}/repos
    # Summary: List team repositories
    # Description: Lists a team's repositories visible to the authenticated user.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/memberships/{username}", http_method="DELETE")
    def teamsRemoveMembershipForUserInOrg(self): pass
    # To call: GhSDK.resource("org").teamsRemoveMembershipForUserInOrg(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}/memberships/{username}
    # Summary: Remove team membership for a user
    # Description: To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    #
    #   Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/projects/{project_id}", http_method="DELETE")
    def teamsRemoveProjectInOrg(self): pass
    # To call: GhSDK.resource("org").teamsRemoveProjectInOrg(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}/projects/{project_id}
    # Summary: Remove a project from a team
    # Description: Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", http_method="DELETE")
    def teamsRemoveRepoInOrg(self): pass
    # To call: GhSDK.resource("org").teamsRemoveRepoInOrg(...)
    # DELETE https://api.github.com/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
    # Summary: Remove a repository from a team
    # Description: If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", http_method="PATCH")
    def teamsUpdateDiscussionCommentInOrg(self): pass
    # To call: GhSDK.resource("org").teamsUpdateDiscussionCommentInOrg(...)
    # PATCH https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
    # Summary: Update a discussion comment
    # Description: Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", http_method="PATCH")
    def teamsUpdateDiscussionInOrg(self): pass
    # To call: GhSDK.resource("org").teamsUpdateDiscussionInOrg(...)
    # PATCH https://api.github.com/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
    # Summary: Update a discussion
    # Description: Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.


    @GhSDK.resource_method("orgs/{org}/teams/{team_slug}", http_method="PATCH")
    def teamsUpdateInOrg(self): pass
    # To call: GhSDK.resource("org").teamsUpdateInOrg(...)
    # PATCH https://api.github.com/orgs/{org}/teams/{team_slug}
    # Summary: Update a team
    # Description: To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    #
    #   **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.


@GhSDK.resource_class("organization", "")
class OrganizationResource(GhSDK):
# To instantiate: GhSDK.resource("organization")
# Number of methods: 1
#     orgsList

    @GhSDK.resource_method("organizations", http_method="GET")
    def orgsList(self): pass
    # To call: GhSDK.resource("organization").orgsList(...)
    # GET https://api.github.com/organizations
    # Summary: List organizations
    # Description: Lists all organizations, in the order that they were created on GitHub.
    #
    #   **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.


@GhSDK.resource_class("project", "")
class ProjectResource(GhSDK):
# To instantiate: GhSDK.resource("project")
# Number of methods: 19
#     projectsAddCollaborator
#     projectsCreateCard
#     projectsCreateColumn
#     projectsDelete
#     projectsDeleteCard
#     projectsDeleteColumn
#     projectsGet
#     projectsGetCard
#     projectsGetColumn
#     projectsGetPermissionForUser
#     projectsListCards
#     projectsListCollaborators
#     projectsListColumns
#     projectsMoveCard
#     projectsMoveColumn
#     projectsRemoveCollaborator
#     projectsUpdate
#     projectsUpdateCard
#     projectsUpdateColumn

    @GhSDK.resource_method("projects/{project_id}/collaborators/{username}", http_method="PUT")
    def projectsAddCollaborator(self): pass
    # To call: GhSDK.resource("project").projectsAddCollaborator(...)
    # PUT https://api.github.com/projects/{project_id}/collaborators/{username}
    # Summary: Add project collaborator
    # Description: Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.


    @GhSDK.resource_method("projects/columns/{column_id}/cards", http_method="POST")
    def projectsCreateCard(self): pass
    # To call: GhSDK.resource("project").projectsCreateCard(...)
    # POST https://api.github.com/projects/columns/{column_id}/cards
    # Summary: Create a project card


    @GhSDK.resource_method("projects/{project_id}/columns", http_method="POST")
    def projectsCreateColumn(self): pass
    # To call: GhSDK.resource("project").projectsCreateColumn(...)
    # POST https://api.github.com/projects/{project_id}/columns
    # Summary: Create a project column
    # Description: Creates a new project column.


    @GhSDK.resource_method("projects/{project_id}", http_method="DELETE")
    def projectsDelete(self): pass
    # To call: GhSDK.resource("project").projectsDelete(...)
    # DELETE https://api.github.com/projects/{project_id}
    # Summary: Delete a project
    # Description: Deletes a project board. Returns a `404 Not Found` status if projects are disabled.


    @GhSDK.resource_method("projects/columns/cards/{card_id}", http_method="DELETE")
    def projectsDeleteCard(self): pass
    # To call: GhSDK.resource("project").projectsDeleteCard(...)
    # DELETE https://api.github.com/projects/columns/cards/{card_id}
    # Summary: Delete a project card
    # Description: Deletes a project card


    @GhSDK.resource_method("projects/columns/{column_id}", http_method="DELETE")
    def projectsDeleteColumn(self): pass
    # To call: GhSDK.resource("project").projectsDeleteColumn(...)
    # DELETE https://api.github.com/projects/columns/{column_id}
    # Summary: Delete a project column
    # Description: Deletes a project column.


    @GhSDK.resource_method("projects/{project_id}", http_method="GET")
    def projectsGet(self): pass
    # To call: GhSDK.resource("project").projectsGet(...)
    # GET https://api.github.com/projects/{project_id}
    # Summary: Get a project
    # Description: Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.


    @GhSDK.resource_method("projects/columns/cards/{card_id}", http_method="GET")
    def projectsGetCard(self): pass
    # To call: GhSDK.resource("project").projectsGetCard(...)
    # GET https://api.github.com/projects/columns/cards/{card_id}
    # Summary: Get a project card
    # Description: Gets information about a project card.


    @GhSDK.resource_method("projects/columns/{column_id}", http_method="GET")
    def projectsGetColumn(self): pass
    # To call: GhSDK.resource("project").projectsGetColumn(...)
    # GET https://api.github.com/projects/columns/{column_id}
    # Summary: Get a project column
    # Description: Gets information about a project column.


    @GhSDK.resource_method("projects/{project_id}/collaborators/{username}/permission", http_method="GET")
    def projectsGetPermissionForUser(self): pass
    # To call: GhSDK.resource("project").projectsGetPermissionForUser(...)
    # GET https://api.github.com/projects/{project_id}/collaborators/{username}/permission
    # Summary: Get project permission for a user
    # Description: Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.


    @GhSDK.resource_method("projects/columns/{column_id}/cards", http_method="GET")
    def projectsListCards(self): pass
    # To call: GhSDK.resource("project").projectsListCards(...)
    # GET https://api.github.com/projects/columns/{column_id}/cards
    # Summary: List project cards
    # Description: Lists the project cards in a project.
    #
    # Parameters:
    #     archived_state:
    #       description: Filters the project cards that are returned by the card's state.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("projects/{project_id}/collaborators", http_method="GET")
    def projectsListCollaborators(self): pass
    # To call: GhSDK.resource("project").projectsListCollaborators(...)
    # GET https://api.github.com/projects/{project_id}/collaborators
    # Summary: List project collaborators
    # Description: Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
    #
    # Parameters:
    #     affiliation:
    #       description: Filters the collaborators by their affiliation. `outside` means outside
    #         collaborators of a project that are not a member of the project's organization.
    #         `direct` means collaborators with permissions to a project, regardless of organization
    #         membership status. `all` means all collaborators the authenticated user can
    #         see.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("projects/{project_id}/columns", http_method="GET")
    def projectsListColumns(self): pass
    # To call: GhSDK.resource("project").projectsListColumns(...)
    # GET https://api.github.com/projects/{project_id}/columns
    # Summary: List project columns
    # Description: Lists the project columns in a project.


    @GhSDK.resource_method("projects/columns/cards/{card_id}/moves", http_method="POST")
    def projectsMoveCard(self): pass
    # To call: GhSDK.resource("project").projectsMoveCard(...)
    # POST https://api.github.com/projects/columns/cards/{card_id}/moves
    # Summary: Move a project card


    @GhSDK.resource_method("projects/columns/{column_id}/moves", http_method="POST")
    def projectsMoveColumn(self): pass
    # To call: GhSDK.resource("project").projectsMoveColumn(...)
    # POST https://api.github.com/projects/columns/{column_id}/moves
    # Summary: Move a project column


    @GhSDK.resource_method("projects/{project_id}/collaborators/{username}", http_method="DELETE")
    def projectsRemoveCollaborator(self): pass
    # To call: GhSDK.resource("project").projectsRemoveCollaborator(...)
    # DELETE https://api.github.com/projects/{project_id}/collaborators/{username}
    # Summary: Remove user as a collaborator
    # Description: Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.


    @GhSDK.resource_method("projects/{project_id}", http_method="PATCH")
    def projectsUpdate(self): pass
    # To call: GhSDK.resource("project").projectsUpdate(...)
    # PATCH https://api.github.com/projects/{project_id}
    # Summary: Update a project
    # Description: Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.


    @GhSDK.resource_method("projects/columns/cards/{card_id}", http_method="PATCH")
    def projectsUpdateCard(self): pass
    # To call: GhSDK.resource("project").projectsUpdateCard(...)
    # PATCH https://api.github.com/projects/columns/cards/{card_id}
    # Summary: Update an existing project card


    @GhSDK.resource_method("projects/columns/{column_id}", http_method="PATCH")
    def projectsUpdateColumn(self): pass
    # To call: GhSDK.resource("project").projectsUpdateColumn(...)
    # PATCH https://api.github.com/projects/columns/{column_id}
    # Summary: Update an existing project column


@GhSDK.resource_class("rate_limit", "")
class RateLimitResource(GhSDK):
# To instantiate: GhSDK.resource("rate_limit")
# Number of methods: 1
#     rateLimitGet

    @GhSDK.resource_method("rate_limit", http_method="GET")
    def rateLimitGet(self): pass
    # To call: GhSDK.resource("rate_limit").rateLimitGet(...)
    # GET https://api.github.com/rate_limit
    # Summary: Get rate limit status for the authenticated user
    # Description: **Note:** Accessing this endpoint does not count against your REST API rate limit.
    #
    #   Some categories of endpoints have custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories:
    #   * The `core` object provides your rate limit status for all non-search-related resources in the REST API.
    #   * The `search` object provides your rate limit status for the REST API for searching (excluding code searches). For more information, see "[Search](https://docs.github.com/rest/search)."
    #   * The `code_search` object provides your rate limit status for the REST API for searching code. For more information, see "[Search code](https://docs.github.com/rest/search/search#search-code)."
    #   * The `graphql` object provides your rate limit status for the GraphQL API. For more information, see "[Resource limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit)."
    #   * The `integration_manifest` object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information, see "[Creating a GitHub App from a manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration)."
    #   * The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
    #   * The `code_scanning_upload` object provides your rate limit status for uploading SARIF results to code scanning. For more information, see "[Uploading a SARIF file to GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)."
    #   * The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub Actions. For more information, see "[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners)."
    #   * The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version. For more information about API versions, see "[API Versions](https://docs.github.com/rest/overview/api-versions)."
    #
    #   **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.


@GhSDK.resource_class("repo", "")
class RepoResource(GhSDK):
# To instantiate: GhSDK.resource("repo")
# Number of methods: 417
#     actionsAddCustomLabelsToSelfHostedRunnerForRepo
#     actionsApproveWorkflowRun
#     actionsCancelWorkflowRun
#     actionsCreateOrUpdateRepoSecret
#     actionsCreateRegistrationTokenForRepo
#     actionsCreateRemoveTokenForRepo
#     actionsCreateRepoVariable
#     actionsCreateWorkflowDispatch
#     actionsDeleteActionsCacheById
#     actionsDeleteActionsCacheByKey
#     actionsDeleteArtifact
#     actionsDeleteRepoSecret
#     actionsDeleteRepoVariable
#     actionsDeleteSelfHostedRunnerFromRepo
#     actionsDeleteWorkflowRun
#     actionsDeleteWorkflowRunLogs
#     actionsDisableWorkflow
#     actionsDownloadArtifact
#     actionsDownloadJobLogsForWorkflowRun
#     actionsDownloadWorkflowRunAttemptLogs
#     actionsDownloadWorkflowRunLogs
#     actionsEnableWorkflow
#     actionsGenerateRunnerJitconfigForRepo
#     actionsGetActionsCacheList
#     actionsGetActionsCacheUsage
#     actionsGetAllowedActionsRepository
#     actionsGetArtifact
#     actionsGetCustomOidcSubClaimForRepo
#     actionsGetGithubActionsDefaultWorkflowPermissionsRepository
#     actionsGetGithubActionsPermissionsRepository
#     actionsGetJobForWorkflowRun
#     actionsGetPendingDeploymentsForRun
#     actionsGetRepoPublicKey
#     actionsGetRepoSecret
#     actionsGetRepoVariable
#     actionsGetReviewsForRun
#     actionsGetSelfHostedRunnerForRepo
#     actionsGetWorkflow
#     actionsGetWorkflowAccessToRepository
#     actionsGetWorkflowRun
#     actionsGetWorkflowRunAttempt
#     actionsGetWorkflowRunUsage
#     actionsGetWorkflowUsage
#     actionsListArtifactsForRepo
#     actionsListJobsForWorkflowRun
#     actionsListJobsForWorkflowRunAttempt
#     actionsListLabelsForSelfHostedRunnerForRepo
#     actionsListRepoOrganizationSecrets
#     actionsListRepoOrganizationVariables
#     actionsListRepoSecrets
#     actionsListRepoVariables
#     actionsListRepoWorkflows
#     actionsListRunnerApplicationsForRepo
#     actionsListSelfHostedRunnersForRepo
#     actionsListWorkflowRunArtifacts
#     actionsListWorkflowRuns
#     actionsListWorkflowRunsForRepo
#     actionsReRunJobForWorkflowRun
#     actionsReRunWorkflow
#     actionsReRunWorkflowFailedJobs
#     actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo
#     actionsRemoveCustomLabelFromSelfHostedRunnerForRepo
#     actionsReviewCustomGatesForRun
#     actionsReviewPendingDeploymentsForRun
#     actionsSetAllowedActionsRepository
#     actionsSetCustomLabelsForSelfHostedRunnerForRepo
#     actionsSetCustomOidcSubClaimForRepo
#     actionsSetGithubActionsDefaultWorkflowPermissionsRepository
#     actionsSetGithubActionsPermissionsRepository
#     actionsSetWorkflowAccessToRepository
#     actionsUpdateRepoVariable
#     activityDeleteRepoSubscription
#     activityGetRepoSubscription
#     activityListRepoEvents
#     activityListRepoNotificationsForAuthenticatedUser
#     activityListStargazersForRepo
#     activityListWatchersForRepo
#     activityMarkRepoNotificationsAsRead
#     activitySetRepoSubscription
#     appsGetRepoInstallation
#     checksCreate
#     checksCreateSuite
#     checksGet
#     checksGetSuite
#     checksListAnnotations
#     checksListForRef
#     checksListForSuite
#     checksListSuitesForRef
#     checksRerequestRun
#     checksRerequestSuite
#     checksSetSuitesPreferences
#     checksUpdate
#     codeScanningDeleteAnalysis
#     codeScanningGetAlert
#     codeScanningGetAnalysis
#     codeScanningGetCodeqlDatabase
#     codeScanningGetDefaultSetup
#     codeScanningGetSarif
#     codeScanningListAlertInstances
#     codeScanningListAlertsForRepo
#     codeScanningListCodeqlDatabases
#     codeScanningListRecentAnalyses
#     codeScanningUpdateAlert
#     codeScanningUpdateDefaultSetup
#     codeScanningUploadSarif
#     codespacesCreateOrUpdateRepoSecret
#     codespacesCreateWithPrForAuthenticatedUser
#     codespacesCreateWithRepoForAuthenticatedUser
#     codespacesDeleteRepoSecret
#     codespacesGetRepoPublicKey
#     codespacesGetRepoSecret
#     codespacesListDevcontainersInRepositoryForAuthenticatedUser
#     codespacesListInRepositoryForAuthenticatedUser
#     codespacesListRepoSecrets
#     codespacesPreFlightWithRepoForAuthenticatedUser
#     codespacesRepoMachinesForAuthenticatedUser
#     dependabotCreateOrUpdateRepoSecret
#     dependabotDeleteRepoSecret
#     dependabotGetAlert
#     dependabotGetRepoPublicKey
#     dependabotGetRepoSecret
#     dependabotListAlertsForRepo
#     dependabotListRepoSecrets
#     dependabotUpdateAlert
#     dependencyGraphCreateRepositorySnapshot
#     dependencyGraphDiffRange
#     dependencyGraphExportSbom
#     gitCreateBlob
#     gitCreateCommit
#     gitCreateRef
#     gitCreateTag
#     gitCreateTree
#     gitDeleteRef
#     gitGetBlob
#     gitGetCommit
#     gitGetRef
#     gitGetTag
#     gitGetTree
#     gitListMatchingRefs
#     gitUpdateRef
#     interactionsGetRestrictionsForRepo
#     interactionsRemoveRestrictionsForRepo
#     interactionsSetRestrictionsForRepo
#     issuesAddAssignees
#     issuesAddLabels
#     issuesCheckUserCanBeAssigned
#     issuesCheckUserCanBeAssignedToIssue
#     issuesCreate
#     issuesCreateComment
#     issuesCreateLabel
#     issuesCreateMilestone
#     issuesDeleteComment
#     issuesDeleteLabel
#     issuesDeleteMilestone
#     issuesGet
#     issuesGetComment
#     issuesGetEvent
#     issuesGetLabel
#     issuesGetMilestone
#     issuesListAssignees
#     issuesListComments
#     issuesListCommentsForRepo
#     issuesListEvents
#     issuesListEventsForRepo
#     issuesListEventsForTimeline
#     issuesListForRepo
#     issuesListLabelsForMilestone
#     issuesListLabelsForRepo
#     issuesListLabelsOnIssue
#     issuesListMilestones
#     issuesLock
#     issuesRemoveAllLabels
#     issuesRemoveAssignees
#     issuesRemoveLabel
#     issuesSetLabels
#     issuesUnlock
#     issuesUpdate
#     issuesUpdateComment
#     issuesUpdateLabel
#     issuesUpdateMilestone
#     licensesGetForRepo
#     migrationsCancelImport
#     migrationsGetCommitAuthors
#     migrationsGetImportStatus
#     migrationsGetLargeFiles
#     migrationsMapCommitAuthor
#     migrationsSetLfsPreference
#     migrationsStartImport
#     migrationsUpdateImport
#     projectsCreateForRepo
#     projectsListForRepo
#     pullsCheckIfMerged
#     pullsCreate
#     pullsCreateReplyForReviewComment
#     pullsCreateReview
#     pullsCreateReviewComment
#     pullsDeletePendingReview
#     pullsDeleteReviewComment
#     pullsDismissReview
#     pullsGet
#     pullsGetReview
#     pullsGetReviewComment
#     pullsList
#     pullsListCommentsForReview
#     pullsListCommits
#     pullsListFiles
#     pullsListRequestedReviewers
#     pullsListReviewComments
#     pullsListReviewCommentsForRepo
#     pullsListReviews
#     pullsMerge
#     pullsRemoveRequestedReviewers
#     pullsRequestReviewers
#     pullsSubmitReview
#     pullsUpdate
#     pullsUpdateBranch
#     pullsUpdateReview
#     pullsUpdateReviewComment
#     reactionsCreateForCommitComment
#     reactionsCreateForIssue
#     reactionsCreateForIssueComment
#     reactionsCreateForPullRequestReviewComment
#     reactionsCreateForRelease
#     reactionsDeleteForCommitComment
#     reactionsDeleteForIssue
#     reactionsDeleteForIssueComment
#     reactionsDeleteForPullRequestComment
#     reactionsDeleteForRelease
#     reactionsListForCommitComment
#     reactionsListForIssue
#     reactionsListForIssueComment
#     reactionsListForPullRequestReviewComment
#     reactionsListForRelease
#     reposAddAppAccessRestrictions
#     reposAddCollaborator
#     reposAddStatusCheckContexts
#     reposAddTeamAccessRestrictions
#     reposAddUserAccessRestrictions
#     reposCheckAutomatedSecurityFixes
#     reposCheckCollaborator
#     reposCheckVulnerabilityAlerts
#     reposCodeownersErrors
#     reposCompareCommits
#     reposCreateAutolink
#     reposCreateCommitComment
#     reposCreateCommitSignatureProtection
#     reposCreateCommitStatus
#     reposCreateDeployKey
#     reposCreateDeployment
#     reposCreateDeploymentBranchPolicy
#     reposCreateDeploymentProtectionRule
#     reposCreateDeploymentStatus
#     reposCreateDispatchEvent
#     reposCreateFork
#     reposCreateOrUpdateEnvironment
#     reposCreateOrUpdateFileContents
#     reposCreatePagesDeployment
#     reposCreatePagesSite
#     reposCreateRelease
#     reposCreateRepoRuleset
#     reposCreateTagProtection
#     reposCreateUsingTemplate
#     reposCreateWebhook
#     reposDelete
#     reposDeleteAccessRestrictions
#     reposDeleteAdminBranchProtection
#     reposDeleteAnEnvironment
#     reposDeleteAutolink
#     reposDeleteBranchProtection
#     reposDeleteCommitComment
#     reposDeleteCommitSignatureProtection
#     reposDeleteDeployKey
#     reposDeleteDeployment
#     reposDeleteDeploymentBranchPolicy
#     reposDeleteFile
#     reposDeleteInvitation
#     reposDeletePagesSite
#     reposDeletePullRequestReviewProtection
#     reposDeleteRelease
#     reposDeleteReleaseAsset
#     reposDeleteRepoRuleset
#     reposDeleteTagProtection
#     reposDeleteWebhook
#     reposDisableAutomatedSecurityFixes
#     reposDisableDeploymentProtectionRule
#     reposDisablePrivateVulnerabilityReporting
#     reposDisableVulnerabilityAlerts
#     reposDownloadTarballArchive
#     reposDownloadZipballArchive
#     reposEnableAutomatedSecurityFixes
#     reposEnablePrivateVulnerabilityReporting
#     reposEnableVulnerabilityAlerts
#     reposGenerateReleaseNotes
#     reposGet
#     reposGetAccessRestrictions
#     reposGetAdminBranchProtection
#     reposGetAllDeploymentProtectionRules
#     reposGetAllEnvironments
#     reposGetAllStatusCheckContexts
#     reposGetAllTopics
#     reposGetAppsWithAccessToProtectedBranch
#     reposGetAutolink
#     reposGetBranch
#     reposGetBranchProtection
#     reposGetBranchRules
#     reposGetClones
#     reposGetCodeFrequencyStats
#     reposGetCollaboratorPermissionLevel
#     reposGetCombinedStatusForRef
#     reposGetCommit
#     reposGetCommitActivityStats
#     reposGetCommitComment
#     reposGetCommitSignatureProtection
#     reposGetCommunityProfileMetrics
#     reposGetContent
#     reposGetContributorsStats
#     reposGetCustomDeploymentProtectionRule
#     reposGetDeployKey
#     reposGetDeployment
#     reposGetDeploymentBranchPolicy
#     reposGetDeploymentStatus
#     reposGetEnvironment
#     reposGetLatestPagesBuild
#     reposGetLatestRelease
#     reposGetPages
#     reposGetPagesBuild
#     reposGetPagesHealthCheck
#     reposGetParticipationStats
#     reposGetPullRequestReviewProtection
#     reposGetPunchCardStats
#     reposGetReadme
#     reposGetReadmeInDirectory
#     reposGetRelease
#     reposGetReleaseAsset
#     reposGetReleaseByTag
#     reposGetRepoRuleset
#     reposGetRepoRulesets
#     reposGetStatusChecksProtection
#     reposGetTeamsWithAccessToProtectedBranch
#     reposGetTopPaths
#     reposGetTopReferrers
#     reposGetUsersWithAccessToProtectedBranch
#     reposGetViews
#     reposGetWebhook
#     reposGetWebhookConfigForRepo
#     reposGetWebhookDelivery
#     reposListActivities
#     reposListAutolinks
#     reposListBranches
#     reposListBranchesForHeadCommit
#     reposListCollaborators
#     reposListCommentsForCommit
#     reposListCommitCommentsForRepo
#     reposListCommitStatusesForRef
#     reposListCommits
#     reposListContributors
#     reposListCustomDeploymentRuleIntegrations
#     reposListDeployKeys
#     reposListDeploymentBranchPolicies
#     reposListDeploymentStatuses
#     reposListDeployments
#     reposListForks
#     reposListInvitations
#     reposListLanguages
#     reposListPagesBuilds
#     reposListPullRequestsAssociatedWithCommit
#     reposListReleaseAssets
#     reposListReleases
#     reposListTagProtection
#     reposListTags
#     reposListTeams
#     reposListWebhookDeliveries
#     reposListWebhooks
#     reposMerge
#     reposMergeUpstream
#     reposPingWebhook
#     reposRedeliverWebhookDelivery
#     reposRemoveAppAccessRestrictions
#     reposRemoveCollaborator
#     reposRemoveStatusCheckContexts
#     reposRemoveStatusCheckProtection
#     reposRemoveTeamAccessRestrictions
#     reposRemoveUserAccessRestrictions
#     reposRenameBranch
#     reposReplaceAllTopics
#     reposRequestPagesBuild
#     reposSetAdminBranchProtection
#     reposSetAppAccessRestrictions
#     reposSetStatusCheckContexts
#     reposSetTeamAccessRestrictions
#     reposSetUserAccessRestrictions
#     reposTestPushWebhook
#     reposTransfer
#     reposUpdate
#     reposUpdateBranchProtection
#     reposUpdateCommitComment
#     reposUpdateDeploymentBranchPolicy
#     reposUpdateInformationAboutPagesSite
#     reposUpdateInvitation
#     reposUpdatePullRequestReviewProtection
#     reposUpdateRelease
#     reposUpdateReleaseAsset
#     reposUpdateRepoRuleset
#     reposUpdateStatusCheckProtection
#     reposUpdateWebhook
#     reposUpdateWebhookConfigForRepo
#     reposUploadReleaseAsset
#     secretScanningGetAlert
#     secretScanningListAlertsForRepo
#     secretScanningListLocationsForAlert
#     secretScanningUpdateAlert
#     securityAdvisoriesCreatePrivateVulnerabilityReport
#     securityAdvisoriesCreateRepositoryAdvisory
#     securityAdvisoriesCreateRepositoryAdvisoryCveRequest
#     securityAdvisoriesGetRepositoryAdvisory
#     securityAdvisoriesListRepositoryAdvisories
#     securityAdvisoriesUpdateRepositoryAdvisory

    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/{runner_id}/labels", http_method="POST")
    def actionsAddCustomLabelsToSelfHostedRunnerForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsAddCustomLabelsToSelfHostedRunnerForRepo(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
    # Summary: Add custom labels to a self-hosted runner for a repository
    # Description: Add custom labels to a self-hosted runner configured in a repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/approve", http_method="POST")
    def actionsApproveWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsApproveWorkflowRun(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/approve
    # Summary: Approve a workflow run for a fork pull request
    # Description: Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/cancel", http_method="POST")
    def actionsCancelWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsCancelWorkflowRun(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/cancel
    # Summary: Cancel a workflow run
    # Description: Cancels a workflow run using its `id`.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/secrets/{secret_name}", http_method="PUT")
    def actionsCreateOrUpdateRepoSecret(self): pass
    # To call: GhSDK.resource("repo").actionsCreateOrUpdateRepoSecret(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}
    # Summary: Create or update a repository secret
    # Description: Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/registration-token", http_method="POST")
    def actionsCreateRegistrationTokenForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsCreateRegistrationTokenForRepo(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runners/registration-token
    # Summary: Create a registration token for a repository
    # Description: Returns a token that you can pass to the `config` script. The token
    #   expires after one hour.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.
    #
    #   Example using registration token:
    #
    #   Configure your self-hosted runner, replacing `TOKEN` with the registration token provided
    #   by this endpoint.
    #
    #   ```config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN```


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/remove-token", http_method="POST")
    def actionsCreateRemoveTokenForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsCreateRemoveTokenForRepo(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runners/remove-token
    # Summary: Create a remove token for a repository
    # Description: Returns a token that you can pass to remove a self-hosted runner from
    #   a repository. The token expires after one hour.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.
    #
    #   Example using remove token:
    #
    #   To remove your self-hosted runner from a repository, replace TOKEN with
    #   the remove token provided by this endpoint.
    #
    #   ```config.sh remove --token TOKEN```


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/variables", http_method="POST")
    def actionsCreateRepoVariable(self): pass
    # To call: GhSDK.resource("repo").actionsCreateRepoVariable(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/variables
    # Summary: Create a repository variable
    # Description: Creates a repository variable that you can reference in a GitHub Actions workflow.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", http_method="POST")
    def actionsCreateWorkflowDispatch(self): pass
    # To call: GhSDK.resource("repo").actionsCreateWorkflowDispatch(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
    # Summary: Create a workflow dispatch event
    # Description: You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    #
    #   You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/caches/{cache_id}", http_method="DELETE")
    def actionsDeleteActionsCacheById(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteActionsCacheById(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/caches/{cache_id}
    # Summary: Delete a GitHub Actions cache for a repository (using a cache ID)
    # Description: Deletes a GitHub Actions cache for a repository, using a cache ID.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #
    #   GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/caches", http_method="DELETE")
    def actionsDeleteActionsCacheByKey(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteActionsCacheByKey(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/caches
    # Summary: Delete GitHub Actions caches for a repository (using a cache key)
    # Description: Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #
    #   GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/artifacts/{artifact_id}", http_method="DELETE")
    def actionsDeleteArtifact(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteArtifact(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
    # Summary: Delete an artifact
    # Description: Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/secrets/{secret_name}", http_method="DELETE")
    def actionsDeleteRepoSecret(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteRepoSecret(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}
    # Summary: Delete a repository secret
    # Description: Deletes a secret in a repository using the secret name.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/variables/{name}", http_method="DELETE")
    def actionsDeleteRepoVariable(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteRepoVariable(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}
    # Summary: Delete a repository variable
    # Description: Deletes a repository variable using the variable name.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/{runner_id}", http_method="DELETE")
    def actionsDeleteSelfHostedRunnerFromRepo(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteSelfHostedRunnerFromRepo(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}
    # Summary: Delete a self-hosted runner from a repository
    # Description: Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}", http_method="DELETE")
    def actionsDeleteWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteWorkflowRun(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}
    # Summary: Delete a workflow run
    # Description: Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
    #   private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
    #   this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/logs", http_method="DELETE")
    def actionsDeleteWorkflowRunLogs(self): pass
    # To call: GhSDK.resource("repo").actionsDeleteWorkflowRunLogs(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/logs
    # Summary: Delete workflow run logs
    # Description: Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable", http_method="PUT")
    def actionsDisableWorkflow(self): pass
    # To call: GhSDK.resource("repo").actionsDisableWorkflow(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
    # Summary: Disable a workflow
    # Description: Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}", http_method="GET")
    def actionsDownloadArtifact(self): pass
    # To call: GhSDK.resource("repo").actionsDownloadArtifact(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
    # Summary: Download an artifact
    # Description: Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
    #   the response header to find the URL for the download. The `:archive_format` must be `zip`.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `actions:read` permission to use this endpoint.
    #
    # Parameters:
    #     archive_format:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/jobs/{job_id}/logs", http_method="GET")
    def actionsDownloadJobLogsForWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsDownloadJobLogsForWorkflowRun(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}/logs
    # Summary: Download job logs for a workflow run
    # Description: Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
    #   for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
    #   use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
    #   have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs", http_method="GET")
    def actionsDownloadWorkflowRunAttemptLogs(self): pass
    # To call: GhSDK.resource("repo").actionsDownloadWorkflowRunAttemptLogs(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs
    # Summary: Download workflow run attempt logs
    # Description: Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
    #   1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
    #   the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/logs", http_method="GET")
    def actionsDownloadWorkflowRunLogs(self): pass
    # To call: GhSDK.resource("repo").actionsDownloadWorkflowRunLogs(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/logs
    # Summary: Download workflow run logs
    # Description: Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
    #   `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
    #   this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
    #   the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable", http_method="PUT")
    def actionsEnableWorkflow(self): pass
    # To call: GhSDK.resource("repo").actionsEnableWorkflow(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
    # Summary: Enable a workflow
    # Description: Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/generate-jitconfig", http_method="POST")
    def actionsGenerateRunnerJitconfigForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsGenerateRunnerJitconfigForRepo(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runners/generate-jitconfig
    # Summary: Create configuration for a just-in-time runner for a repository
    # Description: Generates a configuration that can be passed to the runner application at startup.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/caches", http_method="GET")
    def actionsGetActionsCacheList(self): pass
    # To call: GhSDK.resource("repo").actionsGetActionsCacheList(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/caches
    # Summary: List GitHub Actions caches for a repository
    # Description: Lists the GitHub Actions caches for a repository.
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/cache/usage", http_method="GET")
    def actionsGetActionsCacheUsage(self): pass
    # To call: GhSDK.resource("repo").actionsGetActionsCacheUsage(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/cache/usage
    # Summary: Get GitHub Actions cache usage for a repository
    # Description: Gets GitHub Actions cache usage for a repository.
    #   The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
    #   Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions/selected-actions", http_method="GET")
    def actionsGetAllowedActionsRepository(self): pass
    # To call: GhSDK.resource("repo").actionsGetAllowedActionsRepository(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/permissions/selected-actions
    # Summary: Get allowed actions and reusable workflows for a repository
    # Description: Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/artifacts/{artifact_id}", http_method="GET")
    def actionsGetArtifact(self): pass
    # To call: GhSDK.resource("repo").actionsGetArtifact(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
    # Summary: Get an artifact
    # Description: Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/oidc/customization/sub", http_method="GET")
    def actionsGetCustomOidcSubClaimForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsGetCustomOidcSubClaimForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub
    # Summary: Get the customization template for an OIDC subject claim for a repository
    # Description: Gets the customization template for an OpenID Connect (OIDC) subject claim.
    #   You must authenticate using an access token with the `repo` scope to use this
    #   endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions/workflow", http_method="GET")
    def actionsGetGithubActionsDefaultWorkflowPermissionsRepository(self): pass
    # To call: GhSDK.resource("repo").actionsGetGithubActionsDefaultWorkflowPermissionsRepository(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/permissions/workflow
    # Summary: Get default workflow permissions for a repository
    # Description: Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
    #   as well as if GitHub Actions can submit approving pull request reviews.
    #   For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions", http_method="GET")
    def actionsGetGithubActionsPermissionsRepository(self): pass
    # To call: GhSDK.resource("repo").actionsGetGithubActionsPermissionsRepository(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/permissions
    # Summary: Get GitHub Actions permissions for a repository
    # Description: Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/jobs/{job_id}", http_method="GET")
    def actionsGetJobForWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsGetJobForWorkflowRun(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}
    # Summary: Get a job for a workflow run
    # Description: Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", http_method="GET")
    def actionsGetPendingDeploymentsForRun(self): pass
    # To call: GhSDK.resource("repo").actionsGetPendingDeploymentsForRun(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
    # Summary: Get pending deployments for a workflow run
    # Description: Get all deployment environments for a workflow run that are waiting for protection rules to pass.
    #
    #   Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/secrets/public-key", http_method="GET")
    def actionsGetRepoPublicKey(self): pass
    # To call: GhSDK.resource("repo").actionsGetRepoPublicKey(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key
    # Summary: Get a repository public key
    # Description: Gets your public key, which you need to encrypt secrets. You need to
    #   encrypt a secret before you can create or update secrets.
    #
    #   Anyone with read access to the repository can use this endpoint.
    #   If the repository is private you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/secrets/{secret_name}", http_method="GET")
    def actionsGetRepoSecret(self): pass
    # To call: GhSDK.resource("repo").actionsGetRepoSecret(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}
    # Summary: Get a repository secret
    # Description: Gets a single repository secret without revealing its encrypted value.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/variables/{name}", http_method="GET")
    def actionsGetRepoVariable(self): pass
    # To call: GhSDK.resource("repo").actionsGetRepoVariable(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}
    # Summary: Get a repository variable
    # Description: Gets a specific variable in a repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/approvals", http_method="GET")
    def actionsGetReviewsForRun(self): pass
    # To call: GhSDK.resource("repo").actionsGetReviewsForRun(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/approvals
    # Summary: Get the review history for a workflow run
    # Description: Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/{runner_id}", http_method="GET")
    def actionsGetSelfHostedRunnerForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsGetSelfHostedRunnerForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}
    # Summary: Get a self-hosted runner for a repository
    # Description: Gets a specific self-hosted runner configured in a repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/workflows/{workflow_id}", http_method="GET")
    def actionsGetWorkflow(self): pass
    # To call: GhSDK.resource("repo").actionsGetWorkflow(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}
    # Summary: Get a workflow
    # Description: Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions/access", http_method="GET")
    def actionsGetWorkflowAccessToRepository(self): pass
    # To call: GhSDK.resource("repo").actionsGetWorkflowAccessToRepository(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/permissions/access
    # Summary: Get the level of access for workflows outside of the repository
    # Description: Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    #   This endpoint only applies to private repositories.
    #   For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
    #   repository `administration` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}", http_method="GET")
    def actionsGetWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsGetWorkflowRun(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}
    # Summary: Get a workflow run
    # Description: Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}", http_method="GET")
    def actionsGetWorkflowRunAttempt(self): pass
    # To call: GhSDK.resource("repo").actionsGetWorkflowRunAttempt(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}
    # Summary: Get a workflow run attempt
    # Description: Gets a specific workflow run attempt. Anyone with read access to the repository
    #   can use this endpoint. If the repository is private you must use an access token
    #   with the `repo` scope. GitHub Apps must have the `actions:read` permission to
    #   use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/timing", http_method="GET")
    def actionsGetWorkflowRunUsage(self): pass
    # To call: GhSDK.resource("repo").actionsGetWorkflowRunUsage(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/timing
    # Summary: Get workflow run usage
    # Description: Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    #
    #   Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing", http_method="GET")
    def actionsGetWorkflowUsage(self): pass
    # To call: GhSDK.resource("repo").actionsGetWorkflowUsage(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing
    # Summary: Get workflow usage
    # Description: Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    #
    #   You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/artifacts", http_method="GET")
    def actionsListArtifactsForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsListArtifactsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/artifacts
    # Summary: List artifacts for a repository
    # Description: Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
    #
    # Parameters:
    #     name:
    #       description: Filters artifacts by exact match on their name field.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/jobs", http_method="GET")
    def actionsListJobsForWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsListJobsForWorkflowRun(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/jobs
    # Summary: List jobs for a workflow run
    # Description: Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    #
    # Parameters:
    #     filter:
    #       description: Filters jobs by their `completed_at` timestamp. `latest` returns
    #         jobs from the most recent execution of the workflow run. `all` returns all jobs
    #         for a workflow run, including from old executions of the workflow run.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", http_method="GET")
    def actionsListJobsForWorkflowRunAttempt(self): pass
    # To call: GhSDK.resource("repo").actionsListJobsForWorkflowRunAttempt(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs
    # Summary: List jobs for a workflow run attempt
    # Description: Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/{runner_id}/labels", http_method="GET")
    def actionsListLabelsForSelfHostedRunnerForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsListLabelsForSelfHostedRunnerForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
    # Summary: List labels for a self-hosted runner for a repository
    # Description: Lists all labels for a self-hosted runner configured in a repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/organization-secrets", http_method="GET")
    def actionsListRepoOrganizationSecrets(self): pass
    # To call: GhSDK.resource("repo").actionsListRepoOrganizationSecrets(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets
    # Summary: List repository organization secrets
    # Description: Lists all organization secrets shared with a repository without revealing their encrypted
    #   values.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/organization-variables", http_method="GET")
    def actionsListRepoOrganizationVariables(self): pass
    # To call: GhSDK.resource("repo").actionsListRepoOrganizationVariables(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/organization-variables
    # Summary: List repository organization variables
    # Description: Lists all organiation variables shared with a repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/secrets", http_method="GET")
    def actionsListRepoSecrets(self): pass
    # To call: GhSDK.resource("repo").actionsListRepoSecrets(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/secrets
    # Summary: List repository secrets
    # Description: Lists all secrets available in a repository without revealing their encrypted
    #   values.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/variables", http_method="GET")
    def actionsListRepoVariables(self): pass
    # To call: GhSDK.resource("repo").actionsListRepoVariables(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/variables
    # Summary: List repository variables
    # Description: Lists all repository variables.
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/workflows", http_method="GET")
    def actionsListRepoWorkflows(self): pass
    # To call: GhSDK.resource("repo").actionsListRepoWorkflows(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/workflows
    # Summary: List repository workflows
    # Description: Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/downloads", http_method="GET")
    def actionsListRunnerApplicationsForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsListRunnerApplicationsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runners/downloads
    # Summary: List runner applications for a repository
    # Description: Lists binaries for the runner application that you can download and run.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners", http_method="GET")
    def actionsListSelfHostedRunnersForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsListSelfHostedRunnersForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runners
    # Summary: List self-hosted runners for a repository
    # Description: Lists all self-hosted runners configured in a repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", http_method="GET")
    def actionsListWorkflowRunArtifacts(self): pass
    # To call: GhSDK.resource("repo").actionsListWorkflowRunArtifacts(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
    # Summary: List workflow run artifacts
    # Description: Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", http_method="GET")
    def actionsListWorkflowRuns(self): pass
    # To call: GhSDK.resource("repo").actionsListWorkflowRuns(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
    # Summary: List workflow runs for a workflow
    # Description: List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    #
    #   Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs", http_method="GET")
    def actionsListWorkflowRunsForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsListWorkflowRunsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/actions/runs
    # Summary: List workflow runs for a repository
    # Description: Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
    #
    #   Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/jobs/{job_id}/rerun", http_method="POST")
    def actionsReRunJobForWorkflowRun(self): pass
    # To call: GhSDK.resource("repo").actionsReRunJobForWorkflowRun(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun
    # Summary: Re-run a job from a workflow run
    # Description: Re-run a job and its dependent jobs in a workflow run.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/rerun", http_method="POST")
    def actionsReRunWorkflow(self): pass
    # To call: GhSDK.resource("repo").actionsReRunWorkflow(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/rerun
    # Summary: Re-run a workflow
    # Description: Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs", http_method="POST")
    def actionsReRunWorkflowFailedJobs(self): pass
    # To call: GhSDK.resource("repo").actionsReRunWorkflowFailedJobs(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs
    # Summary: Re-run failed jobs from a workflow run
    # Description: Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/{runner_id}/labels", http_method="DELETE")
    def actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
    # Summary: Remove all custom labels from a self-hosted runner for a repository
    # Description: Remove all custom labels from a self-hosted runner configured in a
    #   repository. Returns the remaining read-only labels from the runner.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}", http_method="DELETE")
    def actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}
    # Summary: Remove a custom label from a self-hosted runner for a repository
    # Description: Remove a custom label from a self-hosted runner configured
    #   in a repository. Returns the remaining labels from the runner.
    #
    #   This endpoint returns a `404 Not Found` status if the custom label is not
    #   present on the runner.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule", http_method="POST")
    def actionsReviewCustomGatesForRun(self): pass
    # To call: GhSDK.resource("repo").actionsReviewCustomGatesForRun(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule
    # Summary: Review custom deployment protection rules for a workflow run
    # Description: Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    #
    #   **Note:** GitHub Apps can only review their own custom deployment protection rules.
    #   To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
    #
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have read and write permission for **Deployments** to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", http_method="POST")
    def actionsReviewPendingDeploymentsForRun(self): pass
    # To call: GhSDK.resource("repo").actionsReviewPendingDeploymentsForRun(...)
    # POST https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
    # Summary: Review pending deployments for a workflow run
    # Description: Approve or reject pending deployments that are waiting on approval by a required reviewer.
    #
    #   Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions/selected-actions", http_method="PUT")
    def actionsSetAllowedActionsRepository(self): pass
    # To call: GhSDK.resource("repo").actionsSetAllowedActionsRepository(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/permissions/selected-actions
    # Summary: Set allowed actions and reusable workflows for a repository
    # Description: Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/runners/{runner_id}/labels", http_method="PUT")
    def actionsSetCustomLabelsForSelfHostedRunnerForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsSetCustomLabelsForSelfHostedRunnerForRepo(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
    # Summary: Set custom labels for a self-hosted runner for a repository
    # Description: Remove all previous custom labels and set the new custom labels for a specific
    #   self-hosted runner configured in a repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `administration` permission for repositories and the `organization_self_hosted_runners` permission for organizations.
    #   Authenticated users must have admin access to repositories or organizations, or the `manage_runners:enterprise` scope for enterprises, to use these endpoints.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/oidc/customization/sub", http_method="PUT")
    def actionsSetCustomOidcSubClaimForRepo(self): pass
    # To call: GhSDK.resource("repo").actionsSetCustomOidcSubClaimForRepo(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub
    # Summary: Set the customization template for an OIDC subject claim for a repository
    # Description: Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
    #   You must authenticate using an access token with the `repo` scope to use this
    #   endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions/workflow", http_method="PUT")
    def actionsSetGithubActionsDefaultWorkflowPermissionsRepository(self): pass
    # To call: GhSDK.resource("repo").actionsSetGithubActionsDefaultWorkflowPermissionsRepository(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/permissions/workflow
    # Summary: Set default workflow permissions for a repository
    # Description: Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
    #   can submit approving pull request reviews.
    #   For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions", http_method="PUT")
    def actionsSetGithubActionsPermissionsRepository(self): pass
    # To call: GhSDK.resource("repo").actionsSetGithubActionsPermissionsRepository(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/permissions
    # Summary: Set GitHub Actions permissions for a repository
    # Description: Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/permissions/access", http_method="PUT")
    def actionsSetWorkflowAccessToRepository(self): pass
    # To call: GhSDK.resource("repo").actionsSetWorkflowAccessToRepository(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/actions/permissions/access
    # Summary: Set the level of access for workflows outside of the repository
    # Description: Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
    #   This endpoint only applies to private repositories.
    #   For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
    #   repository `administration` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/actions/variables/{name}", http_method="PATCH")
    def actionsUpdateRepoVariable(self): pass
    # To call: GhSDK.resource("repo").actionsUpdateRepoVariable(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}
    # Summary: Update a repository variable
    # Description: Updates a repository variable that you can reference in a GitHub Actions workflow.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repos/{owner}/{repo}/subscription", http_method="DELETE")
    def activityDeleteRepoSubscription(self): pass
    # To call: GhSDK.resource("repo").activityDeleteRepoSubscription(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/subscription
    # Summary: Delete a repository subscription
    # Description: This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).


    @GhSDK.resource_method("repos/{owner}/{repo}/subscription", http_method="GET")
    def activityGetRepoSubscription(self): pass
    # To call: GhSDK.resource("repo").activityGetRepoSubscription(...)
    # GET https://api.github.com/repos/{owner}/{repo}/subscription
    # Summary: Get a repository subscription
    # Description: Gets information about whether the authenticated user is subscribed to the repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/events", http_method="GET")
    def activityListRepoEvents(self): pass
    # To call: GhSDK.resource("repo").activityListRepoEvents(...)
    # GET https://api.github.com/repos/{owner}/{repo}/events
    # Summary: List repository events
    # Description: **Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/notifications", http_method="GET")
    def activityListRepoNotificationsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("repo").activityListRepoNotificationsForAuthenticatedUser(...)
    # GET https://api.github.com/repos/{owner}/{repo}/notifications
    # Summary: List repository notifications for the authenticated user
    # Description: Lists all notifications for the current user in the specified repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/stargazers", http_method="GET")
    def activityListStargazersForRepo(self): pass
    # To call: GhSDK.resource("repo").activityListStargazersForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/stargazers
    # Summary: List stargazers
    # Description: Lists the people that have starred the repository.
    #
    #   You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.


    @GhSDK.resource_method("repos/{owner}/{repo}/subscribers", http_method="GET")
    def activityListWatchersForRepo(self): pass
    # To call: GhSDK.resource("repo").activityListWatchersForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/subscribers
    # Summary: List watchers
    # Description: Lists the people watching the specified repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/notifications", http_method="PUT")
    def activityMarkRepoNotificationsAsRead(self): pass
    # To call: GhSDK.resource("repo").activityMarkRepoNotificationsAsRead(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/notifications
    # Summary: Mark repository notifications as read
    # Description: Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.


    @GhSDK.resource_method("repos/{owner}/{repo}/subscription", http_method="PUT")
    def activitySetRepoSubscription(self): pass
    # To call: GhSDK.resource("repo").activitySetRepoSubscription(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/subscription
    # Summary: Set a repository subscription
    # Description: If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.


    @GhSDK.resource_method("repos/{owner}/{repo}/installation", http_method="GET")
    def appsGetRepoInstallation(self): pass
    # To call: GhSDK.resource("repo").appsGetRepoInstallation(...)
    # GET https://api.github.com/repos/{owner}/{repo}/installation
    # Summary: Get a repository installation for the authenticated app
    # Description: Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/check-runs", http_method="POST")
    def checksCreate(self): pass
    # To call: GhSDK.resource("repo").checksCreate(...)
    # POST https://api.github.com/repos/{owner}/{repo}/check-runs
    # Summary: Create a check run
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    #
    #   Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
    #
    #   In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.


    @GhSDK.resource_method("repos/{owner}/{repo}/check-suites", http_method="POST")
    def checksCreateSuite(self): pass
    # To call: GhSDK.resource("repo").checksCreateSuite(...)
    # POST https://api.github.com/repos/{owner}/{repo}/check-suites
    # Summary: Create a check suite
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    #
    #   By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.


    @GhSDK.resource_method("repos/{owner}/{repo}/check-runs/{check_run_id}", http_method="GET")
    def checksGet(self): pass
    # To call: GhSDK.resource("repo").checksGet(...)
    # GET https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}
    # Summary: Get a check run
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    #
    #   Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth apps and authenticated users must have the `repo` scope to get check runs in a private repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/check-suites/{check_suite_id}", http_method="GET")
    def checksGetSuite(self): pass
    # To call: GhSDK.resource("repo").checksGetSuite(...)
    # GET https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}
    # Summary: Get a check suite
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    #
    #   Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth apps and authenticated users must have the `repo` scope to get check suites in a private repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", http_method="GET")
    def checksListAnnotations(self): pass
    # To call: GhSDK.resource("repo").checksListAnnotations(...)
    # GET https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
    # Summary: List check run annotations
    # Description: Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{ref}/check-runs", http_method="GET")
    def checksListForRef(self): pass
    # To call: GhSDK.resource("repo").checksListForRef(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{ref}/check-runs
    # Summary: List check runs for a Git reference
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    #
    #   Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth apps and authenticated users must have the `repo` scope to get check runs in a private repository.
    #
    # Parameters:
    #     app_id:
    #       description: ''
    #       in: query
    #       required: false
    #     filter:
    #       description: Filters check runs by their `completed_at` timestamp. `latest` returns
    #         the most recent check runs.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", http_method="GET")
    def checksListForSuite(self): pass
    # To call: GhSDK.resource("repo").checksListForSuite(...)
    # GET https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
    # Summary: List check runs in a check suite
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    #
    #   Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth apps and authenticated users must have the `repo` scope to get check runs in a private repository.
    #
    # Parameters:
    #     filter:
    #       description: Filters check runs by their `completed_at` timestamp. `latest` returns
    #         the most recent check runs.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{ref}/check-suites", http_method="GET")
    def checksListSuitesForRef(self): pass
    # To call: GhSDK.resource("repo").checksListSuitesForRef(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{ref}/check-suites
    # Summary: List check suites for a Git reference
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
    #
    #   Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth apps and authenticated users must have the `repo` scope to get check suites in a private repository.
    #
    # Parameters:
    #     app_id:
    #       description: Filters check suites by GitHub App `id`.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest", http_method="POST")
    def checksRerequestRun(self): pass
    # To call: GhSDK.resource("repo").checksRerequestRun(...)
    # POST https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest
    # Summary: Rerequest a check run
    # Description: Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    #
    #   To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
    #
    #   For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".


    @GhSDK.resource_method("repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest", http_method="POST")
    def checksRerequestSuite(self): pass
    # To call: GhSDK.resource("repo").checksRerequestSuite(...)
    # POST https://api.github.com/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
    # Summary: Rerequest a check suite
    # Description: Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
    #
    #   To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/check-suites/preferences", http_method="PATCH")
    def checksSetSuitesPreferences(self): pass
    # To call: GhSDK.resource("repo").checksSetSuitesPreferences(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/check-suites/preferences
    # Summary: Update repository preferences for check suites
    # Description: Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.


    @GhSDK.resource_method("repos/{owner}/{repo}/check-runs/{check_run_id}", http_method="PATCH")
    def checksUpdate(self): pass
    # To call: GhSDK.resource("repo").checksUpdate(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/check-runs/{check_run_id}
    # Summary: Update a check run
    # Description: **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
    #
    #   Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", http_method="DELETE")
    def codeScanningDeleteAnalysis(self): pass
    # To call: GhSDK.resource("repo").codeScanningDeleteAnalysis(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
    # Summary: Delete a code scanning analysis from a repository
    # Description: Deletes a specified code scanning analysis from a repository. For
    #   private repositories, you must use an access token with the `repo` scope. For public repositories,
    #   you must use an access token with `public_repo` scope.
    #   GitHub Apps must have the `security_events` write permission to use this endpoint.
    #
    #   You can delete one analysis at a time.
    #   To delete a series of analyses, start with the most recent analysis and work backwards.
    #   Conceptually, the process is similar to the undo function in a text editor.
    #
    #   When you list the analyses for a repository,
    #   one or more will be identified as deletable in the response:
    #
    #   ```
    #   "deletable": true
    #   ```
    #
    #   An analysis is deletable when it's the most recent in a set of analyses.
    #   Typically, a repository will have multiple sets of analyses
    #   for each enabled code scanning tool,
    #   where a set is determined by a unique combination of analysis values:
    #
    #   * `ref`
    #   * `tool`
    #   * `category`
    #
    #   If you attempt to delete an analysis that is not the most recent in a set,
    #   you'll get a 400 response with the message:
    #
    #   ```
    #   Analysis specified is not deletable.
    #   ```
    #
    #   The response from a successful `DELETE` operation provides you with
    #   two alternative URLs for deleting the next analysis in the set:
    #   `next_analysis_url` and `confirm_delete_url`.
    #   Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
    #   in a set. This is a useful option if you want to preserve at least one analysis
    #   for the specified tool in your repository.
    #   Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
    #   When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
    #   in the 200 response is `null`.
    #
    #   As an example of the deletion process,
    #   let's imagine that you added a workflow that configured a particular code scanning tool
    #   to analyze the code in a repository. This tool has added 15 analyses:
    #   10 on the default branch, and another 5 on a topic branch.
    #   You therefore have two separate sets of analyses for this tool.
    #   You've now decided that you want to remove all of the analyses for the tool.
    #   To do this you must make 15 separate deletion requests.
    #   To start, you must find an analysis that's identified as deletable.
    #   Each set of analyses always has one that's identified as deletable.
    #   Having found the deletable analysis for one of the two sets,
    #   delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
    #   Then repeat the process for the second set.
    #   The procedure therefore consists of a nested loop:
    #
    #   **Outer loop**:
    #   * List the analyses for the repository, filtered by tool.
    #   * Parse this list to find a deletable analysis. If found:
    #
    #     **Inner loop**:
    #     * Delete the identified analysis.
    #     * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
    #
    #   The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
    #
    # Parameters:
    #     analysis_id:
    #       description: The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses`
    #         operation.
    #       in: path
    #       required: true
    #     confirm_delete:
    #       description: 'Allow deletion if the specified analysis is the last in a set. If
    #         you attempt to delete the final analysis in a set without setting this parameter
    #         to `true`, you''ll get a 400 response with the message: `Analysis is last of
    #         its type and deletion may result in the loss of historical alert data. Please
    #         specify confirm_delete.`'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", http_method="GET")
    def codeScanningGetAlert(self): pass
    # To call: GhSDK.resource("repo").codeScanningGetAlert(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
    # Summary: Get a code scanning alert
    # Description: Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", http_method="GET")
    def codeScanningGetAnalysis(self): pass
    # To call: GhSDK.resource("repo").codeScanningGetAnalysis(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
    # Summary: Get a code scanning analysis for a repository
    # Description: Gets a specified code scanning analysis for a repository.
    #   You must use an access token with the `security_events` scope to use this endpoint with private repos,
    #   the `public_repo` scope also grants permission to read security events on public repos only.
    #   GitHub Apps must have the `security_events` read permission to use this endpoint.
    #
    #   The default JSON response contains fields that describe the analysis.
    #   This includes the Git reference and commit SHA to which the analysis relates,
    #   the datetime of the analysis, the name of the code scanning tool,
    #   and the number of alerts.
    #
    #   The `rules_count` field in the default response give the number of rules
    #   that were run in the analysis.
    #   For very old analyses this data is not available,
    #   and `0` is returned in this field.
    #
    #   If you use the Accept header `application/sarif+json`,
    #   the response contains the analysis data that was uploaded.
    #   This is formatted as
    #   [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
    #
    # Parameters:
    #     analysis_id:
    #       description: The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses`
    #         operation.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/codeql/databases/{language}", http_method="GET")
    def codeScanningGetCodeqlDatabase(self): pass
    # To call: GhSDK.resource("repo").codeScanningGetCodeqlDatabase(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}
    # Summary: Get a CodeQL database for a repository
    # Description: Gets a CodeQL database for a language in a repository.
    #
    #   By default this endpoint returns JSON metadata about the CodeQL database. To
    #   download the CodeQL database binary content, set the `Accept` header of the request
    #   to [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
    #   your HTTP client is configured to follow redirects or use the `Location` header
    #   to make a second request to get the redirect URL.
    #
    #   For private repositories, you must use an access token with the `security_events` scope.
    #   For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
    #   GitHub Apps must have the `contents` read permission to use this endpoint.
    #
    # Parameters:
    #     language:
    #       description: The language of the CodeQL database.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/default-setup", http_method="GET")
    def codeScanningGetDefaultSetup(self): pass
    # To call: GhSDK.resource("repo").codeScanningGetDefaultSetup(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/default-setup
    # Summary: Get a code scanning default setup configuration
    # Description: Gets a code scanning default setup configuration.
    #   You must use an access token with the `repo` scope to use this endpoint with private repos or the `public_repo`
    #   scope for public repos. GitHub Apps must have the `repo` write permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}", http_method="GET")
    def codeScanningGetSarif(self): pass
    # To call: GhSDK.resource("repo").codeScanningGetSarif(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}
    # Summary: Get information about a SARIF upload
    # Description: Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
    #
    # Parameters:
    #     sarif_id:
    #       description: The SARIF ID obtained after uploading.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", http_method="GET")
    def codeScanningListAlertInstances(self): pass
    # To call: GhSDK.resource("repo").codeScanningListAlertInstances(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances
    # Summary: List instances of a code scanning alert
    # Description: Lists all instances of the specified code scanning alert.
    #   You must use an access token with the `security_events` scope to use this endpoint with private repos,
    #   the `public_repo` scope also grants permission to read security events on public repos only.
    #   GitHub Apps must have the `security_events` read permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/alerts", http_method="GET")
    def codeScanningListAlertsForRepo(self): pass
    # To call: GhSDK.resource("repo").codeScanningListAlertsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts
    # Summary: List code scanning alerts for a repository
    # Description: Lists code scanning alerts.
    #
    #   To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
    #
    #   GitHub Apps must have the `security_events` read
    #   permission to use this endpoint.
    #
    #   The response includes a `most_recent_instance` object.
    #   This provides details of the most recent instance of this alert
    #   for the default branch (or for the specified Git reference if you used `ref` in the request).
    #
    # Parameters:
    #     severity:
    #       description: If specified, only code scanning alerts with this severity will be
    #         returned.
    #       in: query
    #       required: false
    #     sort:
    #       description: The property by which to sort the results.
    #       in: query
    #       required: false
    #     state:
    #       description: If specified, only code scanning alerts with this state will be returned.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/codeql/databases", http_method="GET")
    def codeScanningListCodeqlDatabases(self): pass
    # To call: GhSDK.resource("repo").codeScanningListCodeqlDatabases(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/codeql/databases
    # Summary: List CodeQL databases for a repository
    # Description: Lists the CodeQL databases that are available in a repository.
    #
    #   For private repositories, you must use an access token with the `security_events` scope.
    #   For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
    #   GitHub Apps must have the `contents` read permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/analyses", http_method="GET")
    def codeScanningListRecentAnalyses(self): pass
    # To call: GhSDK.resource("repo").codeScanningListRecentAnalyses(...)
    # GET https://api.github.com/repos/{owner}/{repo}/code-scanning/analyses
    # Summary: List code scanning analyses for a repository
    # Description: Lists the details of all code scanning analyses for a repository,
    #   starting with the most recent.
    #   The response is paginated and you can use the `page` and `per_page` parameters
    #   to list the analyses you're interested in.
    #   By default 30 analyses are listed per page.
    #
    #   The `rules_count` field in the response give the number of rules
    #   that were run in the analysis.
    #   For very old analyses this data is not available,
    #   and `0` is returned in this field.
    #
    #   You must use an access token with the `security_events` scope to use this endpoint with private repos,
    #   the `public_repo` scope also grants permission to read security events on public repos only.
    #   GitHub Apps must have the `security_events` read permission to use this endpoint.
    #
    #   **Deprecation notice**:
    #   The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
    #
    # Parameters:
    #     ref:
    #       description: The Git reference for the analyses you want to list. The `ref` for
    #         a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch
    #         name>`. To reference a pull request use `refs/pull/<number>/merge`.
    #       in: query
    #       required: false
    #     sarif_id:
    #       description: Filter analyses belonging to the same SARIF upload.
    #       in: query
    #       required: false
    #     sort:
    #       description: The property by which to sort the results.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", http_method="PATCH")
    def codeScanningUpdateAlert(self): pass
    # To call: GhSDK.resource("repo").codeScanningUpdateAlert(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
    # Summary: Update a code scanning alert
    # Description: Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/default-setup", http_method="PATCH")
    def codeScanningUpdateDefaultSetup(self): pass
    # To call: GhSDK.resource("repo").codeScanningUpdateDefaultSetup(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/code-scanning/default-setup
    # Summary: Update a code scanning default setup configuration
    # Description: Updates a code scanning default setup configuration.
    #   You must use an access token with the `repo` scope to use this endpoint with private repos or the `public_repo`
    #   scope for public repos. GitHub Apps must have the `repo` write permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/code-scanning/sarifs", http_method="POST")
    def codeScanningUploadSarif(self): pass
    # To call: GhSDK.resource("repo").codeScanningUploadSarif(...)
    # POST https://api.github.com/repos/{owner}/{repo}/code-scanning/sarifs
    # Summary: Upload an analysis as SARIF data
    # Description: Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint. For troubleshooting information, see "[Troubleshooting SARIF uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."
    #
    #   There are two places where you can upload code scanning results.
    #    - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
    #    - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
    #
    #   You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
    #
    #   ```
    #   gzip -c analysis-data.sarif | base64 -w0
    #   ```
    #   <br>
    #   SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
    #   To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries. For more information, see "[SARIF results exceed one or more limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."
    #
    #
    #   | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
    #   |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
    #   | Runs per file                    |         20         |                                                                                  |
    #   | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
    #   | Rules per run                    |       25,000       |                                                                                  |
    #   | Tool extensions per run          |        100         |                                                                                  |
    #   | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
    #   | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
    #   | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
    #
    #
    #   The `202 Accepted` response includes an `id` value.
    #   You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
    #   For more information, see "[Get information about a SARIF upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/secrets/{secret_name}", http_method="PUT")
    def codespacesCreateOrUpdateRepoSecret(self): pass
    # To call: GhSDK.resource("repo").codespacesCreateOrUpdateRepoSecret(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
    # Summary: Create or update a repository secret
    # Description: Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access
    #   token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets`
    #   repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/codespaces", http_method="POST")
    def codespacesCreateWithPrForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("repo").codespacesCreateWithPrForAuthenticatedUser(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/codespaces
    # Summary: Create a codespace from a pull request
    # Description: Creates a codespace owned by the authenticated user for the specified pull request.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces", http_method="POST")
    def codespacesCreateWithRepoForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("repo").codespacesCreateWithRepoForAuthenticatedUser(...)
    # POST https://api.github.com/repos/{owner}/{repo}/codespaces
    # Summary: Create a codespace in a repository
    # Description: Creates a codespace owned by the authenticated user in the specified repository.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/secrets/{secret_name}", http_method="DELETE")
    def codespacesDeleteRepoSecret(self): pass
    # To call: GhSDK.resource("repo").codespacesDeleteRepoSecret(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
    # Summary: Delete a repository secret
    # Description: Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/secrets/public-key", http_method="GET")
    def codespacesGetRepoPublicKey(self): pass
    # To call: GhSDK.resource("repo").codespacesGetRepoPublicKey(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/public-key
    # Summary: Get a repository public key
    # Description: Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/secrets/{secret_name}", http_method="GET")
    def codespacesGetRepoSecret(self): pass
    # To call: GhSDK.resource("repo").codespacesGetRepoSecret(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
    # Summary: Get a repository secret
    # Description: Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/devcontainers", http_method="GET")
    def codespacesListDevcontainersInRepositoryForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("repo").codespacesListDevcontainersInRepositoryForAuthenticatedUser(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codespaces/devcontainers
    # Summary: List devcontainer configurations in a repository for the authenticated user
    # Description: Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
    #   specify launchpoint configurations for codespaces created within the repository.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces", http_method="GET")
    def codespacesListInRepositoryForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("repo").codespacesListInRepositoryForAuthenticatedUser(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codespaces
    # Summary: List codespaces in a repository for the authenticated user
    # Description: Lists the codespaces associated to a specified repository and the authenticated user.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/secrets", http_method="GET")
    def codespacesListRepoSecrets(self): pass
    # To call: GhSDK.resource("repo").codespacesListRepoSecrets(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codespaces/secrets
    # Summary: List repository secrets
    # Description: Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/new", http_method="GET")
    def codespacesPreFlightWithRepoForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("repo").codespacesPreFlightWithRepoForAuthenticatedUser(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codespaces/new
    # Summary: Get default attributes for a codespace
    # Description: Gets the default attributes for codespaces created by the user with the repository.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
    #
    # Parameters:
    #     client_ip:
    #       description: An alternative IP for default location auto-detection, such as when
    #         proxying a request.
    #       in: query
    #       required: false
    #     ref:
    #       description: The branch or commit to check for a default devcontainer path. If
    #         not specified, the default branch will be checked.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/codespaces/machines", http_method="GET")
    def codespacesRepoMachinesForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("repo").codespacesRepoMachinesForAuthenticatedUser(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codespaces/machines
    # Summary: List available machine types for a repository
    # Description: List the machine types available for a given repository based on its configuration.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
    #
    # Parameters:
    #     client_ip:
    #       description: IP for location auto-detection when proxying a request
    #       in: query
    #       required: false
    #     location:
    #       description: The location to check for available machines. Assigned by IP if not
    #         provided.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/secrets/{secret_name}", http_method="PUT")
    def dependabotCreateOrUpdateRepoSecret(self): pass
    # To call: GhSDK.resource("repo").dependabotCreateOrUpdateRepoSecret(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
    # Summary: Create or update a repository secret
    # Description: Creates or updates a repository secret with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access
    #   token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
    #   permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/secrets/{secret_name}", http_method="DELETE")
    def dependabotDeleteRepoSecret(self): pass
    # To call: GhSDK.resource("repo").dependabotDeleteRepoSecret(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
    # Summary: Delete a repository secret
    # Description: Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/alerts/{alert_number}", http_method="GET")
    def dependabotGetAlert(self): pass
    # To call: GhSDK.resource("repo").dependabotGetAlert(...)
    # GET https://api.github.com/repos/{owner}/{repo}/dependabot/alerts/{alert_number}
    # Summary: Get a Dependabot alert
    # Description: You must use an access token with the `security_events` scope to use this endpoint with private repositories.
    #   You can also use tokens with the `public_repo` scope for public repositories only.
    #   GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/secrets/public-key", http_method="GET")
    def dependabotGetRepoPublicKey(self): pass
    # To call: GhSDK.resource("repo").dependabotGetRepoPublicKey(...)
    # GET https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/public-key
    # Summary: Get a repository public key
    # Description: Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/secrets/{secret_name}", http_method="GET")
    def dependabotGetRepoSecret(self): pass
    # To call: GhSDK.resource("repo").dependabotGetRepoSecret(...)
    # GET https://api.github.com/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
    # Summary: Get a repository secret
    # Description: Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/alerts", http_method="GET")
    def dependabotListAlertsForRepo(self): pass
    # To call: GhSDK.resource("repo").dependabotListAlertsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/dependabot/alerts
    # Summary: List Dependabot alerts for a repository
    # Description: You must use an access token with the `security_events` scope to use this endpoint with private repositories.
    #   You can also use tokens with the `public_repo` scope for public repositories only.
    #   GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
    #
    # Parameters:
    #     page:
    #       description: '**Deprecated**. Page number of the results to fetch. Use cursor-based
    #         pagination with `before` or `after` instead.'
    #       in: query
    #       required: false
    #     per_page:
    #       description: The number of results per page (max 100).
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/secrets", http_method="GET")
    def dependabotListRepoSecrets(self): pass
    # To call: GhSDK.resource("repo").dependabotListRepoSecrets(...)
    # GET https://api.github.com/repos/{owner}/{repo}/dependabot/secrets
    # Summary: List repository secrets
    # Description: Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/dependabot/alerts/{alert_number}", http_method="PATCH")
    def dependabotUpdateAlert(self): pass
    # To call: GhSDK.resource("repo").dependabotUpdateAlert(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/dependabot/alerts/{alert_number}
    # Summary: Update a Dependabot alert
    # Description: You must use an access token with the `security_events` scope to use this endpoint with private repositories.
    #   You can also use tokens with the `public_repo` scope for public repositories only.
    #   GitHub Apps must have **Dependabot alerts** write permission to use this endpoint.
    #
    #   To use this endpoint, you must have access to security alerts for the repository. For more information, see "[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."


    @GhSDK.resource_method("repos/{owner}/{repo}/dependency-graph/snapshots", http_method="POST")
    def dependencyGraphCreateRepositorySnapshot(self): pass
    # To call: GhSDK.resource("repo").dependencyGraphCreateRepositorySnapshot(...)
    # POST https://api.github.com/repos/{owner}/{repo}/dependency-graph/snapshots
    # Summary: Create a snapshot of dependencies for a repository
    # Description: Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.


    @GhSDK.resource_method("repos/{owner}/{repo}/dependency-graph/compare/{basehead}", http_method="GET")
    def dependencyGraphDiffRange(self): pass
    # To call: GhSDK.resource("repo").dependencyGraphDiffRange(...)
    # GET https://api.github.com/repos/{owner}/{repo}/dependency-graph/compare/{basehead}
    # Summary: Get a diff of the dependencies between commits
    # Description: Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
    #
    # Parameters:
    #     basehead:
    #       description: The base and head Git revisions to compare. The Git revisions will
    #         be resolved to commit SHAs. Named revisions will be resolved to their corresponding
    #         HEAD commits, and an appropriate merge base will be determined. This parameter
    #         expects the format `{base}...{head}`.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/dependency-graph/sbom", http_method="GET")
    def dependencyGraphExportSbom(self): pass
    # To call: GhSDK.resource("repo").dependencyGraphExportSbom(...)
    # GET https://api.github.com/repos/{owner}/{repo}/dependency-graph/sbom
    # Summary: Export a software bill of materials (SBOM) for a repository.
    # Description: Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.


    @GhSDK.resource_method("repos/{owner}/{repo}/git/blobs", http_method="POST")
    def gitCreateBlob(self): pass
    # To call: GhSDK.resource("repo").gitCreateBlob(...)
    # POST https://api.github.com/repos/{owner}/{repo}/git/blobs
    # Summary: Create a blob


    @GhSDK.resource_method("repos/{owner}/{repo}/git/commits", http_method="POST")
    def gitCreateCommit(self): pass
    # To call: GhSDK.resource("repo").gitCreateCommit(...)
    # POST https://api.github.com/repos/{owner}/{repo}/git/commits
    # Summary: Create a commit
    # Description: Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
    #
    #   **Signature verification object**
    #
    #   The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    #
    #   | Name | Type | Description |
    #   | ---- | ---- | ----------- |
    #   | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    #   | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
    #   | `signature` | `string` | The signature that was extracted from the commit. |
    #   | `payload` | `string` | The value that was signed. |
    #
    #   These are the possible values for `reason` in the `verification` object:
    #
    #   | Value | Description |
    #   | ----- | ----------- |
    #   | `expired_key` | The key that made the signature is expired. |
    #   | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    #   | `gpgverify_error` | There was an error communicating with the signature verification service. |
    #   | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    #   | `unsigned` | The object does not include a signature. |
    #   | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    #   | `no_user` | No user was associated with the `committer` email address in the commit. |
    #   | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    #   | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    #   | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    #   | `malformed_signature` | There was an error parsing the signature. |
    #   | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    #   | `valid` | None of the above errors applied, so the signature is considered to be verified. |


    @GhSDK.resource_method("repos/{owner}/{repo}/git/refs", http_method="POST")
    def gitCreateRef(self): pass
    # To call: GhSDK.resource("repo").gitCreateRef(...)
    # POST https://api.github.com/repos/{owner}/{repo}/git/refs
    # Summary: Create a reference
    # Description: Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.


    @GhSDK.resource_method("repos/{owner}/{repo}/git/tags", http_method="POST")
    def gitCreateTag(self): pass
    # To call: GhSDK.resource("repo").gitCreateTag(...)
    # POST https://api.github.com/repos/{owner}/{repo}/git/tags
    # Summary: Create a tag object
    # Description: Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag reference - this call would be unnecessary.
    #
    #   **Signature verification object**
    #
    #   The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    #
    #   | Name | Type | Description |
    #   | ---- | ---- | ----------- |
    #   | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    #   | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    #   | `signature` | `string` | The signature that was extracted from the commit. |
    #   | `payload` | `string` | The value that was signed. |
    #
    #   These are the possible values for `reason` in the `verification` object:
    #
    #   | Value | Description |
    #   | ----- | ----------- |
    #   | `expired_key` | The key that made the signature is expired. |
    #   | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    #   | `gpgverify_error` | There was an error communicating with the signature verification service. |
    #   | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    #   | `unsigned` | The object does not include a signature. |
    #   | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    #   | `no_user` | No user was associated with the `committer` email address in the commit. |
    #   | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    #   | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    #   | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    #   | `malformed_signature` | There was an error parsing the signature. |
    #   | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    #   | `valid` | None of the above errors applied, so the signature is considered to be verified. |


    @GhSDK.resource_method("repos/{owner}/{repo}/git/trees", http_method="POST")
    def gitCreateTree(self): pass
    # To call: GhSDK.resource("repo").gitCreateTree(...)
    # POST https://api.github.com/repos/{owner}/{repo}/git/trees
    # Summary: Create a tree
    # Description: The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
    #
    #   If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/git/refs#update-a-reference)."
    #
    #   Returns an error if you try to delete a file that does not exist.


    @GhSDK.resource_method("repos/{owner}/{repo}/git/refs/{ref}", http_method="DELETE")
    def gitDeleteRef(self): pass
    # To call: GhSDK.resource("repo").gitDeleteRef(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/git/refs/{ref}
    # Summary: Delete a reference


    @GhSDK.resource_method("repos/{owner}/{repo}/git/blobs/{file_sha}", http_method="GET")
    def gitGetBlob(self): pass
    # To call: GhSDK.resource("repo").gitGetBlob(...)
    # GET https://api.github.com/repos/{owner}/{repo}/git/blobs/{file_sha}
    # Summary: Get a blob
    # Description: The `content` in the response will always be Base64 encoded.
    #
    #   _Note_: This API supports blobs up to 100 megabytes in size.
    #
    # Parameters:
    #     file_sha:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/git/commits/{commit_sha}", http_method="GET")
    def gitGetCommit(self): pass
    # To call: GhSDK.resource("repo").gitGetCommit(...)
    # GET https://api.github.com/repos/{owner}/{repo}/git/commits/{commit_sha}
    # Summary: Get a commit object
    # Description: Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
    #
    #   To get the contents of a commit, see "[Get a commit](/rest/commits/commits#get-a-commit)."
    #
    #   **Signature verification object**
    #
    #   The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    #
    #   | Name | Type | Description |
    #   | ---- | ---- | ----------- |
    #   | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    #   | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
    #   | `signature` | `string` | The signature that was extracted from the commit. |
    #   | `payload` | `string` | The value that was signed. |
    #
    #   These are the possible values for `reason` in the `verification` object:
    #
    #   | Value | Description |
    #   | ----- | ----------- |
    #   | `expired_key` | The key that made the signature is expired. |
    #   | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    #   | `gpgverify_error` | There was an error communicating with the signature verification service. |
    #   | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    #   | `unsigned` | The object does not include a signature. |
    #   | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    #   | `no_user` | No user was associated with the `committer` email address in the commit. |
    #   | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    #   | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    #   | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    #   | `malformed_signature` | There was an error parsing the signature. |
    #   | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    #   | `valid` | None of the above errors applied, so the signature is considered to be verified. |


    @GhSDK.resource_method("repos/{owner}/{repo}/git/ref/{ref}", http_method="GET")
    def gitGetRef(self): pass
    # To call: GhSDK.resource("repo").gitGetRef(...)
    # GET https://api.github.com/repos/{owner}/{repo}/git/ref/{ref}
    # Summary: Get a reference
    # Description: Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
    #
    #   **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".


    @GhSDK.resource_method("repos/{owner}/{repo}/git/tags/{tag_sha}", http_method="GET")
    def gitGetTag(self): pass
    # To call: GhSDK.resource("repo").gitGetTag(...)
    # GET https://api.github.com/repos/{owner}/{repo}/git/tags/{tag_sha}
    # Summary: Get a tag
    # Description: **Signature verification object**
    #
    #   The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    #
    #   | Name | Type | Description |
    #   | ---- | ---- | ----------- |
    #   | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    #   | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    #   | `signature` | `string` | The signature that was extracted from the commit. |
    #   | `payload` | `string` | The value that was signed. |
    #
    #   These are the possible values for `reason` in the `verification` object:
    #
    #   | Value | Description |
    #   | ----- | ----------- |
    #   | `expired_key` | The key that made the signature is expired. |
    #   | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    #   | `gpgverify_error` | There was an error communicating with the signature verification service. |
    #   | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    #   | `unsigned` | The object does not include a signature. |
    #   | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    #   | `no_user` | No user was associated with the `committer` email address in the commit. |
    #   | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    #   | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    #   | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    #   | `malformed_signature` | There was an error parsing the signature. |
    #   | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    #   | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    #
    # Parameters:
    #     tag_sha:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/git/trees/{tree_sha}", http_method="GET")
    def gitGetTree(self): pass
    # To call: GhSDK.resource("repo").gitGetTree(...)
    # GET https://api.github.com/repos/{owner}/{repo}/git/trees/{tree_sha}
    # Summary: Get a tree
    # Description: Returns a single tree using the SHA1 value or ref name for that tree.
    #
    #   If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
    #
    #
    #   **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
    #
    # Parameters:
    #     recursive:
    #       description: 'Setting this parameter to any value returns the objects or subtrees
    #         referenced by the tree specified in `:tree_sha`. For example, setting `recursive`
    #         to any of the following will enable returning objects or subtrees: `0`, `1`,
    #         `"true"`, and `"false"`. Omit this parameter to prevent recursively returning
    #         objects or subtrees.'
    #       in: query
    #       required: false
    #     tree_sha:
    #       description: The SHA1 value or ref (branch or tag) name of the tree.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/git/matching-refs/{ref}", http_method="GET")
    def gitListMatchingRefs(self): pass
    # To call: GhSDK.resource("repo").gitListMatchingRefs(...)
    # GET https://api.github.com/repos/{owner}/{repo}/git/matching-refs/{ref}
    # Summary: List matching references
    # Description: Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
    #
    #   When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
    #
    #   **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    #
    #   If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.


    @GhSDK.resource_method("repos/{owner}/{repo}/git/refs/{ref}", http_method="PATCH")
    def gitUpdateRef(self): pass
    # To call: GhSDK.resource("repo").gitUpdateRef(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/git/refs/{ref}
    # Summary: Update a reference
    #
    # Parameters:
    #     ref:
    #       description: The name of the reference to update (for example, `heads/featureA`).
    #         Can be a branch name (`heads/BRANCH_NAME`) or tag name (`tags/TAG_NAME`). For
    #         more information, see "[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)"
    #         in the Git documentation.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/interaction-limits", http_method="GET")
    def interactionsGetRestrictionsForRepo(self): pass
    # To call: GhSDK.resource("repo").interactionsGetRestrictionsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/interaction-limits
    # Summary: Get interaction restrictions for a repository
    # Description: Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.


    @GhSDK.resource_method("repos/{owner}/{repo}/interaction-limits", http_method="DELETE")
    def interactionsRemoveRestrictionsForRepo(self): pass
    # To call: GhSDK.resource("repo").interactionsRemoveRestrictionsForRepo(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/interaction-limits
    # Summary: Remove interaction restrictions for a repository
    # Description: Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/interaction-limits", http_method="PUT")
    def interactionsSetRestrictionsForRepo(self): pass
    # To call: GhSDK.resource("repo").interactionsSetRestrictionsForRepo(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/interaction-limits
    # Summary: Set interaction restrictions for a repository
    # Description: Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/assignees", http_method="POST")
    def issuesAddAssignees(self): pass
    # To call: GhSDK.resource("repo").issuesAddAssignees(...)
    # POST https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees
    # Summary: Add assignees to an issue
    # Description: Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/labels", http_method="POST")
    def issuesAddLabels(self): pass
    # To call: GhSDK.resource("repo").issuesAddLabels(...)
    # POST https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels
    # Summary: Add labels to an issue
    # Description: Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/assignees/{assignee}", http_method="GET")
    def issuesCheckUserCanBeAssigned(self): pass
    # To call: GhSDK.resource("repo").issuesCheckUserCanBeAssigned(...)
    # GET https://api.github.com/repos/{owner}/{repo}/assignees/{assignee}
    # Summary: Check if a user can be assigned
    # Description: Checks if a user has permission to be assigned to an issue in this repository.
    #
    #   If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
    #
    #   Otherwise a `404` status code is returned.
    #
    # Parameters:
    #     assignee:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}", http_method="GET")
    def issuesCheckUserCanBeAssignedToIssue(self): pass
    # To call: GhSDK.resource("repo").issuesCheckUserCanBeAssignedToIssue(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}
    # Summary: Check if a user can be assigned to a issue
    # Description: Checks if a user has permission to be assigned to a specific issue.
    #
    #   If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
    #
    #   Otherwise a `404` status code is returned.
    #
    # Parameters:
    #     assignee:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/issues", http_method="POST")
    def issuesCreate(self): pass
    # To call: GhSDK.resource("repo").issuesCreate(...)
    # POST https://api.github.com/repos/{owner}/{repo}/issues
    # Summary: Create an issue
    # Description: Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/comments", http_method="POST")
    def issuesCreateComment(self): pass
    # To call: GhSDK.resource("repo").issuesCreateComment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/comments
    # Summary: Create an issue comment
    # Description:
    #   You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
    #   Creating content too quickly using this endpoint may result in secondary rate limiting.
    #   See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
    #   and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
    #   for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/labels", http_method="POST")
    def issuesCreateLabel(self): pass
    # To call: GhSDK.resource("repo").issuesCreateLabel(...)
    # POST https://api.github.com/repos/{owner}/{repo}/labels
    # Summary: Create a label
    # Description: Creates a label for the specified repository with the given name and color. The name and color parameters are required. The color must be a valid [hexadecimal color code](http://www.color-hex.com/).


    @GhSDK.resource_method("repos/{owner}/{repo}/milestones", http_method="POST")
    def issuesCreateMilestone(self): pass
    # To call: GhSDK.resource("repo").issuesCreateMilestone(...)
    # POST https://api.github.com/repos/{owner}/{repo}/milestones
    # Summary: Create a milestone
    # Description: Creates a milestone.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/comments/{comment_id}", http_method="DELETE")
    def issuesDeleteComment(self): pass
    # To call: GhSDK.resource("repo").issuesDeleteComment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}
    # Summary: Delete an issue comment
    # Description: You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.


    @GhSDK.resource_method("repos/{owner}/{repo}/labels/{name}", http_method="DELETE")
    def issuesDeleteLabel(self): pass
    # To call: GhSDK.resource("repo").issuesDeleteLabel(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/labels/{name}
    # Summary: Delete a label
    # Description: Deletes a label using the given label name.
    #
    # Parameters:
    #     name:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/milestones/{milestone_number}", http_method="DELETE")
    def issuesDeleteMilestone(self): pass
    # To call: GhSDK.resource("repo").issuesDeleteMilestone(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}
    # Summary: Delete a milestone
    # Description: Deletes a milestone using the given milestone number.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}", http_method="GET")
    def issuesGet(self): pass
    # To call: GhSDK.resource("repo").issuesGet(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}
    # Summary: Get an issue
    # Description: The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
    #   [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    #   the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    #   returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    #   access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    #   to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    #
    #   **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    #   reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    #   the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    #   request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/comments/{comment_id}", http_method="GET")
    def issuesGetComment(self): pass
    # To call: GhSDK.resource("repo").issuesGetComment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}
    # Summary: Get an issue comment
    # Description: You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/events/{event_id}", http_method="GET")
    def issuesGetEvent(self): pass
    # To call: GhSDK.resource("repo").issuesGetEvent(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/events/{event_id}
    # Summary: Get an issue event
    # Description: Gets a single event by the event id.
    #
    # Parameters:
    #     event_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/labels/{name}", http_method="GET")
    def issuesGetLabel(self): pass
    # To call: GhSDK.resource("repo").issuesGetLabel(...)
    # GET https://api.github.com/repos/{owner}/{repo}/labels/{name}
    # Summary: Get a label
    # Description: Gets a label using the given name.
    #
    # Parameters:
    #     name:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/milestones/{milestone_number}", http_method="GET")
    def issuesGetMilestone(self): pass
    # To call: GhSDK.resource("repo").issuesGetMilestone(...)
    # GET https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}
    # Summary: Get a milestone
    # Description: Gets a milestone using the given milestone number.


    @GhSDK.resource_method("repos/{owner}/{repo}/assignees", http_method="GET")
    def issuesListAssignees(self): pass
    # To call: GhSDK.resource("repo").issuesListAssignees(...)
    # GET https://api.github.com/repos/{owner}/{repo}/assignees
    # Summary: List assignees
    # Description: Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/comments", http_method="GET")
    def issuesListComments(self): pass
    # To call: GhSDK.resource("repo").issuesListComments(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/comments
    # Summary: List issue comments
    # Description: You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
    #
    #   Issue comments are ordered by ascending ID.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/comments", http_method="GET")
    def issuesListCommentsForRepo(self): pass
    # To call: GhSDK.resource("repo").issuesListCommentsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/comments
    # Summary: List issue comments for a repository
    # Description: You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
    #
    #   By default, issue comments are ordered by ascending ID.
    #
    # Parameters:
    #     direction:
    #       description: Either `asc` or `desc`. Ignored without the `sort` parameter.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/events", http_method="GET")
    def issuesListEvents(self): pass
    # To call: GhSDK.resource("repo").issuesListEvents(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/events
    # Summary: List issue events
    # Description: Lists all events for an issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/events", http_method="GET")
    def issuesListEventsForRepo(self): pass
    # To call: GhSDK.resource("repo").issuesListEventsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/events
    # Summary: List issue events for a repository
    # Description: Lists events for a repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/timeline", http_method="GET")
    def issuesListEventsForTimeline(self): pass
    # To call: GhSDK.resource("repo").issuesListEventsForTimeline(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/timeline
    # Summary: List timeline events for an issue
    # Description: List all timeline events for an issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues", http_method="GET")
    def issuesListForRepo(self): pass
    # To call: GhSDK.resource("repo").issuesListForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues
    # Summary: List repository issues
    # Description: List issues in a repository. Only open issues will be listed.
    #
    #   **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    #   reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    #   the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    #   request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    #
    # Parameters:
    #     assignee:
    #       description: Can be the name of a user. Pass in `none` for issues with no assigned
    #         user, and `*` for issues assigned to any user.
    #       in: query
    #       required: false
    #     creator:
    #       description: The user that created the issue.
    #       in: query
    #       required: false
    #     mentioned:
    #       description: A user that's mentioned in the issue.
    #       in: query
    #       required: false
    #     milestone:
    #       description: If an `integer` is passed, it should refer to a milestone by its
    #         `number` field. If the string `*` is passed, issues with any milestone are accepted.
    #         If the string `none` is passed, issues without milestones are returned.
    #       in: query
    #       required: false
    #     sort:
    #       description: What to sort results by.
    #       in: query
    #       required: false
    #     state:
    #       description: Indicates the state of the issues to return.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/milestones/{milestone_number}/labels", http_method="GET")
    def issuesListLabelsForMilestone(self): pass
    # To call: GhSDK.resource("repo").issuesListLabelsForMilestone(...)
    # GET https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}/labels
    # Summary: List labels for issues in a milestone
    # Description: Lists labels for issues in a milestone.


    @GhSDK.resource_method("repos/{owner}/{repo}/labels", http_method="GET")
    def issuesListLabelsForRepo(self): pass
    # To call: GhSDK.resource("repo").issuesListLabelsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/labels
    # Summary: List labels for a repository
    # Description: Lists all labels for a repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/labels", http_method="GET")
    def issuesListLabelsOnIssue(self): pass
    # To call: GhSDK.resource("repo").issuesListLabelsOnIssue(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels
    # Summary: List labels for an issue
    # Description: Lists all labels for an issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/milestones", http_method="GET")
    def issuesListMilestones(self): pass
    # To call: GhSDK.resource("repo").issuesListMilestones(...)
    # GET https://api.github.com/repos/{owner}/{repo}/milestones
    # Summary: List milestones
    # Description: Lists milestones for a repository.
    #
    # Parameters:
    #     direction:
    #       description: The direction of the sort. Either `asc` or `desc`.
    #       in: query
    #       required: false
    #     sort:
    #       description: What to sort results by. Either `due_on` or `completeness`.
    #       in: query
    #       required: false
    #     state:
    #       description: The state of the milestone. Either `open`, `closed`, or `all`.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/lock", http_method="PUT")
    def issuesLock(self): pass
    # To call: GhSDK.resource("repo").issuesLock(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/lock
    # Summary: Lock an issue
    # Description: Users with push access can lock an issue or pull request's conversation.
    #
    #   Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/labels", http_method="DELETE")
    def issuesRemoveAllLabels(self): pass
    # To call: GhSDK.resource("repo").issuesRemoveAllLabels(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels
    # Summary: Remove all labels from an issue
    # Description: Removes all labels from an issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/assignees", http_method="DELETE")
    def issuesRemoveAssignees(self): pass
    # To call: GhSDK.resource("repo").issuesRemoveAssignees(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/assignees
    # Summary: Remove assignees from an issue
    # Description: Removes one or more assignees from an issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/labels/{name}", http_method="DELETE")
    def issuesRemoveLabel(self): pass
    # To call: GhSDK.resource("repo").issuesRemoveLabel(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
    # Summary: Remove a label from an issue
    # Description: Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
    #
    # Parameters:
    #     name:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/labels", http_method="PUT")
    def issuesSetLabels(self): pass
    # To call: GhSDK.resource("repo").issuesSetLabels(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/labels
    # Summary: Set labels for an issue
    # Description: Removes any previous labels and sets the new labels for an issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/lock", http_method="DELETE")
    def issuesUnlock(self): pass
    # To call: GhSDK.resource("repo").issuesUnlock(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/lock
    # Summary: Unlock an issue
    # Description: Users with push access can unlock an issue's conversation.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}", http_method="PATCH")
    def issuesUpdate(self): pass
    # To call: GhSDK.resource("repo").issuesUpdate(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}
    # Summary: Update an issue
    # Description: Issue owners and users with push access can edit an issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/comments/{comment_id}", http_method="PATCH")
    def issuesUpdateComment(self): pass
    # To call: GhSDK.resource("repo").issuesUpdateComment(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}
    # Summary: Update an issue comment
    # Description: You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.


    @GhSDK.resource_method("repos/{owner}/{repo}/labels/{name}", http_method="PATCH")
    def issuesUpdateLabel(self): pass
    # To call: GhSDK.resource("repo").issuesUpdateLabel(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/labels/{name}
    # Summary: Update a label
    # Description: Updates a label using the given label name.
    #
    # Parameters:
    #     name:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/milestones/{milestone_number}", http_method="PATCH")
    def issuesUpdateMilestone(self): pass
    # To call: GhSDK.resource("repo").issuesUpdateMilestone(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/milestones/{milestone_number}
    # Summary: Update a milestone


    @GhSDK.resource_method("repos/{owner}/{repo}/license", http_method="GET")
    def licensesGetForRepo(self): pass
    # To call: GhSDK.resource("repo").licensesGetForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/license
    # Summary: Get the license for a repository
    # Description: This method returns the contents of the repository's license file, if one is detected.
    #
    #   Similar to [Get repository content](https://docs.github.com/rest/repos/contents#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.


    @GhSDK.resource_method("repos/{owner}/{repo}/import", http_method="DELETE")
    def migrationsCancelImport(self): pass
    # To call: GhSDK.resource("repo").migrationsCancelImport(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/import
    # Summary: Cancel an import
    # Description: Stop an import for a repository.
    #
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
    #   on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
    #   these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/import/authors", http_method="GET")
    def migrationsGetCommitAuthors(self): pass
    # To call: GhSDK.resource("repo").migrationsGetCommitAuthors(...)
    # GET https://api.github.com/repos/{owner}/{repo}/import/authors
    # Summary: Get commit authors
    # Description: Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
    #
    #   This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
    #
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
    #   on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
    #   these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.


    @GhSDK.resource_method("repos/{owner}/{repo}/import", http_method="GET")
    def migrationsGetImportStatus(self): pass
    # To call: GhSDK.resource("repo").migrationsGetImportStatus(...)
    # GET https://api.github.com/repos/{owner}/{repo}/import
    # Summary: Get an import status
    # Description: View the progress of an import.
    #
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
    #   on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
    #   these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
    #
    #   **Import status**
    #
    #   This section includes details about the possible values of the `status` field of the Import Progress response.
    #
    #   An import that does not have errors will progress through these steps:
    #
    #   *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
    #   *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
    #   *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
    #   *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
    #   *   `complete` - the import is complete, and the repository is ready on GitHub.
    #
    #   If there are problems, you will see one of these in the `status` field:
    #
    #   *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    #   *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
    #   *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    #   *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
    #   *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
    #
    #   **The project_choices field**
    #
    #   When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
    #
    #   **Git LFS related fields**
    #
    #   This section includes details about Git LFS related fields that may be present in the Import Progress response.
    #
    #   *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
    #   *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
    #   *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
    #   *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.


    @GhSDK.resource_method("repos/{owner}/{repo}/import/large_files", http_method="GET")
    def migrationsGetLargeFiles(self): pass
    # To call: GhSDK.resource("repo").migrationsGetLargeFiles(...)
    # GET https://api.github.com/repos/{owner}/{repo}/import/large_files
    # Summary: Get large files
    # Description: List files larger than 100MB found during the import
    #
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
    #   on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
    #   these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/import/authors/{author_id}", http_method="PATCH")
    def migrationsMapCommitAuthor(self): pass
    # To call: GhSDK.resource("repo").migrationsMapCommitAuthor(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/import/authors/{author_id}
    # Summary: Map a commit author
    # Description: Update an author's identity for the import. Your application can continue updating authors any time before you push
    #   new commits to the repository.
    #
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
    #   on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
    #   these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
    #
    #
    # Parameters:
    #     author_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/import/lfs", http_method="PATCH")
    def migrationsSetLfsPreference(self): pass
    # To call: GhSDK.resource("repo").migrationsSetLfsPreference(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/import/lfs
    # Summary: Update Git LFS preference
    # Description: You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
    #   is powered by [Git LFS](https://git-lfs.com).
    #
    #   You can learn more about our LFS feature and working with large files [on our help
    #   site](https://docs.github.com/repositories/working-with-files/managing-large-files).
    #
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
    #   on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
    #   these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/import", http_method="PUT")
    def migrationsStartImport(self): pass
    # To call: GhSDK.resource("repo").migrationsStartImport(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/import
    # Summary: Start an import
    # Description: Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response.
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.


    @GhSDK.resource_method("repos/{owner}/{repo}/import", http_method="PATCH")
    def migrationsUpdateImport(self): pass
    # To call: GhSDK.resource("repo").migrationsUpdateImport(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/import
    # Summary: Update an import
    # Description: An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
    #   request. If no parameters are provided, the import will be restarted.
    #
    #   Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
    #   have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
    #   You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
    #
    #   **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
    #   on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
    #   these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.


    @GhSDK.resource_method("repos/{owner}/{repo}/projects", http_method="POST")
    def projectsCreateForRepo(self): pass
    # To call: GhSDK.resource("repo").projectsCreateForRepo(...)
    # POST https://api.github.com/repos/{owner}/{repo}/projects
    # Summary: Create a repository project
    # Description: Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.


    @GhSDK.resource_method("repos/{owner}/{repo}/projects", http_method="GET")
    def projectsListForRepo(self): pass
    # To call: GhSDK.resource("repo").projectsListForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/projects
    # Summary: List repository projects
    # Description: Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
    #
    # Parameters:
    #     state:
    #       description: Indicates the state of the projects to return.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/merge", http_method="GET")
    def pullsCheckIfMerged(self): pass
    # To call: GhSDK.resource("repo").pullsCheckIfMerged(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/merge
    # Summary: Check if a pull request has been merged
    # Description: Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not the pull request has been merged; the response body is empty.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls", http_method="POST")
    def pullsCreate(self): pass
    # To call: GhSDK.resource("repo").pullsCreate(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls
    # Summary: Create a pull request
    # Description: Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies", http_method="POST")
    def pullsCreateReplyForReviewComment(self): pass
    # To call: GhSDK.resource("repo").pullsCreateReplyForReviewComment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
    # Summary: Create a reply for a review comment
    # Description: Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews", http_method="POST")
    def pullsCreateReview(self): pass
    # To call: GhSDK.resource("repo").pullsCreateReview(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews
    # Summary: Create a review for a pull request
    # Description: This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    #
    #   Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
    #
    #   **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
    #
    #   The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/comments", http_method="POST")
    def pullsCreateReviewComment(self): pass
    # To call: GhSDK.resource("repo").pullsCreateReviewComment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments
    # Summary: Create a review comment for a pull request
    # Description:
    #   Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
    #
    #   The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
    #
    #   **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", http_method="DELETE")
    def pullsDeletePendingReview(self): pass
    # To call: GhSDK.resource("repo").pullsDeletePendingReview(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
    # Summary: Delete a pending review for a pull request
    # Description: Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/comments/{comment_id}", http_method="DELETE")
    def pullsDeleteReviewComment(self): pass
    # To call: GhSDK.resource("repo").pullsDeleteReviewComment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}
    # Summary: Delete a review comment for a pull request
    # Description: Deletes a review comment.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals", http_method="PUT")
    def pullsDismissReview(self): pass
    # To call: GhSDK.resource("repo").pullsDismissReview(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
    # Summary: Dismiss a review for a pull request
    # Description: **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/branches/branch-protection), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}", http_method="GET")
    def pullsGet(self): pass
    # To call: GhSDK.resource("repo").pullsGet(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}
    # Summary: Get a pull request
    # Description: Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Lists details of a pull request by providing its number.
    #
    #   When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    #
    #   The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    #
    #   The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    #
    #   *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    #   *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    #   *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    #
    #   Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", http_method="GET")
    def pullsGetReview(self): pass
    # To call: GhSDK.resource("repo").pullsGetReview(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
    # Summary: Get a review for a pull request
    # Description: Retrieves a pull request review by its ID.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/comments/{comment_id}", http_method="GET")
    def pullsGetReviewComment(self): pass
    # To call: GhSDK.resource("repo").pullsGetReviewComment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}
    # Summary: Get a review comment for a pull request
    # Description: Provides details for a review comment.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls", http_method="GET")
    def pullsList(self): pass
    # To call: GhSDK.resource("repo").pullsList(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls
    # Summary: List pull requests
    # Description: Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    # Parameters:
    #     base:
    #       description: 'Filter pulls by base branch name. Example: `gh-pages`.'
    #       in: query
    #       required: false
    #     direction:
    #       description: 'The direction of the sort. Default: `desc` when sort is `created`
    #         or sort is not specified, otherwise `asc`.'
    #       in: query
    #       required: false
    #     head:
    #       description: 'Filter pulls by head user or head organization and branch name in
    #         the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format`
    #         or `octocat:test-branch`.'
    #       in: query
    #       required: false
    #     sort:
    #       description: What to sort results by. `popularity` will sort by the number of
    #         comments. `long-running` will sort by date created and will limit the results
    #         to pull requests that have been open for more than a month and have had activity
    #         within the past month.
    #       in: query
    #       required: false
    #     state:
    #       description: Either `open`, `closed`, or `all` to filter by state.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", http_method="GET")
    def pullsListCommentsForReview(self): pass
    # To call: GhSDK.resource("repo").pullsListCommentsForReview(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
    # Summary: List comments for a pull request review
    # Description: List comments for a specific pull request review.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/commits", http_method="GET")
    def pullsListCommits(self): pass
    # To call: GhSDK.resource("repo").pullsListCommits(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/commits
    # Summary: List commits on a pull request
    # Description: Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits) endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/files", http_method="GET")
    def pullsListFiles(self): pass
    # To call: GhSDK.resource("repo").pullsListFiles(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/files
    # Summary: List pull requests files
    # Description: **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", http_method="GET")
    def pullsListRequestedReviewers(self): pass
    # To call: GhSDK.resource("repo").pullsListRequestedReviewers(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
    # Summary: Get all requested reviewers for a pull request
    # Description: Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/comments", http_method="GET")
    def pullsListReviewComments(self): pass
    # To call: GhSDK.resource("repo").pullsListReviewComments(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/comments
    # Summary: List review comments on a pull request
    # Description: Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
    #
    # Parameters:
    #     direction:
    #       description: The direction to sort results. Ignored without `sort` parameter.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/comments", http_method="GET")
    def pullsListReviewCommentsForRepo(self): pass
    # To call: GhSDK.resource("repo").pullsListReviewCommentsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/comments
    # Summary: List review comments in a repository
    # Description: Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
    #
    # Parameters:
    #     direction:
    #       description: The direction to sort results. Ignored without `sort` parameter.
    #       in: query
    #       required: false
    #     sort:
    #       description: ''
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews", http_method="GET")
    def pullsListReviews(self): pass
    # To call: GhSDK.resource("repo").pullsListReviews(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews
    # Summary: List reviews for a pull request
    # Description: The list of reviews returns in chronological order.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/merge", http_method="PUT")
    def pullsMerge(self): pass
    # To call: GhSDK.resource("repo").pullsMerge(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/merge
    # Summary: Merge a pull request
    # Description: Merges a pull request into the base branch.
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", http_method="DELETE")
    def pullsRemoveRequestedReviewers(self): pass
    # To call: GhSDK.resource("repo").pullsRemoveRequestedReviewers(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
    # Summary: Remove requested reviewers from a pull request
    # Description: Removes review requests from a pull request for a given set of users and/or teams.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", http_method="POST")
    def pullsRequestReviewers(self): pass
    # To call: GhSDK.resource("repo").pullsRequestReviewers(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
    # Summary: Request reviewers for a pull request
    # Description: Requests reviews for a pull request from a given set of users and/or teams.
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events", http_method="POST")
    def pullsSubmitReview(self): pass
    # To call: GhSDK.resource("repo").pullsSubmitReview(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
    # Summary: Submit a review for a pull request
    # Description: Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}", http_method="PATCH")
    def pullsUpdate(self): pass
    # To call: GhSDK.resource("repo").pullsUpdate(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}
    # Summary: Update a pull request
    # Description: Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/update-branch", http_method="PUT")
    def pullsUpdateBranch(self): pass
    # To call: GhSDK.resource("repo").pullsUpdateBranch(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/update-branch
    # Summary: Update a pull request branch
    # Description: Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", http_method="PUT")
    def pullsUpdateReview(self): pass
    # To call: GhSDK.resource("repo").pullsUpdateReview(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
    # Summary: Update a review for a pull request
    # Description: Update the review summary comment with new text.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/comments/{comment_id}", http_method="PATCH")
    def pullsUpdateReviewComment(self): pass
    # To call: GhSDK.resource("repo").pullsUpdateReviewComment(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}
    # Summary: Update a review comment for a pull request
    # Description: Enables you to edit a review comment.


    @GhSDK.resource_method("repos/{owner}/{repo}/comments/{comment_id}/reactions", http_method="POST")
    def reactionsCreateForCommitComment(self): pass
    # To call: GhSDK.resource("repo").reactionsCreateForCommitComment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions
    # Summary: Create reaction for a commit comment
    # Description: Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/reactions", http_method="POST")
    def reactionsCreateForIssue(self): pass
    # To call: GhSDK.resource("repo").reactionsCreateForIssue(...)
    # POST https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions
    # Summary: Create reaction for an issue
    # Description: Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200` status means that you already added the reaction type to this issue.


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", http_method="POST")
    def reactionsCreateForIssueComment(self): pass
    # To call: GhSDK.resource("repo").reactionsCreateForIssueComment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
    # Summary: Create reaction for an issue comment
    # Description: Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", http_method="POST")
    def reactionsCreateForPullRequestReviewComment(self): pass
    # To call: GhSDK.resource("repo").reactionsCreateForPullRequestReviewComment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
    # Summary: Create reaction for a pull request review comment
    # Description: Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}/reactions", http_method="POST")
    def reactionsCreateForRelease(self): pass
    # To call: GhSDK.resource("repo").reactionsCreateForRelease(...)
    # POST https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/reactions
    # Summary: Create reaction for a release
    # Description: Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a `Status: 200 OK` means that you already added the reaction type to this release.


    @GhSDK.resource_method("repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}", http_method="DELETE")
    def reactionsDeleteForCommitComment(self): pass
    # To call: GhSDK.resource("repo").reactionsDeleteForCommitComment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
    # Summary: Delete a commit comment reaction
    # Description: **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
    #
    #   Delete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}", http_method="DELETE")
    def reactionsDeleteForIssue(self): pass
    # To call: GhSDK.resource("repo").reactionsDeleteForIssue(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
    # Summary: Delete an issue reaction
    # Description: **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
    #
    #   Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}", http_method="DELETE")
    def reactionsDeleteForIssueComment(self): pass
    # To call: GhSDK.resource("repo").reactionsDeleteForIssueComment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
    # Summary: Delete an issue comment reaction
    # Description: **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
    #
    #   Delete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}", http_method="DELETE")
    def reactionsDeleteForPullRequestComment(self): pass
    # To call: GhSDK.resource("repo").reactionsDeleteForPullRequestComment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
    # Summary: Delete a pull request comment reaction
    # Description: **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
    #
    #   Delete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}", http_method="DELETE")
    def reactionsDeleteForRelease(self): pass
    # To call: GhSDK.resource("repo").reactionsDeleteForRelease(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}
    # Summary: Delete a release reaction
    # Description: **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
    #
    #   Delete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).


    @GhSDK.resource_method("repos/{owner}/{repo}/comments/{comment_id}/reactions", http_method="GET")
    def reactionsListForCommitComment(self): pass
    # To call: GhSDK.resource("repo").reactionsListForCommitComment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}/reactions
    # Summary: List reactions for a commit comment
    # Description: List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to a commit comment.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/{issue_number}/reactions", http_method="GET")
    def reactionsListForIssue(self): pass
    # To call: GhSDK.resource("repo").reactionsListForIssue(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}/reactions
    # Summary: List reactions for an issue
    # Description: List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to an issue.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", http_method="GET")
    def reactionsListForIssueComment(self): pass
    # To call: GhSDK.resource("repo").reactionsListForIssueComment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
    # Summary: List reactions for an issue comment
    # Description: List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to an issue comment.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", http_method="GET")
    def reactionsListForPullRequestReviewComment(self): pass
    # To call: GhSDK.resource("repo").reactionsListForPullRequestReviewComment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
    # Summary: List reactions for a pull request review comment
    # Description: List the reactions to a [pull request review comment](https://docs.github.com/pulls/comments#get-a-review-comment-for-a-pull-request).
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to a pull request review comment.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}/reactions", http_method="GET")
    def reactionsListForRelease(self): pass
    # To call: GhSDK.resource("repo").reactionsListForRelease(...)
    # GET https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/reactions
    # Summary: List reactions for a release
    # Description: List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to a release.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", http_method="POST")
    def reposAddAppAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposAddAppAccessRestrictions(...)
    # POST https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    # Summary: Add app access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/collaborators/{username}", http_method="PUT")
    def reposAddCollaborator(self): pass
    # To call: GhSDK.resource("repo").reposAddCollaborator(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/collaborators/{username}
    # Summary: Add a repository collaborator
    # Description: This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
    #
    #   Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
    #
    #   For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
    #
    #   ```
    #   Cannot assign {member} permission of {role name}
    #   ```
    #
    #   Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
    #
    #   The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).
    #
    #   **Updating an existing collaborator's permission level**
    #
    #   The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
    #
    #   **Rate limits**
    #
    #   You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", http_method="POST")
    def reposAddStatusCheckContexts(self): pass
    # To call: GhSDK.resource("repo").reposAddStatusCheckContexts(...)
    # POST https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    # Summary: Add status check contexts
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", http_method="POST")
    def reposAddTeamAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposAddTeamAccessRestrictions(...)
    # POST https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    # Summary: Add team access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Grants the specified teams push access for this branch. You can also give push access to child teams.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", http_method="POST")
    def reposAddUserAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposAddUserAccessRestrictions(...)
    # POST https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    # Summary: Add user access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Grants the specified people push access for this branch.
    #
    #   | Type    | Description                                                                                                                   |
    #   | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    #   | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |


    @GhSDK.resource_method("repos/{owner}/{repo}/automated-security-fixes", http_method="GET")
    def reposCheckAutomatedSecurityFixes(self): pass
    # To call: GhSDK.resource("repo").reposCheckAutomatedSecurityFixes(...)
    # GET https://api.github.com/repos/{owner}/{repo}/automated-security-fixes
    # Summary: Check if automated security fixes are enabled for a repository
    # Description: Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".


    @GhSDK.resource_method("repos/{owner}/{repo}/collaborators/{username}", http_method="GET")
    def reposCheckCollaborator(self): pass
    # To call: GhSDK.resource("repo").reposCheckCollaborator(...)
    # GET https://api.github.com/repos/{owner}/{repo}/collaborators/{username}
    # Summary: Check if a user is a repository collaborator
    # Description: For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    #
    #   Team members will include the members of child teams.
    #
    #   You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
    #   endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
    #   endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/vulnerability-alerts", http_method="GET")
    def reposCheckVulnerabilityAlerts(self): pass
    # To call: GhSDK.resource("repo").reposCheckVulnerabilityAlerts(...)
    # GET https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts
    # Summary: Check if vulnerability alerts are enabled for a repository
    # Description: Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".


    @GhSDK.resource_method("repos/{owner}/{repo}/codeowners/errors", http_method="GET")
    def reposCodeownersErrors(self): pass
    # To call: GhSDK.resource("repo").reposCodeownersErrors(...)
    # GET https://api.github.com/repos/{owner}/{repo}/codeowners/errors
    # Summary: List CODEOWNERS errors
    # Description: List any syntax errors that are detected in the CODEOWNERS
    #   file.
    #
    #   For more information about the correct CODEOWNERS syntax,
    #   see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
    #
    # Parameters:
    #     ref:
    #       description: 'A branch, tag or commit name used to determine which version of
    #         the CODEOWNERS file to use. Default: the repository''s default branch (e.g.
    #         `main`)'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/compare/{basehead}", http_method="GET")
    def reposCompareCommits(self): pass
    # To call: GhSDK.resource("repo").reposCompareCommits(...)
    # GET https://api.github.com/repos/{owner}/{repo}/compare/{basehead}
    # Summary: Compare two commits
    # Description: Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    #
    #   This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
    #
    #   The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    #
    #   When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    #
    #   **Working with large comparisons**
    #
    #   To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    #
    #   - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
    #   - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    #
    #   For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    #
    #   **Signature verification object**
    #
    #   The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    #
    #   | Name | Type | Description |
    #   | ---- | ---- | ----------- |
    #   | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    #   | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    #   | `signature` | `string` | The signature that was extracted from the commit. |
    #   | `payload` | `string` | The value that was signed. |
    #
    #   These are the possible values for `reason` in the `verification` object:
    #
    #   | Value | Description |
    #   | ----- | ----------- |
    #   | `expired_key` | The key that made the signature is expired. |
    #   | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    #   | `gpgverify_error` | There was an error communicating with the signature verification service. |
    #   | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    #   | `unsigned` | The object does not include a signature. |
    #   | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    #   | `no_user` | No user was associated with the `committer` email address in the commit. |
    #   | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    #   | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    #   | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    #   | `malformed_signature` | There was an error parsing the signature. |
    #   | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    #   | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    #
    # Parameters:
    #     basehead:
    #       description: The base branch and head branch to compare. This parameter expects
    #         the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with
    #         a branch that exists in a different repository in the same network as `repo`,
    #         the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/autolinks", http_method="POST")
    def reposCreateAutolink(self): pass
    # To call: GhSDK.resource("repo").reposCreateAutolink(...)
    # POST https://api.github.com/repos/{owner}/{repo}/autolinks
    # Summary: Create an autolink reference for a repository
    # Description: Users with admin access to the repository can create an autolink.


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{commit_sha}/comments", http_method="POST")
    def reposCreateCommitComment(self): pass
    # To call: GhSDK.resource("repo").reposCreateCommitComment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/comments
    # Summary: Create a commit comment
    # Description: Create a comment for a commit using its `:commit_sha`.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", http_method="POST")
    def reposCreateCommitSignatureProtection(self): pass
    # To call: GhSDK.resource("repo").reposCreateCommitSignatureProtection(...)
    # POST https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
    # Summary: Create commit signature protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.


    @GhSDK.resource_method("repos/{owner}/{repo}/statuses/{sha}", http_method="POST")
    def reposCreateCommitStatus(self): pass
    # To call: GhSDK.resource("repo").reposCreateCommitStatus(...)
    # POST https://api.github.com/repos/{owner}/{repo}/statuses/{sha}
    # Summary: Create a commit status
    # Description: Users with push access in a repository can create commit statuses for a given SHA.
    #
    #   Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
    #
    # Parameters:
    #     sha:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/keys", http_method="POST")
    def reposCreateDeployKey(self): pass
    # To call: GhSDK.resource("repo").reposCreateDeployKey(...)
    # POST https://api.github.com/repos/{owner}/{repo}/keys
    # Summary: Create a deploy key
    # Description: You can create a read-only deploy key.


    @GhSDK.resource_method("repos/{owner}/{repo}/deployments", http_method="POST")
    def reposCreateDeployment(self): pass
    # To call: GhSDK.resource("repo").reposCreateDeployment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/deployments
    # Summary: Create a deployment
    # Description: Deployments offer a few configurable parameters with certain defaults.
    #
    #   The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
    #   before we merge a pull request.
    #
    #   The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
    #   multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
    #   makes it easier to track which environments have requested deployments. The default environment is `production`.
    #
    #   The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
    #   the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
    #   the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
    #   return a failure response.
    #
    #   By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
    #   state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
    #   specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
    #   not require any contexts or create any commit statuses, the deployment will always succeed.
    #
    #   The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
    #   field that will be passed on when a deployment event is dispatched.
    #
    #   The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
    #   be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
    #   application with debugging enabled.
    #
    #   Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
    #
    #   Merged branch response:
    #
    #   You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
    #   a deployment. This auto-merge happens when:
    #   *   Auto-merge option is enabled in the repository
    #   *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
    #   *   There are no merge conflicts
    #
    #   If there are no new commits in the base branch, a new request to create a deployment should give a successful
    #   response.
    #
    #   Merge conflict response:
    #
    #   This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
    #   be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
    #
    #   Failed commit status checks:
    #
    #   This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
    #   status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies", http_method="POST")
    def reposCreateDeploymentBranchPolicy(self): pass
    # To call: GhSDK.resource("repo").reposCreateDeploymentBranchPolicy(...)
    # POST https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
    # Summary: Create a deployment branch policy
    # Description: Creates a deployment branch policy for an environment.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules", http_method="POST")
    def reposCreateDeploymentProtectionRule(self): pass
    # To call: GhSDK.resource("repo").reposCreateDeploymentProtectionRule(...)
    # POST https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules
    # Summary: Create a custom deployment protection rule on an environment
    # Description: Enable a custom deployment protection rule for an environment.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. Enabling a custom protection rule requires admin or owner permissions to the repository. GitHub Apps must have the `actions:write` permission to use this endpoint.
    #
    #   For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).


    @GhSDK.resource_method("repos/{owner}/{repo}/deployments/{deployment_id}/statuses", http_method="POST")
    def reposCreateDeploymentStatus(self): pass
    # To call: GhSDK.resource("repo").reposCreateDeploymentStatus(...)
    # POST https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
    # Summary: Create a deployment status
    # Description: Users with `push` access can create deployment statuses for a given deployment.
    #
    #   GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth apps require the `repo_deployment` scope.


    @GhSDK.resource_method("repos/{owner}/{repo}/dispatches", http_method="POST")
    def reposCreateDispatchEvent(self): pass
    # To call: GhSDK.resource("repo").reposCreateDispatchEvent(...)
    # POST https://api.github.com/repos/{owner}/{repo}/dispatches
    # Summary: Create a repository dispatch event
    # Description: You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
    #
    #   The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
    #
    #   This endpoint requires write access to the repository by providing either:
    #
    #     - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
    #     - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
    #
    #   This input example shows how you can use the `client_payload` as a test to debug your workflow.


    @GhSDK.resource_method("repos/{owner}/{repo}/forks", http_method="POST")
    def reposCreateFork(self): pass
    # To call: GhSDK.resource("repo").reposCreateFork(...)
    # POST https://api.github.com/repos/{owner}/{repo}/forks
    # Summary: Create a fork
    # Description: Create a fork for the authenticated user.
    #
    #   **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    #
    #   **Note**: Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}", http_method="PUT")
    def reposCreateOrUpdateEnvironment(self): pass
    # To call: GhSDK.resource("repo").reposCreateOrUpdateEnvironment(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}
    # Summary: Create or update an environment
    # Description: Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
    #
    #   **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
    #
    #   **Note:** To create or update secrets for an environment, see "[GitHub Actions secrets](/rest/actions/secrets)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/contents/{path}", http_method="PUT")
    def reposCreateOrUpdateFileContents(self): pass
    # To call: GhSDK.resource("repo").reposCreateOrUpdateFileContents(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/contents/{path}
    # Summary: Create or update file contents
    # Description: Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.
    #
    #   **Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    #
    # Parameters:
    #     path:
    #       description: path parameter
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/pages/deployment", http_method="POST")
    def reposCreatePagesDeployment(self): pass
    # To call: GhSDK.resource("repo").reposCreatePagesDeployment(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pages/deployment
    # Summary: Create a GitHub Pages deployment
    # Description: Create a GitHub Pages deployment for a repository.
    #
    #   Users must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/pages", http_method="POST")
    def reposCreatePagesSite(self): pass
    # To call: GhSDK.resource("repo").reposCreatePagesSite(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pages
    # Summary: Create a GitHub Pages site
    # Description: Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
    #
    #   To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases", http_method="POST")
    def reposCreateRelease(self): pass
    # To call: GhSDK.resource("repo").reposCreateRelease(...)
    # POST https://api.github.com/repos/{owner}/{repo}/releases
    # Summary: Create a release
    # Description: Users with push access to the repository can create a release.
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("repos/{owner}/{repo}/rulesets", http_method="POST")
    def reposCreateRepoRuleset(self): pass
    # To call: GhSDK.resource("repo").reposCreateRepoRuleset(...)
    # POST https://api.github.com/repos/{owner}/{repo}/rulesets
    # Summary: Create a repository ruleset
    # Description: Create a ruleset for a repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/tags/protection", http_method="POST")
    def reposCreateTagProtection(self): pass
    # To call: GhSDK.resource("repo").reposCreateTagProtection(...)
    # POST https://api.github.com/repos/{owner}/{repo}/tags/protection
    # Summary: Create a tag protection state for a repository
    # Description: This creates a tag protection state for a repository.
    #   This endpoint is only available to repository administrators.


    @GhSDK.resource_method("repos/{template_owner}/{template_repo}/generate", http_method="POST")
    def reposCreateUsingTemplate(self): pass
    # To call: GhSDK.resource("repo").reposCreateUsingTemplate(...)
    # POST https://api.github.com/repos/{template_owner}/{template_repo}/generate
    # Summary: Create a repository using a template
    # Description: Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
    #
    #   **OAuth scope requirements**
    #
    #   When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
    #
    #   *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
    #   *   `repo` scope to create a private repository
    #
    # Parameters:
    #     template_owner:
    #       description: ''
    #       in: path
    #       required: true
    #     template_repo:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks", http_method="POST")
    def reposCreateWebhook(self): pass
    # To call: GhSDK.resource("repo").reposCreateWebhook(...)
    # POST https://api.github.com/repos/{owner}/{repo}/hooks
    # Summary: Create a repository webhook
    # Description: Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
    #   share the same `config` as long as those webhooks do not have any `events` that overlap.


    @GhSDK.resource_method("repos/{owner}/{repo}", http_method="DELETE")
    def reposDelete(self): pass
    # To call: GhSDK.resource("repo").reposDelete(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}
    # Summary: Delete a repository
    # Description: Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
    #
    #   If an organization owner has configured the organization to prevent members from deleting organization-owned
    #   repositories, you will get a `403 Forbidden` response.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions", http_method="DELETE")
    def reposDeleteAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposDeleteAccessRestrictions(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
    # Summary: Delete access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Disables the ability to restrict who can push to this branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", http_method="DELETE")
    def reposDeleteAdminBranchProtection(self): pass
    # To call: GhSDK.resource("repo").reposDeleteAdminBranchProtection(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
    # Summary: Delete admin branch protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}", http_method="DELETE")
    def reposDeleteAnEnvironment(self): pass
    # To call: GhSDK.resource("repo").reposDeleteAnEnvironment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}
    # Summary: Delete an environment
    # Description: You must authenticate using an access token with the repo scope to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/autolinks/{autolink_id}", http_method="DELETE")
    def reposDeleteAutolink(self): pass
    # To call: GhSDK.resource("repo").reposDeleteAutolink(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/autolinks/{autolink_id}
    # Summary: Delete an autolink reference from a repository
    # Description: This deletes a single autolink reference by ID that was configured for the given repository.
    #
    #   Information about autolinks are only available to repository administrators.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection", http_method="DELETE")
    def reposDeleteBranchProtection(self): pass
    # To call: GhSDK.resource("repo").reposDeleteBranchProtection(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection
    # Summary: Delete branch protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/comments/{comment_id}", http_method="DELETE")
    def reposDeleteCommitComment(self): pass
    # To call: GhSDK.resource("repo").reposDeleteCommitComment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}
    # Summary: Delete a commit comment


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", http_method="DELETE")
    def reposDeleteCommitSignatureProtection(self): pass
    # To call: GhSDK.resource("repo").reposDeleteCommitSignatureProtection(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
    # Summary: Delete commit signature protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.


    @GhSDK.resource_method("repos/{owner}/{repo}/keys/{key_id}", http_method="DELETE")
    def reposDeleteDeployKey(self): pass
    # To call: GhSDK.resource("repo").reposDeleteDeployKey(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/keys/{key_id}
    # Summary: Delete a deploy key
    # Description: Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.


    @GhSDK.resource_method("repos/{owner}/{repo}/deployments/{deployment_id}", http_method="DELETE")
    def reposDeleteDeployment(self): pass
    # To call: GhSDK.resource("repo").reposDeleteDeployment(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}
    # Summary: Delete a deployment
    # Description: If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
    #
    #   To set a deployment as inactive, you must:
    #
    #   *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
    #   *   Mark the active deployment as inactive by adding any non-successful deployment status.
    #
    #   For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/deployment-statuses#create-a-deployment-status)."


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", http_method="DELETE")
    def reposDeleteDeploymentBranchPolicy(self): pass
    # To call: GhSDK.resource("repo").reposDeleteDeploymentBranchPolicy(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
    # Summary: Delete a deployment branch policy
    # Description: Deletes a deployment branch policy for an environment.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/contents/{path}", http_method="DELETE")
    def reposDeleteFile(self): pass
    # To call: GhSDK.resource("repo").reposDeleteFile(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/contents/{path}
    # Summary: Delete a file
    # Description: Deletes a file in a repository.
    #
    #   You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
    #
    #   The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
    #
    #   You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
    #
    #   **Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
    #
    # Parameters:
    #     path:
    #       description: path parameter
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/invitations/{invitation_id}", http_method="DELETE")
    def reposDeleteInvitation(self): pass
    # To call: GhSDK.resource("repo").reposDeleteInvitation(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/invitations/{invitation_id}
    # Summary: Delete a repository invitation


    @GhSDK.resource_method("repos/{owner}/{repo}/pages", http_method="DELETE")
    def reposDeletePagesSite(self): pass
    # To call: GhSDK.resource("repo").reposDeletePagesSite(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/pages
    # Summary: Delete a GitHub Pages site
    # Description: Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    #
    #   To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", http_method="DELETE")
    def reposDeletePullRequestReviewProtection(self): pass
    # To call: GhSDK.resource("repo").reposDeletePullRequestReviewProtection(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
    # Summary: Delete pull request review protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}", http_method="DELETE")
    def reposDeleteRelease(self): pass
    # To call: GhSDK.resource("repo").reposDeleteRelease(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/releases/{release_id}
    # Summary: Delete a release
    # Description: Users with push access to the repository can delete a release.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/assets/{asset_id}", http_method="DELETE")
    def reposDeleteReleaseAsset(self): pass
    # To call: GhSDK.resource("repo").reposDeleteReleaseAsset(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}
    # Summary: Delete a release asset


    @GhSDK.resource_method("repos/{owner}/{repo}/rulesets/{ruleset_id}", http_method="DELETE")
    def reposDeleteRepoRuleset(self): pass
    # To call: GhSDK.resource("repo").reposDeleteRepoRuleset(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/rulesets/{ruleset_id}
    # Summary: Delete a repository ruleset
    # Description: Delete a ruleset for a repository.
    #
    # Parameters:
    #     ruleset_id:
    #       description: The ID of the ruleset.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/tags/protection/{tag_protection_id}", http_method="DELETE")
    def reposDeleteTagProtection(self): pass
    # To call: GhSDK.resource("repo").reposDeleteTagProtection(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/tags/protection/{tag_protection_id}
    # Summary: Delete a tag protection state for a repository
    # Description: This deletes a tag protection state for a repository.
    #   This endpoint is only available to repository administrators.


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}", http_method="DELETE")
    def reposDeleteWebhook(self): pass
    # To call: GhSDK.resource("repo").reposDeleteWebhook(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}
    # Summary: Delete a repository webhook


    @GhSDK.resource_method("repos/{owner}/{repo}/automated-security-fixes", http_method="DELETE")
    def reposDisableAutomatedSecurityFixes(self): pass
    # To call: GhSDK.resource("repo").reposDisableAutomatedSecurityFixes(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/automated-security-fixes
    # Summary: Disable automated security fixes
    # Description: Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}", http_method="DELETE")
    def reposDisableDeploymentProtectionRule(self): pass
    # To call: GhSDK.resource("repo").reposDisableDeploymentProtectionRule(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}
    # Summary: Disable a custom protection rule for an environment
    # Description: Disables a custom deployment protection rule for an environment.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. Removing a custom protection rule requires admin or owner permissions to the repository. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Get an app](https://docs.github.com/rest/apps/apps#get-an-app)".


    @GhSDK.resource_method("repos/{owner}/{repo}/private-vulnerability-reporting", http_method="DELETE")
    def reposDisablePrivateVulnerabilityReporting(self): pass
    # To call: GhSDK.resource("repo").reposDisablePrivateVulnerabilityReporting(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/private-vulnerability-reporting
    # Summary: Disable private vulnerability reporting for a repository
    # Description: Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".


    @GhSDK.resource_method("repos/{owner}/{repo}/vulnerability-alerts", http_method="DELETE")
    def reposDisableVulnerabilityAlerts(self): pass
    # To call: GhSDK.resource("repo").reposDisableVulnerabilityAlerts(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts
    # Summary: Disable vulnerability alerts
    # Description: Disables dependency alerts and the dependency graph for a repository.
    #   The authenticated user must have admin access to the repository. For more information,
    #   see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".


    @GhSDK.resource_method("repos/{owner}/{repo}/tarball/{ref}", http_method="GET")
    def reposDownloadTarballArchive(self): pass
    # To call: GhSDK.resource("repo").reposDownloadTarballArchive(...)
    # GET https://api.github.com/repos/{owner}/{repo}/tarball/{ref}
    # Summary: Download a repository archive (tar)
    # Description: Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    #   `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    #   the `Location` header to make a second `GET` request.
    #   **Note**: For private repositories, these links are temporary and expire after five minutes.
    #
    # Parameters:
    #     ref:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/zipball/{ref}", http_method="GET")
    def reposDownloadZipballArchive(self): pass
    # To call: GhSDK.resource("repo").reposDownloadZipballArchive(...)
    # GET https://api.github.com/repos/{owner}/{repo}/zipball/{ref}
    # Summary: Download a repository archive (zip)
    # Description: Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
    #   `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
    #   the `Location` header to make a second `GET` request.
    #
    #   **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
    #
    # Parameters:
    #     ref:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/automated-security-fixes", http_method="PUT")
    def reposEnableAutomatedSecurityFixes(self): pass
    # To call: GhSDK.resource("repo").reposEnableAutomatedSecurityFixes(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/automated-security-fixes
    # Summary: Enable automated security fixes
    # Description: Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".


    @GhSDK.resource_method("repos/{owner}/{repo}/private-vulnerability-reporting", http_method="PUT")
    def reposEnablePrivateVulnerabilityReporting(self): pass
    # To call: GhSDK.resource("repo").reposEnablePrivateVulnerabilityReporting(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/private-vulnerability-reporting
    # Summary: Enable private vulnerability reporting for a repository
    # Description: Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."


    @GhSDK.resource_method("repos/{owner}/{repo}/vulnerability-alerts", http_method="PUT")
    def reposEnableVulnerabilityAlerts(self): pass
    # To call: GhSDK.resource("repo").reposEnableVulnerabilityAlerts(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/vulnerability-alerts
    # Summary: Enable vulnerability alerts
    # Description: Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/generate-notes", http_method="POST")
    def reposGenerateReleaseNotes(self): pass
    # To call: GhSDK.resource("repo").reposGenerateReleaseNotes(...)
    # POST https://api.github.com/repos/{owner}/{repo}/releases/generate-notes
    # Summary: Generate release notes content for a release
    # Description: Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.


    @GhSDK.resource_method("repos/{owner}/{repo}", http_method="GET")
    def reposGet(self): pass
    # To call: GhSDK.resource("repo").reposGet(...)
    # GET https://api.github.com/repos/{owner}/{repo}
    # Summary: Get a repository
    # Description: The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
    #
    #   **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions", http_method="GET")
    def reposGetAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposGetAccessRestrictions(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
    # Summary: Get access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Lists who has access to this protected branch.
    #
    #   **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", http_method="GET")
    def reposGetAdminBranchProtection(self): pass
    # To call: GhSDK.resource("repo").reposGetAdminBranchProtection(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
    # Summary: Get admin branch protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules", http_method="GET")
    def reposGetAllDeploymentProtectionRules(self): pass
    # To call: GhSDK.resource("repo").reposGetAllDeploymentProtectionRules(...)
    # GET https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules
    # Summary: Get all deployment protection rules for an environment
    # Description: Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. If the repository is private and you want to use a personal access token (classic), you must use an access token with the `repo` scope. GitHub Apps and fine-grained personal access tokens must have the `actions:read` permission to use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    #
    #   For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).


    @GhSDK.resource_method("repos/{owner}/{repo}/environments", http_method="GET")
    def reposGetAllEnvironments(self): pass
    # To call: GhSDK.resource("repo").reposGetAllEnvironments(...)
    # GET https://api.github.com/repos/{owner}/{repo}/environments
    # Summary: List environments
    # Description: Lists the environments for a repository.
    #
    #   Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", http_method="GET")
    def reposGetAllStatusCheckContexts(self): pass
    # To call: GhSDK.resource("repo").reposGetAllStatusCheckContexts(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    # Summary: Get all status check contexts
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/topics", http_method="GET")
    def reposGetAllTopics(self): pass
    # To call: GhSDK.resource("repo").reposGetAllTopics(...)
    # GET https://api.github.com/repos/{owner}/{repo}/topics
    # Summary: Get all repository topics


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", http_method="GET")
    def reposGetAppsWithAccessToProtectedBranch(self): pass
    # To call: GhSDK.resource("repo").reposGetAppsWithAccessToProtectedBranch(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    # Summary: Get apps with access to the protected branch
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/autolinks/{autolink_id}", http_method="GET")
    def reposGetAutolink(self): pass
    # To call: GhSDK.resource("repo").reposGetAutolink(...)
    # GET https://api.github.com/repos/{owner}/{repo}/autolinks/{autolink_id}
    # Summary: Get an autolink reference of a repository
    # Description: This returns a single autolink reference by ID that was configured for the given repository.
    #
    #   Information about autolinks are only available to repository administrators.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}", http_method="GET")
    def reposGetBranch(self): pass
    # To call: GhSDK.resource("repo").reposGetBranch(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}
    # Summary: Get a branch


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection", http_method="GET")
    def reposGetBranchProtection(self): pass
    # To call: GhSDK.resource("repo").reposGetBranchProtection(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection
    # Summary: Get branch protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/rules/branches/{branch}", http_method="GET")
    def reposGetBranchRules(self): pass
    # To call: GhSDK.resource("repo").reposGetBranchRules(...)
    # GET https://api.github.com/repos/{owner}/{repo}/rules/branches/{branch}
    # Summary: Get rules for a branch
    # Description: Returns all rules that apply to the specified branch. The branch does not need to exist; rules that would apply to a
    #   branch with that name will be returned. All rules that apply will be returned, regardless of the level at which they
    #   are configured.


    @GhSDK.resource_method("repos/{owner}/{repo}/traffic/clones", http_method="GET")
    def reposGetClones(self): pass
    # To call: GhSDK.resource("repo").reposGetClones(...)
    # GET https://api.github.com/repos/{owner}/{repo}/traffic/clones
    # Summary: Get repository clones
    # Description: Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.


    @GhSDK.resource_method("repos/{owner}/{repo}/stats/code_frequency", http_method="GET")
    def reposGetCodeFrequencyStats(self): pass
    # To call: GhSDK.resource("repo").reposGetCodeFrequencyStats(...)
    # GET https://api.github.com/repos/{owner}/{repo}/stats/code_frequency
    # Summary: Get the weekly commit activity
    # Description: Returns a weekly aggregate of the number of additions and deletions pushed to a repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/collaborators/{username}/permission", http_method="GET")
    def reposGetCollaboratorPermissionLevel(self): pass
    # To call: GhSDK.resource("repo").reposGetCollaboratorPermissionLevel(...)
    # GET https://api.github.com/repos/{owner}/{repo}/collaborators/{username}/permission
    # Summary: Get repository permissions for a user
    # Description: Checks the repository permission of a collaborator. The possible repository
    #   permissions are `admin`, `write`, `read`, and `none`.
    #
    #   *Note*: The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`, where the
    #   `maintain` role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role assigned to the
    #   collaborator, see the `role_name` attribute, which will provide the full role name, including custom roles. The
    #   `permissions` hash can also be used to determine which base level of access the collaborator has to the repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{ref}/status", http_method="GET")
    def reposGetCombinedStatusForRef(self): pass
    # To call: GhSDK.resource("repo").reposGetCombinedStatusForRef(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{ref}/status
    # Summary: Get the combined status for a specific reference
    # Description: Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
    #
    #
    #   Additionally, a combined `state` is returned. The `state` is one of:
    #
    #   *   **failure** if any of the contexts report as `error` or `failure`
    #   *   **pending** if there are no statuses or a context is `pending`
    #   *   **success** if the latest status for all contexts is `success`


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{ref}", http_method="GET")
    def reposGetCommit(self): pass
    # To call: GhSDK.resource("repo").reposGetCommit(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{ref}
    # Summary: Get a commit
    # Description: Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
    #
    #   **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
    #
    #   You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
    #
    #   To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
    #
    #   **Signature verification object**
    #
    #   The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    #
    #   | Name | Type | Description |
    #   | ---- | ---- | ----------- |
    #   | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    #   | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    #   | `signature` | `string` | The signature that was extracted from the commit. |
    #   | `payload` | `string` | The value that was signed. |
    #
    #   These are the possible values for `reason` in the `verification` object:
    #
    #   | Value | Description |
    #   | ----- | ----------- |
    #   | `expired_key` | The key that made the signature is expired. |
    #   | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    #   | `gpgverify_error` | There was an error communicating with the signature verification service. |
    #   | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    #   | `unsigned` | The object does not include a signature. |
    #   | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    #   | `no_user` | No user was associated with the `committer` email address in the commit. |
    #   | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    #   | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    #   | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    #   | `malformed_signature` | There was an error parsing the signature. |
    #   | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    #   | `valid` | None of the above errors applied, so the signature is considered to be verified. |


    @GhSDK.resource_method("repos/{owner}/{repo}/stats/commit_activity", http_method="GET")
    def reposGetCommitActivityStats(self): pass
    # To call: GhSDK.resource("repo").reposGetCommitActivityStats(...)
    # GET https://api.github.com/repos/{owner}/{repo}/stats/commit_activity
    # Summary: Get the last year of commit activity
    # Description: Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.


    @GhSDK.resource_method("repos/{owner}/{repo}/comments/{comment_id}", http_method="GET")
    def reposGetCommitComment(self): pass
    # To call: GhSDK.resource("repo").reposGetCommitComment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}
    # Summary: Get a commit comment


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", http_method="GET")
    def reposGetCommitSignatureProtection(self): pass
    # To call: GhSDK.resource("repo").reposGetCommitSignatureProtection(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
    # Summary: Get commit signature protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
    #
    #   **Note**: You must enable branch protection to require signed commits.


    @GhSDK.resource_method("repos/{owner}/{repo}/community/profile", http_method="GET")
    def reposGetCommunityProfileMetrics(self): pass
    # To call: GhSDK.resource("repo").reposGetCommunityProfileMetrics(...)
    # GET https://api.github.com/repos/{owner}/{repo}/community/profile
    # Summary: Get community profile metrics
    # Description: Returns all community profile metrics for a repository. The repository cannot be a fork.
    #
    #   The returned metrics include an overall health score, the repository description, the presence of documentation, the
    #   detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
    #   README, and CONTRIBUTING files.
    #
    #   The `health_percentage` score is defined as a percentage of how many of
    #   these four documents are present: README, CONTRIBUTING, LICENSE, and
    #   CODE_OF_CONDUCT. For example, if all four documents are present, then
    #   the `health_percentage` is `100`. If only one is present, then the
    #   `health_percentage` is `25`.
    #
    #   `content_reports_enabled` is only returned for organization-owned repositories.


    @GhSDK.resource_method("repos/{owner}/{repo}/contents/{path}", http_method="GET")
    def reposGetContent(self): pass
    # To call: GhSDK.resource("repo").reposGetContent(...)
    # GET https://api.github.com/repos/{owner}/{repo}/contents/{path}
    # Summary: Get repository content
    # Description: Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
    #   `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
    #
    #   Files and symlinks support [a custom media type](https://docs.github.com/rest/overview/media-types) for
    #   retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
    #   type](https://docs.github.com/rest/overview/media-types) to ensure the content is returned in a consistent
    #   object format.
    #
    #   **Notes**:
    #   *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
    #   *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
    #   API](https://docs.github.com/rest/git/trees#get-a-tree).
    #    *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
    #    Size limits:
    #   If the requested file's size is:
    #   * 1 MB or smaller: All features of this endpoint are supported.
    #   * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
    #    * Greater than 100 MB: This endpoint is not supported.
    #
    #    If the content is a directory:
    #   The response will be an array of objects, one object for each item in the directory.
    #   When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
    #   _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
    #   In the next major version of the API, the type will be returned as "submodule".
    #
    #    If the content is a symlink:
    #   If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
    #   API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
    #   describing the symlink itself.
    #
    #    If the content is a submodule:
    #   The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
    #   commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
    #   the submodule at that specific commit.
    #
    #   If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
    #   github.com URLs (`html_url` and `_links["html"]`) will have null values.
    #
    # Parameters:
    #     path:
    #       description: path parameter
    #       in: path
    #       required: true
    #     ref:
    #       description: "The name of the commit/branch/tag. Default: the repository\u2019\
    #         s default branch."
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/stats/contributors", http_method="GET")
    def reposGetContributorsStats(self): pass
    # To call: GhSDK.resource("repo").reposGetContributorsStats(...)
    # GET https://api.github.com/repos/{owner}/{repo}/stats/contributors
    # Summary: Get all contributor commit activity
    # Description:
    #   Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
    #
    #   *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
    #   *   `a` - Number of additions
    #   *   `d` - Number of deletions
    #   *   `c` - Number of commits


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}", http_method="GET")
    def reposGetCustomDeploymentProtectionRule(self): pass
    # To call: GhSDK.resource("repo").reposGetCustomDeploymentProtectionRule(...)
    # GET https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}
    # Summary: Get a custom deployment protection rule
    # Description: Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. If the repository is private and you want to use a personal access token (classic), you must use an access token with the `repo` scope. GitHub Apps and fine-grained personal access tokens must have the `actions:read` permission to use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    #
    #   For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).


    @GhSDK.resource_method("repos/{owner}/{repo}/keys/{key_id}", http_method="GET")
    def reposGetDeployKey(self): pass
    # To call: GhSDK.resource("repo").reposGetDeployKey(...)
    # GET https://api.github.com/repos/{owner}/{repo}/keys/{key_id}
    # Summary: Get a deploy key


    @GhSDK.resource_method("repos/{owner}/{repo}/deployments/{deployment_id}", http_method="GET")
    def reposGetDeployment(self): pass
    # To call: GhSDK.resource("repo").reposGetDeployment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}
    # Summary: Get a deployment


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", http_method="GET")
    def reposGetDeploymentBranchPolicy(self): pass
    # To call: GhSDK.resource("repo").reposGetDeploymentBranchPolicy(...)
    # GET https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
    # Summary: Get a deployment branch policy
    # Description: Gets a deployment branch policy for an environment.
    #
    #   Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}", http_method="GET")
    def reposGetDeploymentStatus(self): pass
    # To call: GhSDK.resource("repo").reposGetDeploymentStatus(...)
    # GET https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
    # Summary: Get a deployment status
    # Description: Users with pull access can view a deployment status for a deployment:
    #
    # Parameters:
    #     status_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}", http_method="GET")
    def reposGetEnvironment(self): pass
    # To call: GhSDK.resource("repo").reposGetEnvironment(...)
    # GET https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}
    # Summary: Get an environment
    # Description: **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
    #
    #   Anyone with read access to the repository can use this endpoint. If the
    #   repository is private, you must use an access token with the `repo` scope. GitHub
    #   Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/pages/builds/latest", http_method="GET")
    def reposGetLatestPagesBuild(self): pass
    # To call: GhSDK.resource("repo").reposGetLatestPagesBuild(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pages/builds/latest
    # Summary: Get latest Pages build
    # Description: Gets information about the single most recent build of a GitHub Pages site.
    #
    #   A token with the `repo` scope is required. GitHub Apps must have the `pages:read` permission.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/latest", http_method="GET")
    def reposGetLatestRelease(self): pass
    # To call: GhSDK.resource("repo").reposGetLatestRelease(...)
    # GET https://api.github.com/repos/{owner}/{repo}/releases/latest
    # Summary: Get the latest release
    # Description: View the latest published full release for the repository.
    #
    #   The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.


    @GhSDK.resource_method("repos/{owner}/{repo}/pages", http_method="GET")
    def reposGetPages(self): pass
    # To call: GhSDK.resource("repo").reposGetPages(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pages
    # Summary: Get a GitHub Pages site
    # Description: Gets information about a GitHub Pages site.
    #
    #   A token with the `repo` scope is required. GitHub Apps must have the `pages:read` permission.


    @GhSDK.resource_method("repos/{owner}/{repo}/pages/builds/{build_id}", http_method="GET")
    def reposGetPagesBuild(self): pass
    # To call: GhSDK.resource("repo").reposGetPagesBuild(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pages/builds/{build_id}
    # Summary: Get GitHub Pages build
    # Description: Gets information about a GitHub Pages build.
    #
    #   A token with the `repo` scope is required. GitHub Apps must have the `pages:read` permission.
    #
    # Parameters:
    #     build_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/pages/health", http_method="GET")
    def reposGetPagesHealthCheck(self): pass
    # To call: GhSDK.resource("repo").reposGetPagesHealthCheck(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pages/health
    # Summary: Get a DNS health check for GitHub Pages
    # Description: Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
    #
    #   The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
    #
    #   To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.


    @GhSDK.resource_method("repos/{owner}/{repo}/stats/participation", http_method="GET")
    def reposGetParticipationStats(self): pass
    # To call: GhSDK.resource("repo").reposGetParticipationStats(...)
    # GET https://api.github.com/repos/{owner}/{repo}/stats/participation
    # Summary: Get the weekly commit count
    # Description: Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
    #
    #   The array order is oldest week (index 0) to most recent week.
    #
    #   The most recent week is seven days ago at UTC midnight to today at UTC midnight.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", http_method="GET")
    def reposGetPullRequestReviewProtection(self): pass
    # To call: GhSDK.resource("repo").reposGetPullRequestReviewProtection(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
    # Summary: Get pull request review protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/stats/punch_card", http_method="GET")
    def reposGetPunchCardStats(self): pass
    # To call: GhSDK.resource("repo").reposGetPunchCardStats(...)
    # GET https://api.github.com/repos/{owner}/{repo}/stats/punch_card
    # Summary: Get the hourly commit count for each day
    # Description: Each array contains the day number, hour number, and number of commits:
    #
    #   *   `0-6`: Sunday - Saturday
    #   *   `0-23`: Hour of day
    #   *   Number of commits
    #
    #   For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.


    @GhSDK.resource_method("repos/{owner}/{repo}/readme", http_method="GET")
    def reposGetReadme(self): pass
    # To call: GhSDK.resource("repo").reposGetReadme(...)
    # GET https://api.github.com/repos/{owner}/{repo}/readme
    # Summary: Get a repository README
    # Description: Gets the preferred README for a repository.
    #
    #   READMEs support [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw content or rendered HTML.
    #
    # Parameters:
    #     ref:
    #       description: "The name of the commit/branch/tag. Default: the repository\u2019\
    #         s default branch."
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/readme/{dir}", http_method="GET")
    def reposGetReadmeInDirectory(self): pass
    # To call: GhSDK.resource("repo").reposGetReadmeInDirectory(...)
    # GET https://api.github.com/repos/{owner}/{repo}/readme/{dir}
    # Summary: Get a repository README for a directory
    # Description: Gets the README from a repository directory.
    #
    #   READMEs support [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw content or rendered HTML.
    #
    # Parameters:
    #     dir:
    #       description: The alternate path to look for a README file
    #       in: path
    #       required: true
    #     ref:
    #       description: "The name of the commit/branch/tag. Default: the repository\u2019\
    #         s default branch."
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}", http_method="GET")
    def reposGetRelease(self): pass
    # To call: GhSDK.resource("repo").reposGetRelease(...)
    # GET https://api.github.com/repos/{owner}/{repo}/releases/{release_id}
    # Summary: Get a release
    # Description: **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/assets/{asset_id}", http_method="GET")
    def reposGetReleaseAsset(self): pass
    # To call: GhSDK.resource("repo").reposGetReleaseAsset(...)
    # GET https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}
    # Summary: Get a release asset
    # Description: To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/tags/{tag}", http_method="GET")
    def reposGetReleaseByTag(self): pass
    # To call: GhSDK.resource("repo").reposGetReleaseByTag(...)
    # GET https://api.github.com/repos/{owner}/{repo}/releases/tags/{tag}
    # Summary: Get a release by tag name
    # Description: Get a published release with the specified tag.
    #
    # Parameters:
    #     tag:
    #       description: tag parameter
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/rulesets/{ruleset_id}", http_method="GET")
    def reposGetRepoRuleset(self): pass
    # To call: GhSDK.resource("repo").reposGetRepoRuleset(...)
    # GET https://api.github.com/repos/{owner}/{repo}/rulesets/{ruleset_id}
    # Summary: Get a repository ruleset
    # Description: Get a ruleset for a repository.
    #
    # Parameters:
    #     includes_parents:
    #       description: Include rulesets configured at higher levels that apply to this repository
    #       in: query
    #       required: false
    #     ruleset_id:
    #       description: The ID of the ruleset.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/rulesets", http_method="GET")
    def reposGetRepoRulesets(self): pass
    # To call: GhSDK.resource("repo").reposGetRepoRulesets(...)
    # GET https://api.github.com/repos/{owner}/{repo}/rulesets
    # Summary: Get all repository rulesets
    # Description: Get all the rulesets for a repository.
    #
    # Parameters:
    #     includes_parents:
    #       description: Include rulesets configured at higher levels that apply to this repository
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", http_method="GET")
    def reposGetStatusChecksProtection(self): pass
    # To call: GhSDK.resource("repo").reposGetStatusChecksProtection(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
    # Summary: Get status checks protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", http_method="GET")
    def reposGetTeamsWithAccessToProtectedBranch(self): pass
    # To call: GhSDK.resource("repo").reposGetTeamsWithAccessToProtectedBranch(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    # Summary: Get teams with access to the protected branch
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Lists the teams who have push access to this branch. The list includes child teams.


    @GhSDK.resource_method("repos/{owner}/{repo}/traffic/popular/paths", http_method="GET")
    def reposGetTopPaths(self): pass
    # To call: GhSDK.resource("repo").reposGetTopPaths(...)
    # GET https://api.github.com/repos/{owner}/{repo}/traffic/popular/paths
    # Summary: Get top referral paths
    # Description: Get the top 10 popular contents over the last 14 days.


    @GhSDK.resource_method("repos/{owner}/{repo}/traffic/popular/referrers", http_method="GET")
    def reposGetTopReferrers(self): pass
    # To call: GhSDK.resource("repo").reposGetTopReferrers(...)
    # GET https://api.github.com/repos/{owner}/{repo}/traffic/popular/referrers
    # Summary: Get top referral sources
    # Description: Get the top 10 referrers over the last 14 days.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", http_method="GET")
    def reposGetUsersWithAccessToProtectedBranch(self): pass
    # To call: GhSDK.resource("repo").reposGetUsersWithAccessToProtectedBranch(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    # Summary: Get users with access to the protected branch
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Lists the people who have push access to this branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/traffic/views", http_method="GET")
    def reposGetViews(self): pass
    # To call: GhSDK.resource("repo").reposGetViews(...)
    # GET https://api.github.com/repos/{owner}/{repo}/traffic/views
    # Summary: Get page views
    # Description: Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}", http_method="GET")
    def reposGetWebhook(self): pass
    # To call: GhSDK.resource("repo").reposGetWebhook(...)
    # GET https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}
    # Summary: Get a repository webhook
    # Description: Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}/config", http_method="GET")
    def reposGetWebhookConfigForRepo(self): pass
    # To call: GhSDK.resource("repo").reposGetWebhookConfigForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config
    # Summary: Get a webhook configuration for a repository
    # Description: Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
    #
    #   Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}", http_method="GET")
    def reposGetWebhookDelivery(self): pass
    # To call: GhSDK.resource("repo").reposGetWebhookDelivery(...)
    # GET https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}
    # Summary: Get a delivery for a repository webhook
    # Description: Returns a delivery for a webhook configured in a repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/activity", http_method="GET")
    def reposListActivities(self): pass
    # To call: GhSDK.resource("repo").reposListActivities(...)
    # GET https://api.github.com/repos/{owner}/{repo}/activity
    # Summary: List repository activities
    # Description: Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.
    #
    #   For more information about viewing repository activity,
    #   see "[Viewing repository activity](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/viewing-repository-activity)."
    #
    # Parameters:
    #     activity_type:
    #       description: 'The activity type to filter by.
    #
    #
    #         For example, you can choose to filter by "force_push", to see all force pushes
    #         to the repository.'
    #       in: query
    #       required: false
    #     actor:
    #       description: The GitHub username to use to filter by the actor who performed the
    #         activity.
    #       in: query
    #       required: false
    #     ref:
    #       description: 'The Git reference for the activities you want to list.
    #
    #
    #         The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or
    #         `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.'
    #       in: query
    #       required: false
    #     time_period:
    #       description: 'The time period to filter by.
    #
    #
    #         For example, `day` will filter for activity that occurred in the past 24 hours,
    #         and `week` will filter for activity that occurred in the past 7 days (168 hours).'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/autolinks", http_method="GET")
    def reposListAutolinks(self): pass
    # To call: GhSDK.resource("repo").reposListAutolinks(...)
    # GET https://api.github.com/repos/{owner}/{repo}/autolinks
    # Summary: List all autolinks of a repository
    # Description: This returns a list of autolinks configured for the given repository.
    #
    #   Information about autolinks are only available to repository administrators.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches", http_method="GET")
    def reposListBranches(self): pass
    # To call: GhSDK.resource("repo").reposListBranches(...)
    # GET https://api.github.com/repos/{owner}/{repo}/branches
    # Summary: List branches
    #
    # Parameters:
    #     protected:
    #       description: Setting to `true` returns only protected branches. When set to `false`,
    #         only unprotected branches are returned. Omitting this parameter returns all
    #         branches.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", http_method="GET")
    def reposListBranchesForHeadCommit(self): pass
    # To call: GhSDK.resource("repo").reposListBranchesForHeadCommit(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
    # Summary: List branches for HEAD commit
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/collaborators", http_method="GET")
    def reposListCollaborators(self): pass
    # To call: GhSDK.resource("repo").reposListCollaborators(...)
    # GET https://api.github.com/repos/{owner}/{repo}/collaborators
    # Summary: List repository collaborators
    # Description: For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
    #   Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
    #
    #   Team members will include the members of child teams.
    #
    #   You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
    #   endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
    #   endpoint.
    #
    # Parameters:
    #     affiliation:
    #       description: Filter collaborators returned by their affiliation. `outside` means
    #         all outside collaborators of an organization-owned repository. `direct` means
    #         all collaborators with permissions to an organization-owned repository, regardless
    #         of organization membership status. `all` means all collaborators the authenticated
    #         user can see.
    #       in: query
    #       required: false
    #     permission:
    #       description: Filter collaborators by the permissions they have on the repository.
    #         If not specified, all collaborators will be returned.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{commit_sha}/comments", http_method="GET")
    def reposListCommentsForCommit(self): pass
    # To call: GhSDK.resource("repo").reposListCommentsForCommit(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/comments
    # Summary: List commit comments
    # Description: Use the `:commit_sha` to specify the commit that will have its comments listed.


    @GhSDK.resource_method("repos/{owner}/{repo}/comments", http_method="GET")
    def reposListCommitCommentsForRepo(self): pass
    # To call: GhSDK.resource("repo").reposListCommitCommentsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/comments
    # Summary: List commit comments for a repository
    # Description: Commit Comments use [these custom media types](https://docs.github.com/rest/overview/media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
    #
    #   Comments are ordered by ascending ID.


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{ref}/statuses", http_method="GET")
    def reposListCommitStatusesForRef(self): pass
    # To call: GhSDK.resource("repo").reposListCommitStatusesForRef(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{ref}/statuses
    # Summary: List commit statuses for a reference
    # Description: Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
    #
    #   This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.


    @GhSDK.resource_method("repos/{owner}/{repo}/commits", http_method="GET")
    def reposListCommits(self): pass
    # To call: GhSDK.resource("repo").reposListCommits(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits
    # Summary: List commits
    # Description: **Signature verification object**
    #
    #   The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    #
    #   | Name | Type | Description |
    #   | ---- | ---- | ----------- |
    #   | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    #   | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    #   | `signature` | `string` | The signature that was extracted from the commit. |
    #   | `payload` | `string` | The value that was signed. |
    #
    #   These are the possible values for `reason` in the `verification` object:
    #
    #   | Value | Description |
    #   | ----- | ----------- |
    #   | `expired_key` | The key that made the signature is expired. |
    #   | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    #   | `gpgverify_error` | There was an error communicating with the signature verification service. |
    #   | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    #   | `unsigned` | The object does not include a signature. |
    #   | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    #   | `no_user` | No user was associated with the `committer` email address in the commit. |
    #   | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    #   | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    #   | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    #   | `malformed_signature` | There was an error parsing the signature. |
    #   | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    #   | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    #
    # Parameters:
    #     author:
    #       description: GitHub username or email address to use to filter by commit author.
    #       in: query
    #       required: false
    #     committer:
    #       description: GitHub username or email address to use to filter by commit committer.
    #       in: query
    #       required: false
    #     path:
    #       description: Only commits containing this file path will be returned.
    #       in: query
    #       required: false
    #     sha:
    #       description: "SHA or branch to start listing commits from. Default: the repository\u2019\
    #         s default branch (usually `main`)."
    #       in: query
    #       required: false
    #     until:
    #       description: 'Only commits before this date will be returned. This is a timestamp
    #         in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/contributors", http_method="GET")
    def reposListContributors(self): pass
    # To call: GhSDK.resource("repo").reposListContributors(...)
    # GET https://api.github.com/repos/{owner}/{repo}/contributors
    # Summary: List repository contributors
    # Description: Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    #
    #   GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    #
    # Parameters:
    #     anon:
    #       description: Set to `1` or `true` to include anonymous contributors in results.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps", http_method="GET")
    def reposListCustomDeploymentRuleIntegrations(self): pass
    # To call: GhSDK.resource("repo").reposListCustomDeploymentRuleIntegrations(...)
    # GET https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps
    # Summary: List custom deployment rule integrations available for an environment
    # Description: Gets all custom deployment protection rule integrations that are available for an environment. Anyone with read access to the repository can use this endpoint. If the repository is private and you want to use a personal access token (classic), you must use an access token with the `repo` scope. GitHub Apps and fine-grained personal access tokens must have the `actions:read` permission to use this endpoint.
    #
    #   For more information about environments, see "[Using environments for deployment](https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
    #
    #   For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".


    @GhSDK.resource_method("repos/{owner}/{repo}/keys", http_method="GET")
    def reposListDeployKeys(self): pass
    # To call: GhSDK.resource("repo").reposListDeployKeys(...)
    # GET https://api.github.com/repos/{owner}/{repo}/keys
    # Summary: List deploy keys


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies", http_method="GET")
    def reposListDeploymentBranchPolicies(self): pass
    # To call: GhSDK.resource("repo").reposListDeploymentBranchPolicies(...)
    # GET https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
    # Summary: List deployment branch policies
    # Description: Lists the deployment branch policies for an environment.
    #
    #   Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/deployments/{deployment_id}/statuses", http_method="GET")
    def reposListDeploymentStatuses(self): pass
    # To call: GhSDK.resource("repo").reposListDeploymentStatuses(...)
    # GET https://api.github.com/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
    # Summary: List deployment statuses
    # Description: Users with pull access can view deployment statuses for a deployment:


    @GhSDK.resource_method("repos/{owner}/{repo}/deployments", http_method="GET")
    def reposListDeployments(self): pass
    # To call: GhSDK.resource("repo").reposListDeployments(...)
    # GET https://api.github.com/repos/{owner}/{repo}/deployments
    # Summary: List deployments
    # Description: Simple filtering of deployments is available via query parameters:
    #
    # Parameters:
    #     environment:
    #       description: The name of the environment that was deployed to (e.g., `staging`
    #         or `production`).
    #       in: query
    #       required: false
    #     ref:
    #       description: The name of the ref. This can be a branch, tag, or SHA.
    #       in: query
    #       required: false
    #     sha:
    #       description: The SHA recorded at creation time.
    #       in: query
    #       required: false
    #     task:
    #       description: The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/forks", http_method="GET")
    def reposListForks(self): pass
    # To call: GhSDK.resource("repo").reposListForks(...)
    # GET https://api.github.com/repos/{owner}/{repo}/forks
    # Summary: List forks
    #
    # Parameters:
    #     sort:
    #       description: The sort order. `stargazers` will sort by star count.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/invitations", http_method="GET")
    def reposListInvitations(self): pass
    # To call: GhSDK.resource("repo").reposListInvitations(...)
    # GET https://api.github.com/repos/{owner}/{repo}/invitations
    # Summary: List repository invitations
    # Description: When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.


    @GhSDK.resource_method("repos/{owner}/{repo}/languages", http_method="GET")
    def reposListLanguages(self): pass
    # To call: GhSDK.resource("repo").reposListLanguages(...)
    # GET https://api.github.com/repos/{owner}/{repo}/languages
    # Summary: List repository languages
    # Description: Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.


    @GhSDK.resource_method("repos/{owner}/{repo}/pages/builds", http_method="GET")
    def reposListPagesBuilds(self): pass
    # To call: GhSDK.resource("repo").reposListPagesBuilds(...)
    # GET https://api.github.com/repos/{owner}/{repo}/pages/builds
    # Summary: List GitHub Pages builds
    # Description: Lists builts of a GitHub Pages site.
    #
    #   A token with the `repo` scope is required. GitHub Apps must have the `pages:read` permission.


    @GhSDK.resource_method("repos/{owner}/{repo}/commits/{commit_sha}/pulls", http_method="GET")
    def reposListPullRequestsAssociatedWithCommit(self): pass
    # To call: GhSDK.resource("repo").reposListPullRequestsAssociatedWithCommit(...)
    # GET https://api.github.com/repos/{owner}/{repo}/commits/{commit_sha}/pulls
    # Summary: List pull requests associated with a commit
    # Description: Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    #
    #   To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}/assets", http_method="GET")
    def reposListReleaseAssets(self): pass
    # To call: GhSDK.resource("repo").reposListReleaseAssets(...)
    # GET https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/assets
    # Summary: List release assets


    @GhSDK.resource_method("repos/{owner}/{repo}/releases", http_method="GET")
    def reposListReleases(self): pass
    # To call: GhSDK.resource("repo").reposListReleases(...)
    # GET https://api.github.com/repos/{owner}/{repo}/releases
    # Summary: List releases
    # Description: This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
    #
    #   Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.


    @GhSDK.resource_method("repos/{owner}/{repo}/tags/protection", http_method="GET")
    def reposListTagProtection(self): pass
    # To call: GhSDK.resource("repo").reposListTagProtection(...)
    # GET https://api.github.com/repos/{owner}/{repo}/tags/protection
    # Summary: List tag protection states for a repository
    # Description: This returns the tag protection states of a repository.
    #
    #   This information is only available to repository administrators.


    @GhSDK.resource_method("repos/{owner}/{repo}/tags", http_method="GET")
    def reposListTags(self): pass
    # To call: GhSDK.resource("repo").reposListTags(...)
    # GET https://api.github.com/repos/{owner}/{repo}/tags
    # Summary: List repository tags


    @GhSDK.resource_method("repos/{owner}/{repo}/teams", http_method="GET")
    def reposListTeams(self): pass
    # To call: GhSDK.resource("repo").reposListTeams(...)
    # GET https://api.github.com/repos/{owner}/{repo}/teams
    # Summary: List repository teams
    # Description: Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
    #
    #   For a public repository, a team is listed only if that team added the public repository explicitly.
    #
    #   Personal access tokens require the following scopes:
    #   * `public_repo` to call this endpoint on a public repository
    #   * `repo` to call this endpoint on a private repository (this scope also includes public repositories)
    #
    #   This endpoint is not compatible with fine-grained personal access tokens.


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}/deliveries", http_method="GET")
    def reposListWebhookDeliveries(self): pass
    # To call: GhSDK.resource("repo").reposListWebhookDeliveries(...)
    # GET https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries
    # Summary: List deliveries for a repository webhook
    # Description: Returns a list of webhook deliveries for a webhook configured in a repository.
    #
    # Parameters:
    #     redelivery:
    #       description: ''
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks", http_method="GET")
    def reposListWebhooks(self): pass
    # To call: GhSDK.resource("repo").reposListWebhooks(...)
    # GET https://api.github.com/repos/{owner}/{repo}/hooks
    # Summary: List repository webhooks
    # Description: Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.


    @GhSDK.resource_method("repos/{owner}/{repo}/merges", http_method="POST")
    def reposMerge(self): pass
    # To call: GhSDK.resource("repo").reposMerge(...)
    # POST https://api.github.com/repos/{owner}/{repo}/merges
    # Summary: Merge a branch


    @GhSDK.resource_method("repos/{owner}/{repo}/merge-upstream", http_method="POST")
    def reposMergeUpstream(self): pass
    # To call: GhSDK.resource("repo").reposMergeUpstream(...)
    # POST https://api.github.com/repos/{owner}/{repo}/merge-upstream
    # Summary: Sync a fork branch with the upstream repository
    # Description: Sync a branch of a forked repository to keep it up-to-date with the upstream repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}/pings", http_method="POST")
    def reposPingWebhook(self): pass
    # To call: GhSDK.resource("repo").reposPingWebhook(...)
    # POST https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings
    # Summary: Ping a repository webhook
    # Description: This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", http_method="POST")
    def reposRedeliverWebhookDelivery(self): pass
    # To call: GhSDK.resource("repo").reposRedeliverWebhookDelivery(...)
    # POST https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
    # Summary: Redeliver a delivery for a repository webhook
    # Description: Redeliver a webhook delivery for a webhook configured in a repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", http_method="DELETE")
    def reposRemoveAppAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposRemoveAppAccessRestrictions(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    # Summary: Remove app access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/collaborators/{username}", http_method="DELETE")
    def reposRemoveCollaborator(self): pass
    # To call: GhSDK.resource("repo").reposRemoveCollaborator(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/collaborators/{username}
    # Summary: Remove a repository collaborator
    # Description: Removes a collaborator from a repository.
    #
    #   To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.
    #
    #   This endpoint also:
    #   - Cancels any outstanding invitations
    #   - Unasigns the user from any issues
    #   - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories.
    #   - Unstars the repository
    #   - Updates access permissions to packages
    #
    #   Removing a user as a collaborator has the following effects on forks:
    #    - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.
    #    - If the user had their own fork of the repository, the fork will be deleted.
    #    - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.
    #
    #   **Note**: A user can still have access to the repository through organization permissions like base repository permissions.
    #
    #   Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.
    #
    #   For more information on fork permissions, see "[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", http_method="DELETE")
    def reposRemoveStatusCheckContexts(self): pass
    # To call: GhSDK.resource("repo").reposRemoveStatusCheckContexts(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    # Summary: Remove status check contexts
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", http_method="DELETE")
    def reposRemoveStatusCheckProtection(self): pass
    # To call: GhSDK.resource("repo").reposRemoveStatusCheckProtection(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
    # Summary: Remove status check protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", http_method="DELETE")
    def reposRemoveTeamAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposRemoveTeamAccessRestrictions(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    # Summary: Remove team access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Removes the ability of a team to push to this branch. You can also remove push access for child teams.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", http_method="DELETE")
    def reposRemoveUserAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposRemoveUserAccessRestrictions(...)
    # DELETE https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    # Summary: Remove user access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Removes the ability of a user to push to this branch.
    #
    #   | Type    | Description                                                                                                                                   |
    #   | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
    #   | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/rename", http_method="POST")
    def reposRenameBranch(self): pass
    # To call: GhSDK.resource("repo").reposRenameBranch(...)
    # POST https://api.github.com/repos/{owner}/{repo}/branches/{branch}/rename
    # Summary: Rename a branch
    # Description: Renames a branch in a repository.
    #
    #   **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
    #
    #   The permissions required to use this endpoint depends on whether you are renaming the default branch.
    #
    #   To rename a non-default branch:
    #
    #   * Users must have push access.
    #   * GitHub Apps must have the `contents:write` repository permission.
    #
    #   To rename the default branch:
    #
    #   * Users must have admin or owner permissions.
    #   * GitHub Apps must have the `administration:write` repository permission.


    @GhSDK.resource_method("repos/{owner}/{repo}/topics", http_method="PUT")
    def reposReplaceAllTopics(self): pass
    # To call: GhSDK.resource("repo").reposReplaceAllTopics(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/topics
    # Summary: Replace all repository topics


    @GhSDK.resource_method("repos/{owner}/{repo}/pages/builds", http_method="POST")
    def reposRequestPagesBuild(self): pass
    # To call: GhSDK.resource("repo").reposRequestPagesBuild(...)
    # POST https://api.github.com/repos/{owner}/{repo}/pages/builds
    # Summary: Request a GitHub Pages build
    # Description: You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
    #
    #   Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", http_method="POST")
    def reposSetAdminBranchProtection(self): pass
    # To call: GhSDK.resource("repo").reposSetAdminBranchProtection(...)
    # POST https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
    # Summary: Set admin branch protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", http_method="PUT")
    def reposSetAppAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposSetAppAccessRestrictions(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
    # Summary: Set app access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", http_method="PUT")
    def reposSetStatusCheckContexts(self): pass
    # To call: GhSDK.resource("repo").reposSetStatusCheckContexts(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
    # Summary: Set status check contexts
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", http_method="PUT")
    def reposSetTeamAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposSetTeamAccessRestrictions(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
    # Summary: Set team access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", http_method="PUT")
    def reposSetUserAccessRestrictions(self): pass
    # To call: GhSDK.resource("repo").reposSetUserAccessRestrictions(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
    # Summary: Set user access restrictions
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
    #
    #   | Type    | Description                                                                                                                   |
    #   | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
    #   | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}/tests", http_method="POST")
    def reposTestPushWebhook(self): pass
    # To call: GhSDK.resource("repo").reposTestPushWebhook(...)
    # POST https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests
    # Summary: Test the push repository webhook
    # Description: This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
    #
    #   **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`


    @GhSDK.resource_method("repos/{owner}/{repo}/transfer", http_method="POST")
    def reposTransfer(self): pass
    # To call: GhSDK.resource("repo").reposTransfer(...)
    # POST https://api.github.com/repos/{owner}/{repo}/transfer
    # Summary: Transfer a repository
    # Description: A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
    #   You must use a personal access token (classic) or an OAuth token for this endpoint. An installation access token or a fine-grained personal access token cannot be used because they are only granted access to a single account.


    @GhSDK.resource_method("repos/{owner}/{repo}", http_method="PATCH")
    def reposUpdate(self): pass
    # To call: GhSDK.resource("repo").reposUpdate(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}
    # Summary: Update a repository
    # Description: **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection", http_method="PUT")
    def reposUpdateBranchProtection(self): pass
    # To call: GhSDK.resource("repo").reposUpdateBranchProtection(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection
    # Summary: Update branch protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Protecting a branch requires admin or owner permissions to the repository.
    #
    #   **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
    #
    #   **Note**: The list of users, apps, and teams in total is limited to 100 items.


    @GhSDK.resource_method("repos/{owner}/{repo}/comments/{comment_id}", http_method="PATCH")
    def reposUpdateCommitComment(self): pass
    # To call: GhSDK.resource("repo").reposUpdateCommitComment(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/comments/{comment_id}
    # Summary: Update a commit comment


    @GhSDK.resource_method("repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", http_method="PUT")
    def reposUpdateDeploymentBranchPolicy(self): pass
    # To call: GhSDK.resource("repo").reposUpdateDeploymentBranchPolicy(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
    # Summary: Update a deployment branch policy
    # Description: Updates a deployment branch policy for an environment.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/pages", http_method="PUT")
    def reposUpdateInformationAboutPagesSite(self): pass
    # To call: GhSDK.resource("repo").reposUpdateInformationAboutPagesSite(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/pages
    # Summary: Update information about a GitHub Pages site
    # Description: Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
    #
    #   To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.


    @GhSDK.resource_method("repos/{owner}/{repo}/invitations/{invitation_id}", http_method="PATCH")
    def reposUpdateInvitation(self): pass
    # To call: GhSDK.resource("repo").reposUpdateInvitation(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/invitations/{invitation_id}
    # Summary: Update a repository invitation


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", http_method="PATCH")
    def reposUpdatePullRequestReviewProtection(self): pass
    # To call: GhSDK.resource("repo").reposUpdatePullRequestReviewProtection(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
    # Summary: Update pull request review protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
    #
    #   **Note**: Passing new arrays of `users` and `teams` replaces their previous values.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}", http_method="PATCH")
    def reposUpdateRelease(self): pass
    # To call: GhSDK.resource("repo").reposUpdateRelease(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/releases/{release_id}
    # Summary: Update a release
    # Description: Users with push access to the repository can edit a release.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/assets/{asset_id}", http_method="PATCH")
    def reposUpdateReleaseAsset(self): pass
    # To call: GhSDK.resource("repo").reposUpdateReleaseAsset(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/releases/assets/{asset_id}
    # Summary: Update a release asset
    # Description: Users with push access to the repository can edit a release asset.


    @GhSDK.resource_method("repos/{owner}/{repo}/rulesets/{ruleset_id}", http_method="PUT")
    def reposUpdateRepoRuleset(self): pass
    # To call: GhSDK.resource("repo").reposUpdateRepoRuleset(...)
    # PUT https://api.github.com/repos/{owner}/{repo}/rulesets/{ruleset_id}
    # Summary: Update a repository ruleset
    # Description: Update a ruleset for a repository.
    #
    # Parameters:
    #     ruleset_id:
    #       description: The ID of the ruleset.
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", http_method="PATCH")
    def reposUpdateStatusCheckProtection(self): pass
    # To call: GhSDK.resource("repo").reposUpdateStatusCheckProtection(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
    # Summary: Update status check protection
    # Description: Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}", http_method="PATCH")
    def reposUpdateWebhook(self): pass
    # To call: GhSDK.resource("repo").reposUpdateWebhook(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}
    # Summary: Update a repository webhook
    # Description: Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."


    @GhSDK.resource_method("repos/{owner}/{repo}/hooks/{hook_id}/config", http_method="PATCH")
    def reposUpdateWebhookConfigForRepo(self): pass
    # To call: GhSDK.resource("repo").reposUpdateWebhookConfigForRepo(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config
    # Summary: Update a webhook configuration for a repository
    # Description: Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
    #
    #   Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.


    @GhSDK.resource_method("repos/{owner}/{repo}/releases/{release_id}/assets", http_method="POST")
    def reposUploadReleaseAsset(self): pass
    # To call: GhSDK.resource("repo").reposUploadReleaseAsset(...)
    # POST https://api.github.com/repos/{owner}/{repo}/releases/{release_id}/assets
    # Summary: Upload a release asset
    # Description: This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
    #   the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
    #
    #   You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
    #
    #   Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
    #
    #   `application/zip`
    #
    #   GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
    #   you'll still need to pass your authentication to be able to upload an asset.
    #
    #   When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
    #
    #   **Notes:**
    #   *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
    #   endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
    #   *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release).
    #   *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
    #
    # Parameters:
    #     label:
    #       description: ''
    #       in: query
    #       required: false
    #     name:
    #       description: ''
    #       in: query
    #       required: true
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", http_method="GET")
    def secretScanningGetAlert(self): pass
    # To call: GhSDK.resource("repo").secretScanningGetAlert(...)
    # GET https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
    # Summary: Get a secret scanning alert
    # Description: Gets a single secret scanning alert detected in an eligible repository.
    #   To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    #   For public repositories, you may instead use the `public_repo` scope.
    #
    #   GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/secret-scanning/alerts", http_method="GET")
    def secretScanningListAlertsForRepo(self): pass
    # To call: GhSDK.resource("repo").secretScanningListAlertsForRepo(...)
    # GET https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts
    # Summary: List secret scanning alerts for a repository
    # Description: Lists secret scanning alerts for an eligible repository, from newest to oldest.
    #   To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    #   For public repositories, you may instead use the `public_repo` scope.
    #
    #   GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations", http_method="GET")
    def secretScanningListLocationsForAlert(self): pass
    # To call: GhSDK.resource("repo").secretScanningListLocationsForAlert(...)
    # GET https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations
    # Summary: List locations for a secret scanning alert
    # Description: Lists all locations for a given secret scanning alert for an eligible repository.
    #   To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    #   For public repositories, you may instead use the `public_repo` scope.
    #
    #   GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", http_method="PATCH")
    def secretScanningUpdateAlert(self): pass
    # To call: GhSDK.resource("repo").secretScanningUpdateAlert(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
    # Summary: Update a secret scanning alert
    # Description: Updates the status of a secret scanning alert in an eligible repository.
    #   To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
    #   For public repositories, you may instead use the `public_repo` scope.
    #
    #   GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.


    @GhSDK.resource_method("repos/{owner}/{repo}/security-advisories/reports", http_method="POST")
    def securityAdvisoriesCreatePrivateVulnerabilityReport(self): pass
    # To call: GhSDK.resource("repo").securityAdvisoriesCreatePrivateVulnerabilityReport(...)
    # POST https://api.github.com/repos/{owner}/{repo}/security-advisories/reports
    # Summary: Privately report a security vulnerability
    # Description: Report a security vulnerability to the maintainers of the repository.
    #   See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.


    @GhSDK.resource_method("repos/{owner}/{repo}/security-advisories", http_method="POST")
    def securityAdvisoriesCreateRepositoryAdvisory(self): pass
    # To call: GhSDK.resource("repo").securityAdvisoriesCreateRepositoryAdvisory(...)
    # POST https://api.github.com/repos/{owner}/{repo}/security-advisories
    # Summary: Create a repository security advisory
    # Description: Creates a new repository security advisory.
    #   You must authenticate using an access token with the `repo` scope or `repository_advisories:write` permission to use this endpoint.
    #
    #   In order to create a draft repository security advisory, you must be a security manager or administrator of that repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve", http_method="POST")
    def securityAdvisoriesCreateRepositoryAdvisoryCveRequest(self): pass
    # To call: GhSDK.resource("repo").securityAdvisoriesCreateRepositoryAdvisoryCveRequest(...)
    # POST https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve
    # Summary: Request a CVE for a repository security advisory
    # Description: If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
    #
    #   You may request a CVE for public repositories, but cannot do so for private repositories.
    #
    #   You must authenticate using an access token with the `repo` scope or `repository_advisories:write` permission to use this endpoint.
    #
    #   In order to request a CVE for a repository security advisory, you must be a security manager or administrator of that repository.


    @GhSDK.resource_method("repos/{owner}/{repo}/security-advisories/{ghsa_id}", http_method="GET")
    def securityAdvisoriesGetRepositoryAdvisory(self): pass
    # To call: GhSDK.resource("repo").securityAdvisoriesGetRepositoryAdvisory(...)
    # GET https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}
    # Summary: Get a repository security advisory
    # Description: Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    #   You can access any published security advisory on a public repository.
    #   You must authenticate using an access token with the `repo` scope or `repository_advisories:read` permission
    #   in order to get a published security advisory in a private repository, or any unpublished security advisory that you have access to.
    #
    #   You can access an unpublished security advisory from a repository if you are a security manager or administrator of that repository, or if you are a
    #   collaborator on the security advisory.


    @GhSDK.resource_method("repos/{owner}/{repo}/security-advisories", http_method="GET")
    def securityAdvisoriesListRepositoryAdvisories(self): pass
    # To call: GhSDK.resource("repo").securityAdvisoriesListRepositoryAdvisories(...)
    # GET https://api.github.com/repos/{owner}/{repo}/security-advisories
    # Summary: List repository security advisories
    # Description: Lists security advisories in a repository.
    #   You must authenticate using an access token with the `repo` scope or `repository_advisories:read` permission
    #   in order to get published security advisories in a private repository, or any unpublished security advisories that you have access to.
    #
    #   You can access unpublished security advisories from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on any security advisory.
    #
    # Parameters:
    #     per_page:
    #       description: Number of advisories to return per page.
    #       in: query
    #       required: false
    #     sort:
    #       description: The property to sort the results by.
    #       in: query
    #       required: false
    #     state:
    #       description: Filter by state of the repository advisories. Only advisories of
    #         this state will be returned.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("repos/{owner}/{repo}/security-advisories/{ghsa_id}", http_method="PATCH")
    def securityAdvisoriesUpdateRepositoryAdvisory(self): pass
    # To call: GhSDK.resource("repo").securityAdvisoriesUpdateRepositoryAdvisory(...)
    # PATCH https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}
    # Summary: Update a repository security advisory
    # Description: Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
    #   You must authenticate using an access token with the `repo` scope or `repository_advisories:write` permission to use this endpoint.
    #
    #   In order to update any security advisory, you must be a security manager or administrator of that repository,
    #   or a collaborator on the repository security advisory.


@GhSDK.resource_class("repository", "")
class RepositoryResource(GhSDK):
# To instantiate: GhSDK.resource("repository")
# Number of methods: 11
#     actionsCreateEnvironmentVariable
#     actionsCreateOrUpdateEnvironmentSecret
#     actionsDeleteEnvironmentSecret
#     actionsDeleteEnvironmentVariable
#     actionsGetEnvironmentPublicKey
#     actionsGetEnvironmentSecret
#     actionsGetEnvironmentVariable
#     actionsListEnvironmentSecrets
#     actionsListEnvironmentVariables
#     actionsUpdateEnvironmentVariable
#     reposListPublic

    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/variables", http_method="POST")
    def actionsCreateEnvironmentVariable(self): pass
    # To call: GhSDK.resource("repository").actionsCreateEnvironmentVariable(...)
    # POST https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables
    # Summary: Create an environment variable
    # Description: Create an environment variable that you can reference in a GitHub Actions workflow.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `environment:write` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", http_method="PUT")
    def actionsCreateOrUpdateEnvironmentSecret(self): pass
    # To call: GhSDK.resource("repository").actionsCreateOrUpdateEnvironmentSecret(...)
    # PUT https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
    # Summary: Create or update an environment secret
    # Description: Creates or updates an environment secret with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", http_method="DELETE")
    def actionsDeleteEnvironmentSecret(self): pass
    # To call: GhSDK.resource("repository").actionsDeleteEnvironmentSecret(...)
    # DELETE https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
    # Summary: Delete an environment secret
    # Description: Deletes a secret in an environment using the secret name.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/variables/{name}", http_method="DELETE")
    def actionsDeleteEnvironmentVariable(self): pass
    # To call: GhSDK.resource("repository").actionsDeleteEnvironmentVariable(...)
    # DELETE https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables/{name}
    # Summary: Delete an environment variable
    # Description: Deletes an environment variable using the variable name.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `environment:write` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/secrets/public-key", http_method="GET")
    def actionsGetEnvironmentPublicKey(self): pass
    # To call: GhSDK.resource("repository").actionsGetEnvironmentPublicKey(...)
    # GET https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/public-key
    # Summary: Get an environment public key
    # Description: Get the public key for an environment, which you need to encrypt environment
    #   secrets. You need to encrypt a secret before you can create or update secrets.
    #
    #   Anyone with read access to the repository can use this endpoint.
    #   If the repository is private you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", http_method="GET")
    def actionsGetEnvironmentSecret(self): pass
    # To call: GhSDK.resource("repository").actionsGetEnvironmentSecret(...)
    # GET https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
    # Summary: Get an environment secret
    # Description: Gets a single environment secret without revealing its encrypted value.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/variables/{name}", http_method="GET")
    def actionsGetEnvironmentVariable(self): pass
    # To call: GhSDK.resource("repository").actionsGetEnvironmentVariable(...)
    # GET https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables/{name}
    # Summary: Get an environment variable
    # Description: Gets a specific variable in an environment.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `environments:read` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/secrets", http_method="GET")
    def actionsListEnvironmentSecrets(self): pass
    # To call: GhSDK.resource("repository").actionsListEnvironmentSecrets(...)
    # GET https://api.github.com/repositories/{repository_id}/environments/{environment_name}/secrets
    # Summary: List environment secrets
    # Description: Lists all secrets available in an environment without revealing their
    #   encrypted values.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   GitHub Apps must have the `secrets` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read secrets.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/variables", http_method="GET")
    def actionsListEnvironmentVariables(self): pass
    # To call: GhSDK.resource("repository").actionsListEnvironmentVariables(...)
    # GET https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables
    # Summary: List environment variables
    # Description: Lists all environment variables.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `environments:read` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repositories/{repository_id}/environments/{environment_name}/variables/{name}", http_method="PATCH")
    def actionsUpdateEnvironmentVariable(self): pass
    # To call: GhSDK.resource("repository").actionsUpdateEnvironmentVariable(...)
    # PATCH https://api.github.com/repositories/{repository_id}/environments/{environment_name}/variables/{name}
    # Summary: Update an environment variable
    # Description: Updates an environment variable that you can reference in a GitHub Actions workflow.
    #
    #   You must authenticate using an access token with the `repo` scope to use this endpoint.
    #   If the repository is private, you must use an access token with the `repo` scope.
    #   GitHub Apps must have the `environment:write` repository permission to use this endpoint.
    #   Authenticated users must have collaborator access to a repository to create, update, or read variables.


    @GhSDK.resource_method("repositories", http_method="GET")
    def reposListPublic(self): pass
    # To call: GhSDK.resource("repository").reposListPublic(...)
    # GET https://api.github.com/repositories
    # Summary: List public repositories
    # Description: Lists all public repositories in the order that they were created.
    #
    #   Note:
    #   - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
    #   - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.


@GhSDK.resource_class("", "")
class Resource(GhSDK):
# To instantiate: GhSDK.resource("")
# Number of methods: 1
#     metaRoot

    @GhSDK.resource_method("", http_method="GET")
    def metaRoot(self): pass
    # To call: GhSDK.resource("").metaRoot(...)
    # GET https://api.github.com
    # Summary: GitHub API Root
    # Description: Get Hypermedia links to resources accessible in GitHub's REST API


@GhSDK.resource_class("search", "")
class SearchResource(GhSDK):
# To instantiate: GhSDK.resource("search")
# Number of methods: 7
#     searchCode
#     searchCommits
#     searchIssuesAndPullRequests
#     searchLabels
#     searchRepos
#     searchTopics
#     searchUsers

    @GhSDK.resource_method("search/code", http_method="GET")
    def searchCode(self): pass
    # To call: GhSDK.resource("search").searchCode(...)
    # GET https://api.github.com/search/code
    # Summary: Search code
    # Description: Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
    #
    #   When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    #
    #   For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
    #
    #   `q=addClass+in:file+language:js+repo:jquery/jquery`
    #
    #   This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
    #
    #   Considerations for code search:
    #
    #   Due to the complexity of searching code, there are a few restrictions on how searches are performed:
    #
    #   *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
    #   *   Only files smaller than 384 KB are searchable.
    #   *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
    #   language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
    #
    #   This endpoint requires you to authenticate and limits you to 10 requests per minute.
    #
    # Parameters:
    #     order:
    #       description: '**This field is deprecated.** Determines whether the first search
    #         result returned is the highest number of matches (`desc`) or lowest number of
    #         matches (`asc`). This parameter is ignored unless you provide `sort`. '
    #       in: query
    #       required: false
    #     q:
    #       description: The query contains one or more search keywords and qualifiers. Qualifiers
    #         allow you to limit your search to specific areas of GitHub. The REST API supports
    #         the same qualifiers as the web interface for GitHub. To learn more about the
    #         format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
    #         See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)"
    #         for a detailed list of qualifiers.
    #       in: query
    #       required: true
    #     sort:
    #       description: '**This field is deprecated.** Sorts the results of your query. Can
    #         only be `indexed`, which indicates how recently a file has been indexed by the
    #         GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("search/commits", http_method="GET")
    def searchCommits(self): pass
    # To call: GhSDK.resource("search").searchCommits(...)
    # GET https://api.github.com/search/commits
    # Summary: Search commits
    # Description: Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
    #
    #   When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
    #   metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    #
    #   For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
    #
    #   `q=repo:octocat/Spoon-Knife+css`
    #
    # Parameters:
    #     q:
    #       description: The query contains one or more search keywords and qualifiers. Qualifiers
    #         allow you to limit your search to specific areas of GitHub. The REST API supports
    #         the same qualifiers as the web interface for GitHub. To learn more about the
    #         format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
    #         See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)"
    #         for a detailed list of qualifiers.
    #       in: query
    #       required: true
    #     sort:
    #       description: 'Sorts the results of your query by `author-date` or `committer-date`.
    #         Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("search/issues", http_method="GET")
    def searchIssuesAndPullRequests(self): pass
    # To call: GhSDK.resource("search").searchIssuesAndPullRequests(...)
    # GET https://api.github.com/search/issues
    # Summary: Search issues and pull requests
    # Description: Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
    #
    #   When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
    #   search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    #
    #   For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
    #
    #   `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
    #
    #   This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
    #
    #   **Note:** For requests made by GitHub Apps with a user access token, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
    #
    # Parameters:
    #     q:
    #       description: The query contains one or more search keywords and qualifiers. Qualifiers
    #         allow you to limit your search to specific areas of GitHub. The REST API supports
    #         the same qualifiers as the web interface for GitHub. To learn more about the
    #         format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
    #         See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)"
    #         for a detailed list of qualifiers.
    #       in: query
    #       required: true
    #     sort:
    #       description: 'Sorts the results of your query by the number of `comments`, `reactions`,
    #         `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`,
    #         `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results
    #         by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("search/labels", http_method="GET")
    def searchLabels(self): pass
    # To call: GhSDK.resource("search").searchLabels(...)
    # GET https://api.github.com/search/labels
    # Summary: Search labels
    # Description: Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
    #
    #   When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    #
    #   For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
    #
    #   `q=bug+defect+enhancement&repository_id=64778136`
    #
    #   The labels that best match the query appear first in the search results.
    #
    # Parameters:
    #     q:
    #       description: The search keywords. This endpoint does not accept qualifiers in
    #         the query. To learn more about the format of the query, see [Constructing a
    #         search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
    #       in: query
    #       required: true
    #     repository_id:
    #       description: The id of the repository.
    #       in: query
    #       required: true
    #     sort:
    #       description: 'Sorts the results of your query by when the label was `created`
    #         or `updated`. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("search/repositories", http_method="GET")
    def searchRepos(self): pass
    # To call: GhSDK.resource("search").searchRepos(...)
    # GET https://api.github.com/search/repositories
    # Summary: Search repositories
    # Description: Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
    #
    #   When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    #
    #   For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
    #
    #   `q=tetris+language:assembly&sort=stars&order=desc`
    #
    #   This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
    #
    # Parameters:
    #     q:
    #       description: The query contains one or more search keywords and qualifiers. Qualifiers
    #         allow you to limit your search to specific areas of GitHub. The REST API supports
    #         the same qualifiers as the web interface for GitHub. To learn more about the
    #         format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
    #         See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)"
    #         for a detailed list of qualifiers.
    #       in: query
    #       required: true
    #     sort:
    #       description: 'Sorts the results of your query by number of `stars`, `forks`, or
    #         `help-wanted-issues` or how recently the items were `updated`. Default: [best
    #         match](https://docs.github.com/rest/search/search#ranking-search-results)'
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("search/topics", http_method="GET")
    def searchTopics(self): pass
    # To call: GhSDK.resource("search").searchTopics(...)
    # GET https://api.github.com/search/topics
    # Summary: Search topics
    # Description: Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
    #
    #   When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    #
    #   For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
    #
    #   `q=ruby+is:featured`
    #
    #   This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
    #
    # Parameters:
    #     q:
    #       description: The query contains one or more search keywords and qualifiers. Qualifiers
    #         allow you to limit your search to specific areas of GitHub. The REST API supports
    #         the same qualifiers as the web interface for GitHub. To learn more about the
    #         format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
    #       in: query
    #       required: true
    #


    @GhSDK.resource_method("search/users", http_method="GET")
    def searchUsers(self): pass
    # To call: GhSDK.resource("search").searchUsers(...)
    # GET https://api.github.com/search/users
    # Summary: Search users
    # Description: Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
    #
    #   When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
    #
    #   For example, if you're looking for a list of popular users, you might try this query:
    #
    #   `q=tom+repos:%3E42+followers:%3E1000`
    #
    #   This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
    #
    #   This endpoint does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs), that you are authorized to view. For more information, see "[GraphQL Queries](https://docs.github.com/graphql/reference/queries#search)."
    #
    # Parameters:
    #     q:
    #       description: The query contains one or more search keywords and qualifiers. Qualifiers
    #         allow you to limit your search to specific areas of GitHub. The REST API supports
    #         the same qualifiers as the web interface for GitHub. To learn more about the
    #         format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query).
    #         See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)"
    #         for a detailed list of qualifiers.
    #       in: query
    #       required: true
    #     sort:
    #       description: 'Sorts the results of your query by number of `followers` or `repositories`,
    #         or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/search/search#ranking-search-results)'
    #       in: query
    #       required: false
    #


@GhSDK.resource_class("team", "")
class TeamResource(GhSDK):
# To instantiate: GhSDK.resource("team")
# Number of methods: 34
#     reactionsCreateForTeamDiscussionCommentLegacy
#     reactionsCreateForTeamDiscussionLegacy
#     reactionsListForTeamDiscussionCommentLegacy
#     reactionsListForTeamDiscussionLegacy
#     teamsAddMemberLegacy
#     teamsAddOrUpdateMembershipForUserLegacy
#     teamsAddOrUpdateProjectPermissionsLegacy
#     teamsAddOrUpdateRepoPermissionsLegacy
#     teamsCheckPermissionsForProjectLegacy
#     teamsCheckPermissionsForRepoLegacy
#     teamsCreateDiscussionCommentLegacy
#     teamsCreateDiscussionLegacy
#     teamsDeleteDiscussionCommentLegacy
#     teamsDeleteDiscussionLegacy
#     teamsDeleteLegacy
#     teamsGetDiscussionCommentLegacy
#     teamsGetDiscussionLegacy
#     teamsGetLegacy
#     teamsGetMemberLegacy
#     teamsGetMembershipForUserLegacy
#     teamsListChildLegacy
#     teamsListDiscussionCommentsLegacy
#     teamsListDiscussionsLegacy
#     teamsListMembersLegacy
#     teamsListPendingInvitationsLegacy
#     teamsListProjectsLegacy
#     teamsListReposLegacy
#     teamsRemoveMemberLegacy
#     teamsRemoveMembershipForUserLegacy
#     teamsRemoveProjectLegacy
#     teamsRemoveRepoLegacy
#     teamsUpdateDiscussionCommentLegacy
#     teamsUpdateDiscussionLegacy
#     teamsUpdateLegacy

    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", http_method="POST")
    def reactionsCreateForTeamDiscussionCommentLegacy(self): pass
    # To call: GhSDK.resource("team").reactionsCreateForTeamDiscussionCommentLegacy(...)
    # POST https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
    # Summary: Create reaction for a team discussion comment (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
    #
    #   Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/reactions", http_method="POST")
    def reactionsCreateForTeamDiscussionLegacy(self): pass
    # To call: GhSDK.resource("team").reactionsCreateForTeamDiscussionLegacy(...)
    # POST https://api.github.com/teams/{team_id}/discussions/{discussion_number}/reactions
    # Summary: Create reaction for a team discussion (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.
    #
    #   Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", http_method="GET")
    def reactionsListForTeamDiscussionCommentLegacy(self): pass
    # To call: GhSDK.resource("team").reactionsListForTeamDiscussionCommentLegacy(...)
    # GET https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
    # Summary: List reactions for a team discussion comment (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
    #
    #   List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to a team discussion comment.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/reactions", http_method="GET")
    def reactionsListForTeamDiscussionLegacy(self): pass
    # To call: GhSDK.resource("team").reactionsListForTeamDiscussionLegacy(...)
    # GET https://api.github.com/teams/{team_id}/discussions/{discussion_number}/reactions
    # Summary: List reactions for a team discussion (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.
    #
    #   List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    # Parameters:
    #     content:
    #       description: Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions).
    #         Omit this parameter to list all reactions to a team discussion.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("teams/{team_id}/members/{username}", http_method="PUT")
    def teamsAddMemberLegacy(self): pass
    # To call: GhSDK.resource("team").teamsAddMemberLegacy(...)
    # PUT https://api.github.com/teams/{team_id}/members/{username}
    # Summary: Add team member (Legacy)
    # Description: The "Add team member" endpoint (described below) is deprecated.
    #
    #   We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
    #
    #   Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
    #
    #   **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    #
    #   Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."


    @GhSDK.resource_method("teams/{team_id}/memberships/{username}", http_method="PUT")
    def teamsAddOrUpdateMembershipForUserLegacy(self): pass
    # To call: GhSDK.resource("team").teamsAddOrUpdateMembershipForUserLegacy(...)
    # PUT https://api.github.com/teams/{team_id}/memberships/{username}
    # Summary: Add or update team membership for a user (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
    #
    #   Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
    #
    #   **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
    #
    #   If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
    #
    #   If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.


    @GhSDK.resource_method("teams/{team_id}/projects/{project_id}", http_method="PUT")
    def teamsAddOrUpdateProjectPermissionsLegacy(self): pass
    # To call: GhSDK.resource("team").teamsAddOrUpdateProjectPermissionsLegacy(...)
    # PUT https://api.github.com/teams/{team_id}/projects/{project_id}
    # Summary: Add or update team project permissions (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions) endpoint.
    #
    #   Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.


    @GhSDK.resource_method("teams/{team_id}/repos/{owner}/{repo}", http_method="PUT")
    def teamsAddOrUpdateRepoPermissionsLegacy(self): pass
    # To call: GhSDK.resource("team").teamsAddOrUpdateRepoPermissionsLegacy(...)
    # PUT https://api.github.com/teams/{team_id}/repos/{owner}/{repo}
    # Summary: Add or update team repository permissions (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
    #
    #   To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
    #
    #   Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."


    @GhSDK.resource_method("teams/{team_id}/projects/{project_id}", http_method="GET")
    def teamsCheckPermissionsForProjectLegacy(self): pass
    # To call: GhSDK.resource("team").teamsCheckPermissionsForProjectLegacy(...)
    # GET https://api.github.com/teams/{team_id}/projects/{project_id}
    # Summary: Check team permissions for a project (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project) endpoint.
    #
    #   Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.


    @GhSDK.resource_method("teams/{team_id}/repos/{owner}/{repo}", http_method="GET")
    def teamsCheckPermissionsForRepoLegacy(self): pass
    # To call: GhSDK.resource("team").teamsCheckPermissionsForRepoLegacy(...)
    # GET https://api.github.com/teams/{team_id}/repos/{owner}/{repo}
    # Summary: Check team permissions for a repository (Legacy)
    # Description: **Note**: Repositories inherited through a parent team will also be checked.
    #
    #   **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
    #
    #   You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/comments", http_method="POST")
    def teamsCreateDiscussionCommentLegacy(self): pass
    # To call: GhSDK.resource("team").teamsCreateDiscussionCommentLegacy(...)
    # POST https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments
    # Summary: Create a discussion comment (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
    #
    #   Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("teams/{team_id}/discussions", http_method="POST")
    def teamsCreateDiscussionLegacy(self): pass
    # To call: GhSDK.resource("team").teamsCreateDiscussionLegacy(...)
    # POST https://api.github.com/teams/{team_id}/discussions
    # Summary: Create a discussion (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
    #
    #   Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
    #
    #   This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", http_method="DELETE")
    def teamsDeleteDiscussionCommentLegacy(self): pass
    # To call: GhSDK.resource("team").teamsDeleteDiscussionCommentLegacy(...)
    # DELETE https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
    # Summary: Delete a discussion comment (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
    #
    #   Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}", http_method="DELETE")
    def teamsDeleteDiscussionLegacy(self): pass
    # To call: GhSDK.resource("team").teamsDeleteDiscussionLegacy(...)
    # DELETE https://api.github.com/teams/{team_id}/discussions/{discussion_number}
    # Summary: Delete a discussion (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
    #
    #   Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}", http_method="DELETE")
    def teamsDeleteLegacy(self): pass
    # To call: GhSDK.resource("team").teamsDeleteLegacy(...)
    # DELETE https://api.github.com/teams/{team_id}
    # Summary: Delete a team (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
    #
    #   To delete a team, the authenticated user must be an organization owner or team maintainer.
    #
    #   If you are an organization owner, deleting a parent team will delete all of its child teams as well.


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", http_method="GET")
    def teamsGetDiscussionCommentLegacy(self): pass
    # To call: GhSDK.resource("team").teamsGetDiscussionCommentLegacy(...)
    # GET https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
    # Summary: Get a discussion comment (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
    #
    #   Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}", http_method="GET")
    def teamsGetDiscussionLegacy(self): pass
    # To call: GhSDK.resource("team").teamsGetDiscussionLegacy(...)
    # GET https://api.github.com/teams/{team_id}/discussions/{discussion_number}
    # Summary: Get a discussion (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.
    #
    #   Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}", http_method="GET")
    def teamsGetLegacy(self): pass
    # To call: GhSDK.resource("team").teamsGetLegacy(...)
    # GET https://api.github.com/teams/{team_id}
    # Summary: Get a team (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.


    @GhSDK.resource_method("teams/{team_id}/members/{username}", http_method="GET")
    def teamsGetMemberLegacy(self): pass
    # To call: GhSDK.resource("team").teamsGetMemberLegacy(...)
    # GET https://api.github.com/teams/{team_id}/members/{username}
    # Summary: Get team member (Legacy)
    # Description: The "Get team member" endpoint (described below) is deprecated.
    #
    #   We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
    #
    #   To list members in a team, the team must be visible to the authenticated user.


    @GhSDK.resource_method("teams/{team_id}/memberships/{username}", http_method="GET")
    def teamsGetMembershipForUserLegacy(self): pass
    # To call: GhSDK.resource("team").teamsGetMembershipForUserLegacy(...)
    # GET https://api.github.com/teams/{team_id}/memberships/{username}
    # Summary: Get team membership for a user (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
    #
    #   Team members will include the members of child teams.
    #
    #   To get a user's membership with a team, the team must be visible to the authenticated user.
    #
    #   **Note:**
    #   The response contains the `state` of the membership and the member's `role`.
    #
    #   The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).


    @GhSDK.resource_method("teams/{team_id}/teams", http_method="GET")
    def teamsListChildLegacy(self): pass
    # To call: GhSDK.resource("team").teamsListChildLegacy(...)
    # GET https://api.github.com/teams/{team_id}/teams
    # Summary: List child teams (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/comments", http_method="GET")
    def teamsListDiscussionCommentsLegacy(self): pass
    # To call: GhSDK.resource("team").teamsListDiscussionCommentsLegacy(...)
    # GET https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments
    # Summary: List discussion comments (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
    #
    #   List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}/discussions", http_method="GET")
    def teamsListDiscussionsLegacy(self): pass
    # To call: GhSDK.resource("team").teamsListDiscussionsLegacy(...)
    # GET https://api.github.com/teams/{team_id}/discussions
    # Summary: List discussions (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.
    #
    #   List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}/members", http_method="GET")
    def teamsListMembersLegacy(self): pass
    # To call: GhSDK.resource("team").teamsListMembersLegacy(...)
    # GET https://api.github.com/teams/{team_id}/members
    # Summary: List team members (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members) endpoint.
    #
    #   Team members will include the members of child teams.
    #
    # Parameters:
    #     role:
    #       description: Filters members returned by their role in the team.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("teams/{team_id}/invitations", http_method="GET")
    def teamsListPendingInvitationsLegacy(self): pass
    # To call: GhSDK.resource("team").teamsListPendingInvitationsLegacy(...)
    # GET https://api.github.com/teams/{team_id}/invitations
    # Summary: List pending team invitations (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
    #
    #   The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.


    @GhSDK.resource_method("teams/{team_id}/projects", http_method="GET")
    def teamsListProjectsLegacy(self): pass
    # To call: GhSDK.resource("team").teamsListProjectsLegacy(...)
    # GET https://api.github.com/teams/{team_id}/projects
    # Summary: List team projects (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/teams/teams#list-team-projects) endpoint.
    #
    #   Lists the organization projects for a team.


    @GhSDK.resource_method("teams/{team_id}/repos", http_method="GET")
    def teamsListReposLegacy(self): pass
    # To call: GhSDK.resource("team").teamsListReposLegacy(...)
    # GET https://api.github.com/teams/{team_id}/repos
    # Summary: List team repositories (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.


    @GhSDK.resource_method("teams/{team_id}/members/{username}", http_method="DELETE")
    def teamsRemoveMemberLegacy(self): pass
    # To call: GhSDK.resource("team").teamsRemoveMemberLegacy(...)
    # DELETE https://api.github.com/teams/{team_id}/members/{username}
    # Summary: Remove team member (Legacy)
    # Description: The "Remove team member" endpoint (described below) is deprecated.
    #
    #   We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
    #
    #   Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
    #
    #   **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


    @GhSDK.resource_method("teams/{team_id}/memberships/{username}", http_method="DELETE")
    def teamsRemoveMembershipForUserLegacy(self): pass
    # To call: GhSDK.resource("team").teamsRemoveMembershipForUserLegacy(...)
    # DELETE https://api.github.com/teams/{team_id}/memberships/{username}
    # Summary: Remove team membership for a user (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
    #
    #   Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    #
    #   To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
    #
    #   **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."


    @GhSDK.resource_method("teams/{team_id}/projects/{project_id}", http_method="DELETE")
    def teamsRemoveProjectLegacy(self): pass
    # To call: GhSDK.resource("team").teamsRemoveProjectLegacy(...)
    # DELETE https://api.github.com/teams/{team_id}/projects/{project_id}
    # Summary: Remove a project from a team (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team) endpoint.
    #
    #   Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.


    @GhSDK.resource_method("teams/{team_id}/repos/{owner}/{repo}", http_method="DELETE")
    def teamsRemoveRepoLegacy(self): pass
    # To call: GhSDK.resource("team").teamsRemoveRepoLegacy(...)
    # DELETE https://api.github.com/teams/{team_id}/repos/{owner}/{repo}
    # Summary: Remove a repository from a team (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
    #
    #   If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", http_method="PATCH")
    def teamsUpdateDiscussionCommentLegacy(self): pass
    # To call: GhSDK.resource("team").teamsUpdateDiscussionCommentLegacy(...)
    # PATCH https://api.github.com/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
    # Summary: Update a discussion comment (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
    #
    #   Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}/discussions/{discussion_number}", http_method="PATCH")
    def teamsUpdateDiscussionLegacy(self): pass
    # To call: GhSDK.resource("team").teamsUpdateDiscussionLegacy(...)
    # PATCH https://api.github.com/teams/{team_id}/discussions/{discussion_number}
    # Summary: Update a discussion (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
    #
    #   Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("teams/{team_id}", http_method="PATCH")
    def teamsUpdateLegacy(self): pass
    # To call: GhSDK.resource("team").teamsUpdateLegacy(...)
    # PATCH https://api.github.com/teams/{team_id}
    # Summary: Update a team (Legacy)
    # Description: **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
    #
    #   To edit a team, the authenticated user must either be an organization owner or a team maintainer.
    #
    #   **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.


@GhSDK.resource_class("user", "")
class UserResource(GhSDK):
# To instantiate: GhSDK.resource("user")
# Number of methods: 127
#     activityCheckRepoIsStarredByAuthenticatedUser
#     activityListEventsForAuthenticatedUser
#     activityListOrgEventsForAuthenticatedUser
#     activityListPublicEventsForUser
#     activityListReceivedEventsForUser
#     activityListReceivedPublicEventsForUser
#     activityListReposStarredByAuthenticatedUser
#     activityListReposStarredByUser
#     activityListReposWatchedByUser
#     activityListWatchedReposForAuthenticatedUser
#     activityStarRepoForAuthenticatedUser
#     activityUnstarRepoForAuthenticatedUser
#     appsAddRepoToInstallationForAuthenticatedUser
#     appsGetUserInstallation
#     appsListInstallationReposForAuthenticatedUser
#     appsListInstallationsForAuthenticatedUser
#     appsListSubscriptionsForAuthenticatedUser
#     appsListSubscriptionsForAuthenticatedUserStubbed
#     appsRemoveRepoFromInstallationForAuthenticatedUser
#     billingGetGithubActionsBillingUser
#     billingGetGithubPackagesBillingUser
#     billingGetSharedStorageBillingUser
#     codespacesAddRepositoryForSecretForAuthenticatedUser
#     codespacesCodespaceMachinesForAuthenticatedUser
#     codespacesCreateForAuthenticatedUser
#     codespacesCreateOrUpdateSecretForAuthenticatedUser
#     codespacesDeleteForAuthenticatedUser
#     codespacesDeleteSecretForAuthenticatedUser
#     codespacesExportForAuthenticatedUser
#     codespacesGetExportDetailsForAuthenticatedUser
#     codespacesGetForAuthenticatedUser
#     codespacesGetPublicKeyForAuthenticatedUser
#     codespacesGetSecretForAuthenticatedUser
#     codespacesListForAuthenticatedUser
#     codespacesListRepositoriesForSecretForAuthenticatedUser
#     codespacesListSecretsForAuthenticatedUser
#     codespacesPublishForAuthenticatedUser
#     codespacesRemoveRepositoryForSecretForAuthenticatedUser
#     codespacesSetRepositoriesForSecretForAuthenticatedUser
#     codespacesStartForAuthenticatedUser
#     codespacesStopForAuthenticatedUser
#     codespacesUpdateForAuthenticatedUser
#     gistsListForUser
#     interactionsGetRestrictionsForAuthenticatedUser
#     interactionsRemoveRestrictionsForAuthenticatedUser
#     interactionsSetRestrictionsForAuthenticatedUser
#     issuesListForAuthenticatedUser
#     migrationsDeleteArchiveForAuthenticatedUser
#     migrationsGetArchiveForAuthenticatedUser
#     migrationsGetStatusForAuthenticatedUser
#     migrationsListForAuthenticatedUser
#     migrationsListReposForAuthenticatedUser
#     migrationsStartForAuthenticatedUser
#     migrationsUnlockRepoForAuthenticatedUser
#     orgsGetMembershipForAuthenticatedUser
#     orgsListForAuthenticatedUser
#     orgsListForUser
#     orgsListMembershipsForAuthenticatedUser
#     orgsUpdateMembershipForAuthenticatedUser
#     packagesDeletePackageForAuthenticatedUser
#     packagesDeletePackageForUser
#     packagesDeletePackageVersionForAuthenticatedUser
#     packagesDeletePackageVersionForUser
#     packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser
#     packagesGetAllPackageVersionsForPackageOwnedByUser
#     packagesGetPackageForAuthenticatedUser
#     packagesGetPackageForUser
#     packagesGetPackageVersionForAuthenticatedUser
#     packagesGetPackageVersionForUser
#     packagesListDockerMigrationConflictingPackagesForAuthenticatedUser
#     packagesListDockerMigrationConflictingPackagesForUser
#     packagesListPackagesForAuthenticatedUser
#     packagesListPackagesForUser
#     packagesRestorePackageForAuthenticatedUser
#     packagesRestorePackageForUser
#     packagesRestorePackageVersionForAuthenticatedUser
#     packagesRestorePackageVersionForUser
#     projectsCreateForAuthenticatedUser
#     projectsListForUser
#     reposAcceptInvitationForAuthenticatedUser
#     reposCreateForAuthenticatedUser
#     reposDeclineInvitationForAuthenticatedUser
#     reposListForAuthenticatedUser
#     reposListForUser
#     reposListInvitationsForAuthenticatedUser
#     teamsListForAuthenticatedUser
#     usersAddEmailForAuthenticatedUser
#     usersAddSocialAccountForAuthenticatedUser
#     usersBlock
#     usersCheckBlocked
#     usersCheckFollowingForUser
#     usersCheckPersonIsFollowedByAuthenticated
#     usersCreateGpgKeyForAuthenticatedUser
#     usersCreatePublicSshKeyForAuthenticatedUser
#     usersCreateSshSigningKeyForAuthenticatedUser
#     usersDeleteEmailForAuthenticatedUser
#     usersDeleteGpgKeyForAuthenticatedUser
#     usersDeletePublicSshKeyForAuthenticatedUser
#     usersDeleteSocialAccountForAuthenticatedUser
#     usersDeleteSshSigningKeyForAuthenticatedUser
#     usersFollow
#     usersGetAuthenticated
#     usersGetByUsername
#     usersGetContextForUser
#     usersGetGpgKeyForAuthenticatedUser
#     usersGetPublicSshKeyForAuthenticatedUser
#     usersGetSshSigningKeyForAuthenticatedUser
#     usersList
#     usersListBlockedByAuthenticatedUser
#     usersListEmailsForAuthenticatedUser
#     usersListFollowedByAuthenticatedUser
#     usersListFollowersForAuthenticatedUser
#     usersListFollowersForUser
#     usersListFollowingForUser
#     usersListGpgKeysForAuthenticatedUser
#     usersListGpgKeysForUser
#     usersListPublicEmailsForAuthenticatedUser
#     usersListPublicKeysForUser
#     usersListPublicSshKeysForAuthenticatedUser
#     usersListSocialAccountsForAuthenticatedUser
#     usersListSocialAccountsForUser
#     usersListSshSigningKeysForAuthenticatedUser
#     usersListSshSigningKeysForUser
#     usersSetPrimaryEmailVisibilityForAuthenticatedUser
#     usersUnblock
#     usersUnfollow
#     usersUpdateAuthenticated

    @GhSDK.resource_method("user/starred/{owner}/{repo}", http_method="GET")
    def activityCheckRepoIsStarredByAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").activityCheckRepoIsStarredByAuthenticatedUser(...)
    # GET https://api.github.com/user/starred/{owner}/{repo}
    # Summary: Check if a repository is starred by the authenticated user
    # Description: Whether the authenticated user has starred the repository.


    @GhSDK.resource_method("users/{username}/events", http_method="GET")
    def activityListEventsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").activityListEventsForAuthenticatedUser(...)
    # GET https://api.github.com/users/{username}/events
    # Summary: List events for the authenticated user
    # Description: If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.


    @GhSDK.resource_method("users/{username}/events/orgs/{org}", http_method="GET")
    def activityListOrgEventsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").activityListOrgEventsForAuthenticatedUser(...)
    # GET https://api.github.com/users/{username}/events/orgs/{org}
    # Summary: List organization events for the authenticated user
    # Description: This is the user's organization dashboard. You must be authenticated as the user to view this.


    @GhSDK.resource_method("users/{username}/events/public", http_method="GET")
    def activityListPublicEventsForUser(self): pass
    # To call: GhSDK.resource("user").activityListPublicEventsForUser(...)
    # GET https://api.github.com/users/{username}/events/public
    # Summary: List public events for a user


    @GhSDK.resource_method("users/{username}/received_events", http_method="GET")
    def activityListReceivedEventsForUser(self): pass
    # To call: GhSDK.resource("user").activityListReceivedEventsForUser(...)
    # GET https://api.github.com/users/{username}/received_events
    # Summary: List events received by the authenticated user
    # Description: These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.


    @GhSDK.resource_method("users/{username}/received_events/public", http_method="GET")
    def activityListReceivedPublicEventsForUser(self): pass
    # To call: GhSDK.resource("user").activityListReceivedPublicEventsForUser(...)
    # GET https://api.github.com/users/{username}/received_events/public
    # Summary: List public events received by a user


    @GhSDK.resource_method("user/starred", http_method="GET")
    def activityListReposStarredByAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").activityListReposStarredByAuthenticatedUser(...)
    # GET https://api.github.com/user/starred
    # Summary: List repositories starred by the authenticated user
    # Description: Lists repositories the authenticated user has starred.
    #
    #   You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.


    @GhSDK.resource_method("users/{username}/starred", http_method="GET")
    def activityListReposStarredByUser(self): pass
    # To call: GhSDK.resource("user").activityListReposStarredByUser(...)
    # GET https://api.github.com/users/{username}/starred
    # Summary: List repositories starred by a user
    # Description: Lists repositories a user has starred.
    #
    #   You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.


    @GhSDK.resource_method("users/{username}/subscriptions", http_method="GET")
    def activityListReposWatchedByUser(self): pass
    # To call: GhSDK.resource("user").activityListReposWatchedByUser(...)
    # GET https://api.github.com/users/{username}/subscriptions
    # Summary: List repositories watched by a user
    # Description: Lists repositories a user is watching.


    @GhSDK.resource_method("user/subscriptions", http_method="GET")
    def activityListWatchedReposForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").activityListWatchedReposForAuthenticatedUser(...)
    # GET https://api.github.com/user/subscriptions
    # Summary: List repositories watched by the authenticated user
    # Description: Lists repositories the authenticated user is watching.


    @GhSDK.resource_method("user/starred/{owner}/{repo}", http_method="PUT")
    def activityStarRepoForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").activityStarRepoForAuthenticatedUser(...)
    # PUT https://api.github.com/user/starred/{owner}/{repo}
    # Summary: Star a repository for the authenticated user
    # Description: Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."


    @GhSDK.resource_method("user/starred/{owner}/{repo}", http_method="DELETE")
    def activityUnstarRepoForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").activityUnstarRepoForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/starred/{owner}/{repo}
    # Summary: Unstar a repository for the authenticated user
    # Description: Unstar a repository that the authenticated user has previously starred.


    @GhSDK.resource_method("user/installations/{installation_id}/repositories/{repository_id}", http_method="PUT")
    def appsAddRepoToInstallationForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").appsAddRepoToInstallationForAuthenticatedUser(...)
    # PUT https://api.github.com/user/installations/{installation_id}/repositories/{repository_id}
    # Summary: Add a repository to an app installation
    # Description: Add a single repository to an installation. The authenticated user must have admin access to the repository.
    #
    #   You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.


    @GhSDK.resource_method("users/{username}/installation", http_method="GET")
    def appsGetUserInstallation(self): pass
    # To call: GhSDK.resource("user").appsGetUserInstallation(...)
    # GET https://api.github.com/users/{username}/installation
    # Summary: Get a user installation for the authenticated app
    # Description: Enables an authenticated GitHub App to find the user’s installation information.
    #
    #   You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.


    @GhSDK.resource_method("user/installations/{installation_id}/repositories", http_method="GET")
    def appsListInstallationReposForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").appsListInstallationReposForAuthenticatedUser(...)
    # GET https://api.github.com/user/installations/{installation_id}/repositories
    # Summary: List repositories accessible to the user access token
    # Description: List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
    #
    #   The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    #
    #   You must use a [user access token](https://docs.github.com/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app), created for a user who has authorized your GitHub App, to access this endpoint.
    #
    #   The access the user has to each repository is included in the hash under the `permissions` key.


    @GhSDK.resource_method("user/installations", http_method="GET")
    def appsListInstallationsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").appsListInstallationsForAuthenticatedUser(...)
    # GET https://api.github.com/user/installations
    # Summary: List app installations accessible to the user access token
    # Description: Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    #
    #   You must use a [user access token](https://docs.github.com/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app), created for a user who has authorized your GitHub App, to access this endpoint.
    #
    #   The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    #
    #   You can find the permissions for the installation under the `permissions` key.


    @GhSDK.resource_method("user/marketplace_purchases", http_method="GET")
    def appsListSubscriptionsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").appsListSubscriptionsForAuthenticatedUser(...)
    # GET https://api.github.com/user/marketplace_purchases
    # Summary: List subscriptions for the authenticated user
    # Description: Lists the active subscriptions for the authenticated user. GitHub Apps must use a [user access token](https://docs.github.com/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app), created for a user who has authorized your GitHub App, to access this endpoint. OAuth apps must authenticate using an [OAuth token](https://docs.github.com/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps).


    @GhSDK.resource_method("user/marketplace_purchases/stubbed", http_method="GET")
    def appsListSubscriptionsForAuthenticatedUserStubbed(self): pass
    # To call: GhSDK.resource("user").appsListSubscriptionsForAuthenticatedUserStubbed(...)
    # GET https://api.github.com/user/marketplace_purchases/stubbed
    # Summary: List subscriptions for the authenticated user (stubbed)
    # Description: Lists the active subscriptions for the authenticated user. GitHub Apps must use a [user access token](https://docs.github.com/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app), created for a user who has authorized your GitHub App, to access this endpoint. OAuth apps must authenticate using an [OAuth token](https://docs.github.com/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps).


    @GhSDK.resource_method("user/installations/{installation_id}/repositories/{repository_id}", http_method="DELETE")
    def appsRemoveRepoFromInstallationForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").appsRemoveRepoFromInstallationForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/installations/{installation_id}/repositories/{repository_id}
    # Summary: Remove a repository from an app installation
    # Description: Remove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the `repository_selection` of `selected`.
    #
    #   You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.


    @GhSDK.resource_method("users/{username}/settings/billing/actions", http_method="GET")
    def billingGetGithubActionsBillingUser(self): pass
    # To call: GhSDK.resource("user").billingGetGithubActionsBillingUser(...)
    # GET https://api.github.com/users/{username}/settings/billing/actions
    # Summary: Get GitHub Actions billing for a user
    # Description: Gets the summary of the free and paid GitHub Actions minutes used.
    #
    #   Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
    #
    #   Access tokens must have the `user` scope.


    @GhSDK.resource_method("users/{username}/settings/billing/packages", http_method="GET")
    def billingGetGithubPackagesBillingUser(self): pass
    # To call: GhSDK.resource("user").billingGetGithubPackagesBillingUser(...)
    # GET https://api.github.com/users/{username}/settings/billing/packages
    # Summary: Get GitHub Packages billing for a user
    # Description: Gets the free and paid storage used for GitHub Packages in gigabytes.
    #
    #   Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    #
    #   Access tokens must have the `user` scope.


    @GhSDK.resource_method("users/{username}/settings/billing/shared-storage", http_method="GET")
    def billingGetSharedStorageBillingUser(self): pass
    # To call: GhSDK.resource("user").billingGetSharedStorageBillingUser(...)
    # GET https://api.github.com/users/{username}/settings/billing/shared-storage
    # Summary: Get shared storage billing for a user
    # Description: Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
    #
    #   Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
    #
    #   Access tokens must have the `user` scope.


    @GhSDK.resource_method("user/codespaces/secrets/{secret_name}/repositories/{repository_id}", http_method="PUT")
    def codespacesAddRepositoryForSecretForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesAddRepositoryForSecretForAuthenticatedUser(...)
    # PUT https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Add a selected repository to a user secret
    # Description: Adds a repository to the selected repositories for a user's codespace secret.
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #   GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("user/codespaces/{codespace_name}/machines", http_method="GET")
    def codespacesCodespaceMachinesForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesCodespaceMachinesForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces/{codespace_name}/machines
    # Summary: List machine types for a codespace
    # Description: List the machine types a codespace can transition to use.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces", http_method="POST")
    def codespacesCreateForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesCreateForAuthenticatedUser(...)
    # POST https://api.github.com/user/codespaces
    # Summary: Create a codespace for the authenticated user
    # Description: Creates a new codespace, owned by the authenticated user.
    #
    #   This endpoint requires either a `repository_id` OR a `pull_request` but not both.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/secrets/{secret_name}", http_method="PUT")
    def codespacesCreateOrUpdateSecretForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesCreateOrUpdateSecretForAuthenticatedUser(...)
    # PUT https://api.github.com/user/codespaces/secrets/{secret_name}
    # Summary: Create or update a secret for the authenticated user
    # Description: Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
    #   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
    #
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}", http_method="DELETE")
    def codespacesDeleteForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesDeleteForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/codespaces/{codespace_name}
    # Summary: Delete a codespace for the authenticated user
    # Description: Deletes a user's codespace.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/secrets/{secret_name}", http_method="DELETE")
    def codespacesDeleteSecretForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesDeleteSecretForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/codespaces/secrets/{secret_name}
    # Summary: Delete a secret for the authenticated user
    # Description: Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
    #
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}/exports", http_method="POST")
    def codespacesExportForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesExportForAuthenticatedUser(...)
    # POST https://api.github.com/user/codespaces/{codespace_name}/exports
    # Summary: Export a codespace for the authenticated user
    # Description: Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
    #
    #   If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
    #
    #   You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}/exports/{export_id}", http_method="GET")
    def codespacesGetExportDetailsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesGetExportDetailsForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces/{codespace_name}/exports/{export_id}
    # Summary: Get details about a codespace export
    # Description: Gets information about an export of a codespace.
    #
    #   You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}", http_method="GET")
    def codespacesGetForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesGetForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces/{codespace_name}
    # Summary: Get a codespace for the authenticated user
    # Description: Gets information about a user's codespace.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/secrets/public-key", http_method="GET")
    def codespacesGetPublicKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesGetPublicKeyForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces/secrets/public-key
    # Summary: Get public key for the authenticated user
    # Description: Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
    #
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/secrets/{secret_name}", http_method="GET")
    def codespacesGetSecretForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesGetSecretForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces/secrets/{secret_name}
    # Summary: Get a secret for the authenticated user
    # Description: Gets a secret available to a user's codespaces without revealing its encrypted value.
    #
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces", http_method="GET")
    def codespacesListForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesListForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces
    # Summary: List codespaces for the authenticated user
    # Description: Lists the authenticated user's codespaces.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/secrets/{secret_name}/repositories", http_method="GET")
    def codespacesListRepositoriesForSecretForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesListRepositoriesForSecretForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces/secrets/{secret_name}/repositories
    # Summary: List selected repositories for a user secret
    # Description: List the repositories that have been granted the ability to use a user's codespace secret.
    #
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.


    @GhSDK.resource_method("user/codespaces/secrets", http_method="GET")
    def codespacesListSecretsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesListSecretsForAuthenticatedUser(...)
    # GET https://api.github.com/user/codespaces/secrets
    # Summary: List secrets for the authenticated user
    # Description: Lists all secrets available for a user's Codespaces without revealing their
    #   encrypted values.
    #
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #
    #   GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}/publish", http_method="POST")
    def codespacesPublishForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesPublishForAuthenticatedUser(...)
    # POST https://api.github.com/user/codespaces/{codespace_name}/publish
    # Summary: Create a repository from an unpublished codespace
    # Description: Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
    #
    #   The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
    #
    #   This will fail for a codespace that is already published, meaning it has an associated repository.
    #
    #   You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/secrets/{secret_name}/repositories/{repository_id}", http_method="DELETE")
    def codespacesRemoveRepositoryForSecretForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesRemoveRepositoryForSecretForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}
    # Summary: Remove a selected repository from a user secret
    # Description: Removes a repository from the selected repositories for a user's codespace secret.
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #   GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
    #
    # Parameters:
    #     repository_id:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("user/codespaces/secrets/{secret_name}/repositories", http_method="PUT")
    def codespacesSetRepositoriesForSecretForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesSetRepositoriesForSecretForAuthenticatedUser(...)
    # PUT https://api.github.com/user/codespaces/secrets/{secret_name}/repositories
    # Summary: Set selected repositories for a user secret
    # Description: Select the repositories that will use a user's codespace secret.
    #
    #   You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}/start", http_method="POST")
    def codespacesStartForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesStartForAuthenticatedUser(...)
    # POST https://api.github.com/user/codespaces/{codespace_name}/start
    # Summary: Start a codespace for the authenticated user
    # Description: Starts a user's codespace.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}/stop", http_method="POST")
    def codespacesStopForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesStopForAuthenticatedUser(...)
    # POST https://api.github.com/user/codespaces/{codespace_name}/stop
    # Summary: Stop a codespace for the authenticated user
    # Description: Stops a user's codespace.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.


    @GhSDK.resource_method("user/codespaces/{codespace_name}", http_method="PATCH")
    def codespacesUpdateForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").codespacesUpdateForAuthenticatedUser(...)
    # PATCH https://api.github.com/user/codespaces/{codespace_name}
    # Summary: Update a codespace for the authenticated user
    # Description: Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
    #
    #   If you specify a new machine type it will be applied the next time your codespace is started.
    #
    #   You must authenticate using an access token with the `codespace` scope to use this endpoint.
    #
    #   GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.


    @GhSDK.resource_method("users/{username}/gists", http_method="GET")
    def gistsListForUser(self): pass
    # To call: GhSDK.resource("user").gistsListForUser(...)
    # GET https://api.github.com/users/{username}/gists
    # Summary: List gists for a user
    # Description: Lists public gists for the specified user:


    @GhSDK.resource_method("user/interaction-limits", http_method="GET")
    def interactionsGetRestrictionsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").interactionsGetRestrictionsForAuthenticatedUser(...)
    # GET https://api.github.com/user/interaction-limits
    # Summary: Get interaction restrictions for your public repositories
    # Description: Shows which type of GitHub user can interact with your public repositories and when the restriction expires.


    @GhSDK.resource_method("user/interaction-limits", http_method="DELETE")
    def interactionsRemoveRestrictionsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").interactionsRemoveRestrictionsForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/interaction-limits
    # Summary: Remove interaction restrictions from your public repositories
    # Description: Removes any interaction restrictions from your public repositories.


    @GhSDK.resource_method("user/interaction-limits", http_method="PUT")
    def interactionsSetRestrictionsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").interactionsSetRestrictionsForAuthenticatedUser(...)
    # PUT https://api.github.com/user/interaction-limits
    # Summary: Set interaction restrictions for your public repositories
    # Description: Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.


    @GhSDK.resource_method("user/issues", http_method="GET")
    def issuesListForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").issuesListForAuthenticatedUser(...)
    # GET https://api.github.com/user/issues
    # Summary: List user account issues assigned to the authenticated user
    # Description: List issues across owned and member repositories assigned to the authenticated user.
    #
    #   **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
    #   reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
    #   the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
    #   request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    #
    # Parameters:
    #     filter:
    #       description: Indicates which sorts of issues to return. `assigned` means issues
    #         assigned to you. `created` means issues created by you. `mentioned` means issues
    #         mentioning you. `subscribed` means issues you're subscribed to updates for.
    #         `all` or `repos` means all issues you can see, regardless of participation or
    #         creation.
    #       in: query
    #       required: false
    #     sort:
    #       description: What to sort results by.
    #       in: query
    #       required: false
    #     state:
    #       description: Indicates the state of the issues to return.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("user/migrations/{migration_id}/archive", http_method="DELETE")
    def migrationsDeleteArchiveForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").migrationsDeleteArchiveForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/migrations/{migration_id}/archive
    # Summary: Delete a user migration archive
    # Description: Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.


    @GhSDK.resource_method("user/migrations/{migration_id}/archive", http_method="GET")
    def migrationsGetArchiveForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").migrationsGetArchiveForAuthenticatedUser(...)
    # GET https://api.github.com/user/migrations/{migration_id}/archive
    # Summary: Download a user migration archive
    # Description: Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
    #
    #   *   attachments
    #   *   bases
    #   *   commit\_comments
    #   *   issue\_comments
    #   *   issue\_events
    #   *   issues
    #   *   milestones
    #   *   organizations
    #   *   projects
    #   *   protected\_branches
    #   *   pull\_request\_reviews
    #   *   pull\_requests
    #   *   releases
    #   *   repositories
    #   *   review\_comments
    #   *   schema
    #   *   users
    #
    #   The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.


    @GhSDK.resource_method("user/migrations/{migration_id}", http_method="GET")
    def migrationsGetStatusForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").migrationsGetStatusForAuthenticatedUser(...)
    # GET https://api.github.com/user/migrations/{migration_id}
    # Summary: Get a user migration status
    # Description: Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
    #
    #   *   `pending` - the migration hasn't started yet.
    #   *   `exporting` - the migration is in progress.
    #   *   `exported` - the migration finished successfully.
    #   *   `failed` - the migration failed.
    #
    #   Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
    #
    # Parameters:
    #     exclude:
    #       description: ''
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("user/migrations", http_method="GET")
    def migrationsListForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").migrationsListForAuthenticatedUser(...)
    # GET https://api.github.com/user/migrations
    # Summary: List user migrations
    # Description: Lists all migrations a user has started.


    @GhSDK.resource_method("user/migrations/{migration_id}/repositories", http_method="GET")
    def migrationsListReposForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").migrationsListReposForAuthenticatedUser(...)
    # GET https://api.github.com/user/migrations/{migration_id}/repositories
    # Summary: List repositories for a user migration
    # Description: Lists all the repositories for this user migration.


    @GhSDK.resource_method("user/migrations", http_method="POST")
    def migrationsStartForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").migrationsStartForAuthenticatedUser(...)
    # POST https://api.github.com/user/migrations
    # Summary: Start a user migration
    # Description: Initiates the generation of a user migration archive.


    @GhSDK.resource_method("user/migrations/{migration_id}/repos/{repo_name}/lock", http_method="DELETE")
    def migrationsUnlockRepoForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").migrationsUnlockRepoForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/migrations/{migration_id}/repos/{repo_name}/lock
    # Summary: Unlock a user repository
    # Description: Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.


    @GhSDK.resource_method("user/memberships/orgs/{org}", http_method="GET")
    def orgsGetMembershipForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").orgsGetMembershipForAuthenticatedUser(...)
    # GET https://api.github.com/user/memberships/orgs/{org}
    # Summary: Get an organization membership for the authenticated user
    # Description: If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.


    @GhSDK.resource_method("user/orgs", http_method="GET")
    def orgsListForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").orgsListForAuthenticatedUser(...)
    # GET https://api.github.com/user/orgs
    # Summary: List organizations for the authenticated user
    # Description: List organizations for the authenticated user.
    #
    #   **OAuth scope requirements**
    #
    #   This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.


    @GhSDK.resource_method("users/{username}/orgs", http_method="GET")
    def orgsListForUser(self): pass
    # To call: GhSDK.resource("user").orgsListForUser(...)
    # GET https://api.github.com/users/{username}/orgs
    # Summary: List organizations for a user
    # Description: List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
    #
    #   This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.


    @GhSDK.resource_method("user/memberships/orgs", http_method="GET")
    def orgsListMembershipsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").orgsListMembershipsForAuthenticatedUser(...)
    # GET https://api.github.com/user/memberships/orgs
    # Summary: List organization memberships for the authenticated user
    # Description: Lists all of the authenticated user's organization memberships.
    #
    # Parameters:
    #     state:
    #       description: Indicates the state of the memberships to return. If not specified,
    #         the API returns both active and pending memberships.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("user/memberships/orgs/{org}", http_method="PATCH")
    def orgsUpdateMembershipForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").orgsUpdateMembershipForAuthenticatedUser(...)
    # PATCH https://api.github.com/user/memberships/orgs/{org}
    # Summary: Update an organization membership for the authenticated user
    # Description: Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.


    @GhSDK.resource_method("user/packages/{package_type}/{package_name}", http_method="DELETE")
    def packagesDeletePackageForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesDeletePackageForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/packages/{package_type}/{package_name}
    # Summary: Delete a package for the authenticated user
    # Description: Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes.
    #   If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("users/{username}/packages/{package_type}/{package_name}", http_method="DELETE")
    def packagesDeletePackageForUser(self): pass
    # To call: GhSDK.resource("user").packagesDeletePackageForUser(...)
    # DELETE https://api.github.com/users/{username}/packages/{package_type}/{package_name}
    # Summary: Delete a package for a user
    # Description: Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


    @GhSDK.resource_method("user/packages/{package_type}/{package_name}/versions/{package_version_id}", http_method="DELETE")
    def packagesDeletePackageVersionForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesDeletePackageVersionForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}
    # Summary: Delete a package version for the authenticated user
    # Description: Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    #
    #   To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes.
    #   If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}", http_method="DELETE")
    def packagesDeletePackageVersionForUser(self): pass
    # To call: GhSDK.resource("user").packagesDeletePackageVersionForUser(...)
    # DELETE https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
    # Summary: Delete package version for a user
    # Description: Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


    @GhSDK.resource_method("user/packages/{package_type}/{package_name}/versions", http_method="GET")
    def packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(...)
    # GET https://api.github.com/user/packages/{package_type}/{package_name}/versions
    # Summary: List package versions for a package owned by the authenticated user
    # Description: Lists package versions for a package owned by the authenticated user.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #
    # Parameters:
    #     state:
    #       description: The state of the package, either active or deleted.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("users/{username}/packages/{package_type}/{package_name}/versions", http_method="GET")
    def packagesGetAllPackageVersionsForPackageOwnedByUser(self): pass
    # To call: GhSDK.resource("user").packagesGetAllPackageVersionsForPackageOwnedByUser(...)
    # GET https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions
    # Summary: List package versions for a package owned by a user
    # Description: Lists package versions for a public package owned by a specified user.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("user/packages/{package_type}/{package_name}", http_method="GET")
    def packagesGetPackageForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesGetPackageForAuthenticatedUser(...)
    # GET https://api.github.com/user/packages/{package_type}/{package_name}
    # Summary: Get a package for the authenticated user
    # Description: Gets a specific package for a package owned by the authenticated user.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("users/{username}/packages/{package_type}/{package_name}", http_method="GET")
    def packagesGetPackageForUser(self): pass
    # To call: GhSDK.resource("user").packagesGetPackageForUser(...)
    # GET https://api.github.com/users/{username}/packages/{package_type}/{package_name}
    # Summary: Get a package for a user
    # Description: Gets a specific package metadata for a public package owned by a user.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("user/packages/{package_type}/{package_name}/versions/{package_version_id}", http_method="GET")
    def packagesGetPackageVersionForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesGetPackageVersionForAuthenticatedUser(...)
    # GET https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}
    # Summary: Get a package version for the authenticated user
    # Description: Gets a specific package version for a package owned by the authenticated user.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}", http_method="GET")
    def packagesGetPackageVersionForUser(self): pass
    # To call: GhSDK.resource("user").packagesGetPackageVersionForUser(...)
    # GET https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
    # Summary: Get a package version for a user
    # Description: Gets a specific package version for a public package owned by a specified user.
    #
    #   At this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("user/docker/conflicts", http_method="GET")
    def packagesListDockerMigrationConflictingPackagesForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesListDockerMigrationConflictingPackagesForAuthenticatedUser(...)
    # GET https://api.github.com/user/docker/conflicts
    # Summary: Get list of conflicting packages during Docker migration for authenticated-user
    # Description: Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope.


    @GhSDK.resource_method("users/{username}/docker/conflicts", http_method="GET")
    def packagesListDockerMigrationConflictingPackagesForUser(self): pass
    # To call: GhSDK.resource("user").packagesListDockerMigrationConflictingPackagesForUser(...)
    # GET https://api.github.com/users/{username}/docker/conflicts
    # Summary: Get list of conflicting packages during Docker migration for user
    # Description: Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope.


    @GhSDK.resource_method("user/packages", http_method="GET")
    def packagesListPackagesForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesListPackagesForAuthenticatedUser(...)
    # GET https://api.github.com/user/packages
    # Summary: List packages for the authenticated user's namespace
    # Description: Lists packages owned by the authenticated user within the user's namespace.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #
    # Parameters:
    #     package_type:
    #       description: The type of supported package. Packages in GitHub's Gradle registry
    #         have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`)
    #         have the type `container`. You can use the type `docker` to find images that
    #         were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these
    #         have now been migrated to the Container registry.
    #       in: query
    #       required: true
    #


    @GhSDK.resource_method("users/{username}/packages", http_method="GET")
    def packagesListPackagesForUser(self): pass
    # To call: GhSDK.resource("user").packagesListPackagesForUser(...)
    # GET https://api.github.com/users/{username}/packages
    # Summary: List packages for a user
    # Description: Lists all packages in a user's namespace for which the requesting user has access.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #
    # Parameters:
    #     package_type:
    #       description: The type of supported package. Packages in GitHub's Gradle registry
    #         have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`)
    #         have the type `container`. You can use the type `docker` to find images that
    #         were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these
    #         have now been migrated to the Container registry.
    #       in: query
    #       required: true
    #


    @GhSDK.resource_method("user/packages/{package_type}/{package_name}/restore", http_method="POST")
    def packagesRestorePackageForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesRestorePackageForAuthenticatedUser(...)
    # POST https://api.github.com/user/packages/{package_type}/{package_name}/restore
    # Summary: Restore a package for the authenticated user
    # Description: Restores a package owned by the authenticated user.
    #
    #   You can restore a deleted package under the following conditions:
    #     - The package was deleted within the last 30 days.
    #     - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #
    # Parameters:
    #     token:
    #       description: package token
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("users/{username}/packages/{package_type}/{package_name}/restore", http_method="POST")
    def packagesRestorePackageForUser(self): pass
    # To call: GhSDK.resource("user").packagesRestorePackageForUser(...)
    # POST https://api.github.com/users/{username}/packages/{package_type}/{package_name}/restore
    # Summary: Restore a package for a user
    # Description: Restores an entire package for a user.
    #
    #   You can restore a deleted package under the following conditions:
    #     - The package was deleted within the last 30 days.
    #     - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
    #
    # Parameters:
    #     token:
    #       description: package token
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", http_method="POST")
    def packagesRestorePackageVersionForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").packagesRestorePackageVersionForAuthenticatedUser(...)
    # POST https://api.github.com/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
    # Summary: Restore a package version for the authenticated user
    # Description: Restores a package version owned by the authenticated user.
    #
    #   You can restore a deleted package version under the following conditions:
    #     - The package was deleted within the last 30 days.
    #     - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."


    @GhSDK.resource_method("users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", http_method="POST")
    def packagesRestorePackageVersionForUser(self): pass
    # To call: GhSDK.resource("user").packagesRestorePackageVersionForUser(...)
    # POST https://api.github.com/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
    # Summary: Restore package version for a user
    # Description: Restores a specific package version for a user.
    #
    #   You can restore a deleted package under the following conditions:
    #     - The package was deleted within the last 30 days.
    #     - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
    #
    #   To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
    #   - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
    #   - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."


    @GhSDK.resource_method("user/projects", http_method="POST")
    def projectsCreateForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").projectsCreateForAuthenticatedUser(...)
    # POST https://api.github.com/user/projects
    # Summary: Create a user project
    # Description: Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.


    @GhSDK.resource_method("users/{username}/projects", http_method="GET")
    def projectsListForUser(self): pass
    # To call: GhSDK.resource("user").projectsListForUser(...)
    # GET https://api.github.com/users/{username}/projects
    # Summary: List user projects
    # Description: Lists projects for a user.
    #
    # Parameters:
    #     state:
    #       description: Indicates the state of the projects to return.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("user/repository_invitations/{invitation_id}", http_method="PATCH")
    def reposAcceptInvitationForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").reposAcceptInvitationForAuthenticatedUser(...)
    # PATCH https://api.github.com/user/repository_invitations/{invitation_id}
    # Summary: Accept a repository invitation


    @GhSDK.resource_method("user/repos", http_method="POST")
    def reposCreateForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").reposCreateForAuthenticatedUser(...)
    # POST https://api.github.com/user/repos
    # Summary: Create a repository for the authenticated user
    # Description: Creates a new repository for the authenticated user.
    #
    #   **OAuth scope requirements**
    #
    #   When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
    #
    #   *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
    #   *   `repo` scope to create a private repository.


    @GhSDK.resource_method("user/repository_invitations/{invitation_id}", http_method="DELETE")
    def reposDeclineInvitationForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").reposDeclineInvitationForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/repository_invitations/{invitation_id}
    # Summary: Decline a repository invitation


    @GhSDK.resource_method("user/repos", http_method="GET")
    def reposListForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").reposListForAuthenticatedUser(...)
    # GET https://api.github.com/user/repos
    # Summary: List repositories for the authenticated user
    # Description: Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
    #
    #   The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
    #
    # Parameters:
    #     affiliation:
    #       description: "Comma-separated list of values. Can include:  \n * `owner`: Repositories\
    #         \ that are owned by the authenticated user.  \n * `collaborator`: Repositories\
    #         \ that the user has been added to as a collaborator.  \n * `organization_member`:\
    #         \ Repositories that the user has access to through being a member of an organization.\
    #         \ This includes every repository on every team that the user is on."
    #       in: query
    #       required: false
    #     direction:
    #       description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise
    #         `desc`.'
    #       in: query
    #       required: false
    #     sort:
    #       description: The property to sort the results by.
    #       in: query
    #       required: false
    #     type:
    #       description: Limit results to repositories of the specified type. Will cause a
    #         `422` error if used in the same request as **visibility** or **affiliation**.
    #       in: query
    #       required: false
    #     visibility:
    #       description: Limit results to repositories with the specified visibility.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("users/{username}/repos", http_method="GET")
    def reposListForUser(self): pass
    # To call: GhSDK.resource("user").reposListForUser(...)
    # GET https://api.github.com/users/{username}/repos
    # Summary: List repositories for a user
    # Description: Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
    #
    # Parameters:
    #     direction:
    #       description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise
    #         `desc`.'
    #       in: query
    #       required: false
    #     sort:
    #       description: The property to sort the results by.
    #       in: query
    #       required: false
    #     type:
    #       description: Limit results to repositories of the specified type.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("user/repository_invitations", http_method="GET")
    def reposListInvitationsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").reposListInvitationsForAuthenticatedUser(...)
    # GET https://api.github.com/user/repository_invitations
    # Summary: List repository invitations for the authenticated user
    # Description: When authenticating as a user, this endpoint will list all currently open repository invitations for that user.


    @GhSDK.resource_method("user/teams", http_method="GET")
    def teamsListForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").teamsListForAuthenticatedUser(...)
    # GET https://api.github.com/user/teams
    # Summary: List teams for the authenticated user
    # Description: List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/). When using a fine-grained personal access token, the resource owner of the token [must be a single organization](https://docs.github.com/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#fine-grained-personal-access-tokens), and have at least read-only member organization permissions. The response payload only contains the teams from a single organization when using a fine-grained personal access token.


    @GhSDK.resource_method("user/emails", http_method="POST")
    def usersAddEmailForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersAddEmailForAuthenticatedUser(...)
    # POST https://api.github.com/user/emails
    # Summary: Add an email address for the authenticated user
    # Description: This endpoint is accessible with the `user` scope.


    @GhSDK.resource_method("user/social_accounts", http_method="POST")
    def usersAddSocialAccountForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersAddSocialAccountForAuthenticatedUser(...)
    # POST https://api.github.com/user/social_accounts
    # Summary: Add social accounts for the authenticated user
    # Description: Add one or more social accounts to the authenticated user's profile. This endpoint is accessible with the `user` scope.


    @GhSDK.resource_method("user/blocks/{username}", http_method="PUT")
    def usersBlock(self): pass
    # To call: GhSDK.resource("user").usersBlock(...)
    # PUT https://api.github.com/user/blocks/{username}
    # Summary: Block a user
    # Description: Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.


    @GhSDK.resource_method("user/blocks/{username}", http_method="GET")
    def usersCheckBlocked(self): pass
    # To call: GhSDK.resource("user").usersCheckBlocked(...)
    # GET https://api.github.com/user/blocks/{username}
    # Summary: Check if a user is blocked by the authenticated user
    # Description: Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.


    @GhSDK.resource_method("users/{username}/following/{target_user}", http_method="GET")
    def usersCheckFollowingForUser(self): pass
    # To call: GhSDK.resource("user").usersCheckFollowingForUser(...)
    # GET https://api.github.com/users/{username}/following/{target_user}
    # Summary: Check if a user follows another user
    #
    # Parameters:
    #     target_user:
    #       description: ''
    #       in: path
    #       required: true
    #


    @GhSDK.resource_method("user/following/{username}", http_method="GET")
    def usersCheckPersonIsFollowedByAuthenticated(self): pass
    # To call: GhSDK.resource("user").usersCheckPersonIsFollowedByAuthenticated(...)
    # GET https://api.github.com/user/following/{username}
    # Summary: Check if a person is followed by the authenticated user


    @GhSDK.resource_method("user/gpg_keys", http_method="POST")
    def usersCreateGpgKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersCreateGpgKeyForAuthenticatedUser(...)
    # POST https://api.github.com/user/gpg_keys
    # Summary: Create a GPG key for the authenticated user
    # Description: Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("user/keys", http_method="POST")
    def usersCreatePublicSshKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersCreatePublicSshKeyForAuthenticatedUser(...)
    # POST https://api.github.com/user/keys
    # Summary: Create a public SSH key for the authenticated user
    # Description: Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("user/ssh_signing_keys", http_method="POST")
    def usersCreateSshSigningKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersCreateSshSigningKeyForAuthenticatedUser(...)
    # POST https://api.github.com/user/ssh_signing_keys
    # Summary: Create a SSH signing key for the authenticated user
    # Description: Creates an SSH signing key for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."


    @GhSDK.resource_method("user/emails", http_method="DELETE")
    def usersDeleteEmailForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersDeleteEmailForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/emails
    # Summary: Delete an email address for the authenticated user
    # Description: This endpoint is accessible with the `user` scope.


    @GhSDK.resource_method("user/gpg_keys/{gpg_key_id}", http_method="DELETE")
    def usersDeleteGpgKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersDeleteGpgKeyForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/gpg_keys/{gpg_key_id}
    # Summary: Delete a GPG key for the authenticated user
    # Description: Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("user/keys/{key_id}", http_method="DELETE")
    def usersDeletePublicSshKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersDeletePublicSshKeyForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/keys/{key_id}
    # Summary: Delete a public SSH key for the authenticated user
    # Description: Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("user/social_accounts", http_method="DELETE")
    def usersDeleteSocialAccountForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersDeleteSocialAccountForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/social_accounts
    # Summary: Delete social accounts for the authenticated user
    # Description: Deletes one or more social accounts from the authenticated user's profile. This endpoint is accessible with the `user` scope.


    @GhSDK.resource_method("user/ssh_signing_keys/{ssh_signing_key_id}", http_method="DELETE")
    def usersDeleteSshSigningKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersDeleteSshSigningKeyForAuthenticatedUser(...)
    # DELETE https://api.github.com/user/ssh_signing_keys/{ssh_signing_key_id}
    # Summary: Delete an SSH signing key for the authenticated user
    # Description: Deletes an SSH signing key from the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `admin:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."


    @GhSDK.resource_method("user/following/{username}", http_method="PUT")
    def usersFollow(self): pass
    # To call: GhSDK.resource("user").usersFollow(...)
    # PUT https://api.github.com/user/following/{username}
    # Summary: Follow a user
    # Description: Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
    #
    #   Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.


    @GhSDK.resource_method("user", http_method="GET")
    def usersGetAuthenticated(self): pass
    # To call: GhSDK.resource("user").usersGetAuthenticated(...)
    # GET https://api.github.com/user
    # Summary: Get the authenticated user
    # Description: If the authenticated user is authenticated with an OAuth token with the `user` scope, then the response lists public and private profile information.
    #
    #   If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.


    @GhSDK.resource_method("users/{username}", http_method="GET")
    def usersGetByUsername(self): pass
    # To call: GhSDK.resource("user").usersGetByUsername(...)
    # GET https://api.github.com/users/{username}
    # Summary: Get a user
    # Description: Provides publicly available information about someone with a GitHub account.
    #
    #   GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
    #
    #   The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
    #
    #   The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".


    @GhSDK.resource_method("users/{username}/hovercard", http_method="GET")
    def usersGetContextForUser(self): pass
    # To call: GhSDK.resource("user").usersGetContextForUser(...)
    # GET https://api.github.com/users/{username}/hovercard
    # Summary: Get contextual information for a user
    # Description: Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
    #
    #   The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
    #
    #   ```shell
    #    curl -u username:token
    #     https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
    #   ```
    #
    # Parameters:
    #     subject_id:
    #       description: Uses the ID for the `subject_type` you specified. **Required** when
    #         using `subject_type`.
    #       in: query
    #       required: false
    #     subject_type:
    #       description: Identifies which additional information you'd like to receive about
    #         the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`.
    #         **Required** when using `subject_id`.
    #       in: query
    #       required: false
    #


    @GhSDK.resource_method("user/gpg_keys/{gpg_key_id}", http_method="GET")
    def usersGetGpgKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersGetGpgKeyForAuthenticatedUser(...)
    # GET https://api.github.com/user/gpg_keys/{gpg_key_id}
    # Summary: Get a GPG key for the authenticated user
    # Description: View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("user/keys/{key_id}", http_method="GET")
    def usersGetPublicSshKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersGetPublicSshKeyForAuthenticatedUser(...)
    # GET https://api.github.com/user/keys/{key_id}
    # Summary: Get a public SSH key for the authenticated user
    # Description: View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("user/ssh_signing_keys/{ssh_signing_key_id}", http_method="GET")
    def usersGetSshSigningKeyForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersGetSshSigningKeyForAuthenticatedUser(...)
    # GET https://api.github.com/user/ssh_signing_keys/{ssh_signing_key_id}
    # Summary: Get an SSH signing key for the authenticated user
    # Description: Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."


    @GhSDK.resource_method("users", http_method="GET")
    def usersList(self): pass
    # To call: GhSDK.resource("user").usersList(...)
    # GET https://api.github.com/users
    # Summary: List users
    # Description: Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
    #
    #   Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.


    @GhSDK.resource_method("user/blocks", http_method="GET")
    def usersListBlockedByAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListBlockedByAuthenticatedUser(...)
    # GET https://api.github.com/user/blocks
    # Summary: List users blocked by the authenticated user
    # Description: List the users you've blocked on your personal account.


    @GhSDK.resource_method("user/emails", http_method="GET")
    def usersListEmailsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListEmailsForAuthenticatedUser(...)
    # GET https://api.github.com/user/emails
    # Summary: List email addresses for the authenticated user
    # Description: Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.


    @GhSDK.resource_method("user/following", http_method="GET")
    def usersListFollowedByAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListFollowedByAuthenticatedUser(...)
    # GET https://api.github.com/user/following
    # Summary: List the people the authenticated user follows
    # Description: Lists the people who the authenticated user follows.


    @GhSDK.resource_method("user/followers", http_method="GET")
    def usersListFollowersForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListFollowersForAuthenticatedUser(...)
    # GET https://api.github.com/user/followers
    # Summary: List followers of the authenticated user
    # Description: Lists the people following the authenticated user.


    @GhSDK.resource_method("users/{username}/followers", http_method="GET")
    def usersListFollowersForUser(self): pass
    # To call: GhSDK.resource("user").usersListFollowersForUser(...)
    # GET https://api.github.com/users/{username}/followers
    # Summary: List followers of a user
    # Description: Lists the people following the specified user.


    @GhSDK.resource_method("users/{username}/following", http_method="GET")
    def usersListFollowingForUser(self): pass
    # To call: GhSDK.resource("user").usersListFollowingForUser(...)
    # GET https://api.github.com/users/{username}/following
    # Summary: List the people a user follows
    # Description: Lists the people who the specified user follows.


    @GhSDK.resource_method("user/gpg_keys", http_method="GET")
    def usersListGpgKeysForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListGpgKeysForAuthenticatedUser(...)
    # GET https://api.github.com/user/gpg_keys
    # Summary: List GPG keys for the authenticated user
    # Description: Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("users/{username}/gpg_keys", http_method="GET")
    def usersListGpgKeysForUser(self): pass
    # To call: GhSDK.resource("user").usersListGpgKeysForUser(...)
    # GET https://api.github.com/users/{username}/gpg_keys
    # Summary: List GPG keys for a user
    # Description: Lists the GPG keys for a user. This information is accessible by anyone.


    @GhSDK.resource_method("user/public_emails", http_method="GET")
    def usersListPublicEmailsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListPublicEmailsForAuthenticatedUser(...)
    # GET https://api.github.com/user/public_emails
    # Summary: List public email addresses for the authenticated user
    # Description: Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.


    @GhSDK.resource_method("users/{username}/keys", http_method="GET")
    def usersListPublicKeysForUser(self): pass
    # To call: GhSDK.resource("user").usersListPublicKeysForUser(...)
    # GET https://api.github.com/users/{username}/keys
    # Summary: List public keys for a user
    # Description: Lists the _verified_ public SSH keys for a user. This is accessible by anyone.


    @GhSDK.resource_method("user/keys", http_method="GET")
    def usersListPublicSshKeysForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListPublicSshKeysForAuthenticatedUser(...)
    # GET https://api.github.com/user/keys
    # Summary: List public SSH keys for the authenticated user
    # Description: Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).


    @GhSDK.resource_method("user/social_accounts", http_method="GET")
    def usersListSocialAccountsForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListSocialAccountsForAuthenticatedUser(...)
    # GET https://api.github.com/user/social_accounts
    # Summary: List social accounts for the authenticated user
    # Description: Lists all of your social accounts.


    @GhSDK.resource_method("users/{username}/social_accounts", http_method="GET")
    def usersListSocialAccountsForUser(self): pass
    # To call: GhSDK.resource("user").usersListSocialAccountsForUser(...)
    # GET https://api.github.com/users/{username}/social_accounts
    # Summary: List social accounts for a user
    # Description: Lists social media accounts for a user. This endpoint is accessible by anyone.


    @GhSDK.resource_method("user/ssh_signing_keys", http_method="GET")
    def usersListSshSigningKeysForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersListSshSigningKeysForAuthenticatedUser(...)
    # GET https://api.github.com/user/ssh_signing_keys
    # Summary: List SSH signing keys for the authenticated user
    # Description: Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."


    @GhSDK.resource_method("users/{username}/ssh_signing_keys", http_method="GET")
    def usersListSshSigningKeysForUser(self): pass
    # To call: GhSDK.resource("user").usersListSshSigningKeysForUser(...)
    # GET https://api.github.com/users/{username}/ssh_signing_keys
    # Summary: List SSH signing keys for a user
    # Description: Lists the SSH signing keys for a user. This operation is accessible by anyone.


    @GhSDK.resource_method("user/email/visibility", http_method="PATCH")
    def usersSetPrimaryEmailVisibilityForAuthenticatedUser(self): pass
    # To call: GhSDK.resource("user").usersSetPrimaryEmailVisibilityForAuthenticatedUser(...)
    # PATCH https://api.github.com/user/email/visibility
    # Summary: Set primary email visibility for the authenticated user
    # Description: Sets the visibility for your primary email addresses.


    @GhSDK.resource_method("user/blocks/{username}", http_method="DELETE")
    def usersUnblock(self): pass
    # To call: GhSDK.resource("user").usersUnblock(...)
    # DELETE https://api.github.com/user/blocks/{username}
    # Summary: Unblock a user
    # Description: Unblocks the given user and returns a 204.


    @GhSDK.resource_method("user/following/{username}", http_method="DELETE")
    def usersUnfollow(self): pass
    # To call: GhSDK.resource("user").usersUnfollow(...)
    # DELETE https://api.github.com/user/following/{username}
    # Summary: Unfollow a user
    # Description: Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.


    @GhSDK.resource_method("user", http_method="PATCH")
    def usersUpdateAuthenticated(self): pass
    # To call: GhSDK.resource("user").usersUpdateAuthenticated(...)
    # PATCH https://api.github.com/user
    # Summary: Update the authenticated user
    # Description: **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.


@GhSDK.resource_class("version", "")
class VersionResource(GhSDK):
# To instantiate: GhSDK.resource("version")
# Number of methods: 1
#     metaGetAllVersions

    @GhSDK.resource_method("versions", http_method="GET")
    def metaGetAllVersions(self): pass
    # To call: GhSDK.resource("version").metaGetAllVersions(...)
    # GET https://api.github.com/versions
    # Summary: Get all API versions
    # Description: Get all supported GitHub API versions.


@GhSDK.resource_class("zen", "")
class ZenResource(GhSDK):
# To instantiate: GhSDK.resource("zen")
# Number of methods: 1
#     metaGetZen

    @GhSDK.resource_method("zen", http_method="GET")
    def metaGetZen(self): pass
    # To call: GhSDK.resource("zen").metaGetZen(...)
    # GET https://api.github.com/zen
    # Summary: Get the Zen of GitHub
    # Description: Get a random sentence from the Zen of GitHub

