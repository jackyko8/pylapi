# PyLapi SDK generated by gen_pylapi_sdk.py
#
# SDK Class: OaiSDK
# 10 Resource Classes (number of methods):
#     AudioResource (2)
#     ChatResource (1)
#     CompletionsResource (1)
#     EditsResource (1)
#     EmbeddingsResource (1)
#     FilesResource (5)
#     FineTunesResource (5)
#     ImagesResource (3)
#     ModelsResource (3)
#     ModerationsResource (1)
# Total: 23 methods

from pylapi import PyLapi

class OaiSDK(PyLapi):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.api_url = "https://api.openai.com/v1"
        self.api_auth_type = "Bearer"

        # Custom __init__ statements

    # Custom OaiSDK methods


@OaiSDK.resource_class("audio", "")
class AudioResource(OaiSDK):

# To instantiate: OaiSDK.resource("audio")
# Number of methods: 2
#     createTranscription
#     createTranslation

    @OaiSDK.resource_method("audio/transcriptions", http_method="POST")
    def createTranscription(self): pass

    # To call: OaiSDK.resource("audio").createTranscription(...)
    # Summary: Transcribes audio into the input language.


    @OaiSDK.resource_method("audio/translations", http_method="POST")
    def createTranslation(self): pass

    # To call: OaiSDK.resource("audio").createTranslation(...)
    # Summary: Translates audio into English.


@OaiSDK.resource_class("chat", "")
class ChatResource(OaiSDK):

# To instantiate: OaiSDK.resource("chat")
# Number of methods: 1
#     createChatCompletion

    @OaiSDK.resource_method("chat/completions", http_method="POST")
    def createChatCompletion(self): pass

    # To call: OaiSDK.resource("chat").createChatCompletion(...)
    # Summary: Creates a model response for the given chat conversation.


@OaiSDK.resource_class("completions", "")
class CompletionsResource(OaiSDK):

# To instantiate: OaiSDK.resource("completions")
# Number of methods: 1
#     createCompletion

    @OaiSDK.resource_method("completions", http_method="POST")
    def createCompletion(self): pass

    # To call: OaiSDK.resource("completions").createCompletion(...)
    # Summary: Creates a completion for the provided prompt and parameters.


@OaiSDK.resource_class("edits", "")
class EditsResource(OaiSDK):

# To instantiate: OaiSDK.resource("edits")
# Number of methods: 1
#     createEdit

    @OaiSDK.resource_method("edits", http_method="POST")
    def createEdit(self): pass

    # To call: OaiSDK.resource("edits").createEdit(...)
    # Summary: Creates a new edit for the provided input, instruction, and parameters.


@OaiSDK.resource_class("embeddings", "")
class EmbeddingsResource(OaiSDK):

# To instantiate: OaiSDK.resource("embeddings")
# Number of methods: 1
#     createEmbedding

    @OaiSDK.resource_method("embeddings", http_method="POST")
    def createEmbedding(self): pass

    # To call: OaiSDK.resource("embeddings").createEmbedding(...)
    # Summary: Creates an embedding vector representing the input text.


@OaiSDK.resource_class("files", "")
class FilesResource(OaiSDK):

# To instantiate: OaiSDK.resource("files")
# Number of methods: 5
#     createFile
#     deleteFile
#     downloadFile
#     listFiles
#     retrieveFile

    @OaiSDK.resource_method("files", http_method="POST")
    def createFile(self): pass

    # To call: OaiSDK.resource("files").createFile(...)
    # Summary: Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.


    @OaiSDK.resource_method("files/{file_id}", http_method="DELETE")
    def deleteFile(self): pass

    # To call: OaiSDK.resource("files").deleteFile(...)
    # Summary: Delete a file.
    #
    # Parameters: [
    #     {
    #       "file_id": {
    #         "in": "path",
    #         "description": "The ID of the file to use for this request",
    #         "required": true
    #       }
    #     }
    #   ]


    @OaiSDK.resource_method("files/{file_id}/content", http_method="GET")
    def downloadFile(self): pass

    # To call: OaiSDK.resource("files").downloadFile(...)
    # Summary: Returns the contents of the specified file
    #
    # Parameters: [
    #     {
    #       "file_id": {
    #         "in": "path",
    #         "description": "The ID of the file to use for this request",
    #         "required": true
    #       }
    #     }
    #   ]


    @OaiSDK.resource_method("files", http_method="GET")
    def listFiles(self): pass

    # To call: OaiSDK.resource("files").listFiles(...)
    # Summary: Returns a list of files that belong to the user's organization.


    @OaiSDK.resource_method("files/{file_id}", http_method="GET")
    def retrieveFile(self): pass

    # To call: OaiSDK.resource("files").retrieveFile(...)
    # Summary: Returns information about a specific file.
    #
    # Parameters: [
    #     {
    #       "file_id": {
    #         "in": "path",
    #         "description": "The ID of the file to use for this request",
    #         "required": true
    #       }
    #     }
    #   ]


@OaiSDK.resource_class("fine_tunes", "")
class FineTunesResource(OaiSDK):

# To instantiate: OaiSDK.resource("fine_tunes")
# Number of methods: 5
#     cancelFineTune
#     createFineTune
#     listFineTuneEvents
#     listFineTunes
#     retrieveFineTune

    @OaiSDK.resource_method("fine-tunes/{fine_tune_id}/cancel", http_method="POST")
    def cancelFineTune(self): pass

    # To call: OaiSDK.resource("fine_tunes").cancelFineTune(...)
    # Summary: Immediately cancel a fine-tune job.
    #
    # Parameters: [
    #     {
    #       "fine_tune_id": {
    #         "in": "path",
    #         "description": "The ID of the fine-tune job to cancel\n",
    #         "required": true
    #       }
    #     }
    #   ]


    @OaiSDK.resource_method("fine-tunes", http_method="POST")
    def createFineTune(self): pass

    # To call: OaiSDK.resource("fine_tunes").createFineTune(...)
    # Summary: Creates a job that fine-tunes a specified model from a given dataset.

Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

[Learn more about Fine-tuning](/docs/guides/fine-tuning)


    @OaiSDK.resource_method("fine-tunes/{fine_tune_id}/events", http_method="GET")
    def listFineTuneEvents(self): pass

    # To call: OaiSDK.resource("fine_tunes").listFineTuneEvents(...)
    # Summary: Get fine-grained status updates for a fine-tune job.
    #
    # Parameters: [
    #     {
    #       "fine_tune_id": {
    #         "in": "path",
    #         "description": "The ID of the fine-tune job to get events for.\n",
    #         "required": true
    #       },
    #       "stream": {
    #         "in": "query",
    #         "description": "Whether to stream events for the fine-tune job. If set to true,\nevents will be sent as data-only\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\nas they become available. The stream will terminate with a\n`data: [DONE]` message when the job is finished (succeeded, cancelled,\nor failed).\n\nIf set to false, only events generated so far will be returned.\n",
    #         "required": false
    #       }
    #     }
    #   ]


    @OaiSDK.resource_method("fine-tunes", http_method="GET")
    def listFineTunes(self): pass

    # To call: OaiSDK.resource("fine_tunes").listFineTunes(...)
    # Summary: List your organization's fine-tuning jobs


    @OaiSDK.resource_method("fine-tunes/{fine_tune_id}", http_method="GET")
    def retrieveFineTune(self): pass

    # To call: OaiSDK.resource("fine_tunes").retrieveFineTune(...)
    # Summary: Gets info about the fine-tune job.

[Learn more about Fine-tuning](/docs/guides/fine-tuning)
    #
    # Parameters: [
    #     {
    #       "fine_tune_id": {
    #         "in": "path",
    #         "description": "The ID of the fine-tune job\n",
    #         "required": true
    #       }
    #     }
    #   ]


@OaiSDK.resource_class("images", "")
class ImagesResource(OaiSDK):

# To instantiate: OaiSDK.resource("images")
# Number of methods: 3
#     createImage
#     createImageEdit
#     createImageVariation

    @OaiSDK.resource_method("images/generations", http_method="POST")
    def createImage(self): pass

    # To call: OaiSDK.resource("images").createImage(...)
    # Summary: Creates an image given a prompt.


    @OaiSDK.resource_method("images/edits", http_method="POST")
    def createImageEdit(self): pass

    # To call: OaiSDK.resource("images").createImageEdit(...)
    # Summary: Creates an edited or extended image given an original image and a prompt.


    @OaiSDK.resource_method("images/variations", http_method="POST")
    def createImageVariation(self): pass

    # To call: OaiSDK.resource("images").createImageVariation(...)
    # Summary: Creates a variation of a given image.


@OaiSDK.resource_class("models", "")
class ModelsResource(OaiSDK):

# To instantiate: OaiSDK.resource("models")
# Number of methods: 3
#     deleteModel
#     listModels
#     retrieveModel

    @OaiSDK.resource_method("models/{model}", http_method="DELETE")
    def deleteModel(self): pass

    # To call: OaiSDK.resource("models").deleteModel(...)
    # Summary: Delete a fine-tuned model. You must have the Owner role in your organization.
    #
    # Parameters: [
    #     {
    #       "model": {
    #         "in": "path",
    #         "description": "The model to delete",
    #         "required": true
    #       }
    #     }
    #   ]


    @OaiSDK.resource_method("models", http_method="GET")
    def listModels(self): pass

    # To call: OaiSDK.resource("models").listModels(...)
    # Summary: Lists the currently available models, and provides basic information about each one such as the owner and availability.


    @OaiSDK.resource_method("models/{model}", http_method="GET")
    def retrieveModel(self): pass

    # To call: OaiSDK.resource("models").retrieveModel(...)
    # Summary: Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    #
    # Parameters: [
    #     {
    #       "model": {
    #         "in": "path",
    #         "description": "The ID of the model to use for this request",
    #         "required": true
    #       }
    #     }
    #   ]


@OaiSDK.resource_class("moderations", "")
class ModerationsResource(OaiSDK):

# To instantiate: OaiSDK.resource("moderations")
# Number of methods: 1
#     createModeration

    @OaiSDK.resource_method("moderations", http_method="POST")
    def createModeration(self): pass

    # To call: OaiSDK.resource("moderations").createModeration(...)
    # Summary: Classifies if text violates OpenAI's Content Policy

